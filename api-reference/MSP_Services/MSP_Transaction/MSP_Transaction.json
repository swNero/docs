{
  "openapi": "3.0.1",
  "info": {
    "title": "transaction-service",
    "description": "A service used for storing and manipulating with sessions and CDRs according to OCPI and OCPP specification",
    "contact": {
      "name": "P3 digital services GmbH",
      "email": "contact@energystacks.io"
    },
    "version": "v1"
  },
  "servers": [
    {
      "url": "https://baseurl/transaction/v1",
      "description": "Generated server url"
    }
  ],
  "tags": [
    {
      "name": "Sessions",
      "description": "The Session object describes one charging session."
    }
  ],
  "paths": {
    "/sessions": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get all active sessions",
        "description": "Returns a list of all active sessions of the user",
        "operationId": "getAllActiveSessions",
        "parameters": [
          {
            "name": "authorizationReference",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Session"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Sessions"
        ],
        "summary": "Create or update multiple Sessions for an Authorization Reference",
        "description": "Create or update multiple Sessions for an Authorization Reference. If active Sessions are found for the provided authorization reference, other than the requested ones, they are set to INVALID.",
        "operationId": "updateAuthReferenceSessions",
        "parameters": [
          {
            "name": "authorizationReference",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionRequestWrapper"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Session"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Authorization reference do not match, or bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/sessions/{country_code}/{party_id}/{session_id}": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get session",
        "description": "Fetches a session by country code, party id and session id",
        "operationId": "getSession",
        "parameters": [
          {
            "name": "country_code",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 2,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "party_id",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 3,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 0,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Charging session not found"
          }
        }
      },
      "put": {
        "tags": [
          "Sessions"
        ],
        "summary": "Create or Update a session",
        "description": "Create a Session if not exist, or update if exists",
        "operationId": "createOrUpdateSession",
        "parameters": [
          {
            "name": "country_code",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 2,
              "minLength": 2,
              "type": "string"
            }
          },
          {
            "name": "party_id",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 3,
              "minLength": 3,
              "type": "string"
            }
          },
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      },
      "delete": {
        "tags": [
          "Sessions"
        ],
        "summary": "Delete a session",
        "description": "Deletes a session by country code, party id and session id",
        "operationId": "deleteSession",
        "parameters": [
          {
            "name": "country_code",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 2,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "party_id",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 3,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 0,
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Charging session not found"
          }
        }
      },
      "patch": {
        "tags": [
          "Sessions"
        ],
        "summary": "Update a session",
        "description": "Update only the provided fields of a session",
        "operationId": "patchSession",
        "parameters": [
          {
            "name": "country_code",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 2,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "party_id",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 3,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 0,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchChargingSessionReq"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/cdrs": {
      "get": {
        "tags": [
          "CDRs"
        ],
        "summary": "Get CDRs with filters",
        "description": "Returns all charge detail records with filters and pagination.",
        "operationId": "getAllCdrPaginated",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "maximum": 100,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "countryCode",
            "in": "query",
            "description": "ISO-3166 alpha-2 country code of the CPO that 'owns' this CDR.",
            "required": false,
            "schema": {
              "maxLength": 2,
              "minLength": 0,
              "type": "string",
              "description": "ISO-3166 alpha-2 country code of the CPO that 'owns' this CDR.",
              "example": "DE"
            },
            "example": "DE"
          },
          {
            "name": "partyId",
            "in": "query",
            "description": "CPO ID of the CPO that 'owns' this CDR (following the ISO-15118 standard).",
            "required": false,
            "schema": {
              "maxLength": 3,
              "minLength": 0,
              "type": "string",
              "description": "CPO ID of the CPO that 'owns' this CDR (following the ISO-15118 standard).",
              "example": "BEC"
            },
            "example": "BEC"
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Start timestamp of the charging session, or in-case of a reservation (before the start of a session) the start of the reservation.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Start timestamp of the charging session, or in-case of a reservation (before the start of a session) the start of the reservation.",
              "example": "2020-06-30T23:59:59"
            },
            "example": "2020-06-30T23:59:59"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "The timestamp when the session was completed/finished, charging might have finished before the session ends, for example: EV is full, but parking cost also has to be paid.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The timestamp when the session was completed/finished, charging might have finished before the session ends, for example: EV is full, but parking cost also has to be paid.",
              "example": "2023-06-30T23:59:59"
            },
            "example": "2023-06-30T23:59:59"
          },
          {
            "name": "tokenCountryCode",
            "in": "query",
            "description": "Country code of the MSP that 'owns' this Token.",
            "required": false,
            "schema": {
              "maxLength": 2,
              "minLength": 0,
              "type": "string",
              "description": "Country code of the MSP that 'owns' this Token.",
              "example": "DE"
            },
            "example": "DE"
          },
          {
            "name": "tokenPartyId",
            "in": "query",
            "description": "ID of the eMSP that 'owns' this Token.",
            "required": false,
            "schema": {
              "maxLength": 3,
              "minLength": 0,
              "type": "string",
              "description": "ID of the eMSP that 'owns' this Token.",
              "example": "BEC"
            },
            "example": "BEC"
          },
          {
            "name": "tokenUid",
            "in": "query",
            "description": "List of unique IDs by which these Tokens can be identified. This is the field used by the CPO’s system (RFID reader on the Charge Point) to identify these tokens. Currently, in most cases: type=RFID, this is the RFID hidden ID as read by the RFID reader, but that is not a requirement. If this is a <b>type=APP_USER</b> Token, it will be a unique, by the eMSP, generated ID.",
            "required": false,
            "schema": {
              "maxItems": 36,
              "minItems": 0,
              "type": "array",
              "items": {
                "maxLength": 36,
                "minLength": 0,
                "type": "string"
              }
            },
            "example": [
              "012345678"
            ]
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Uniquely identifies the location within the CPO’s platform (and suboperator platforms). This field can never be changed, modified or renamed.",
            "required": false,
            "schema": {
              "maxLength": 36,
              "minLength": 0,
              "type": "string",
              "description": "Uniquely identifies the location within the CPO’s platform (and suboperator platforms). This field can never be changed, modified or renamed.",
              "example": "123e4567-e89b-42d3-a456-426614174000"
            },
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          {
            "name": "locationEvseIds",
            "in": "query",
            "description": "List of EVSE IDs to search.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "authorizationReference",
            "in": "query",
            "description": "Reference to the authorization given by the eMSP, when given, this reference will be provided in the relevant Session and/or CDR.",
            "required": false,
            "schema": {
              "maxLength": 36,
              "minLength": 0,
              "type": "string",
              "description": "Reference to the authorization given by the eMSP, when given, this reference will be provided in the relevant Session and/or CDR.",
              "example": "40dbc1a6-3324-4424-a798-3a6e70e83bba"
            },
            "example": "40dbc1a6-3324-4424-a798-3a6e70e83bba"
          },
          {
            "name": "cdrIds",
            "in": "query",
            "description": "List of CDR IDs to search.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Cdr"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      },
      "post": {
        "tags": [
          "CDRs"
        ],
        "summary": "Create a CDR",
        "description": "Add a new CDR to the transaction database",
        "operationId": "createCdr",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CdrCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cdr"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/cdrs-export/pdf": {
      "post": {
        "tags": [
          "Export CDRs"
        ],
        "summary": "Cdrs PDF export",
        "description": "Exports cdrs for given filters to a PDF",
        "operationId": "generatePdf",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GeneratePdfWrapper"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/octet-stream": {}
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/cdrs-export/csv": {
      "post": {
        "tags": [
          "Export CDRs"
        ],
        "summary": "CDRs CSV export",
        "description": "Exports CDRs for given filters to a CSV",
        "operationId": "generateCsv",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CdrFilterRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/octet-stream": {}
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/cdrs-export/cdrIds/pdf": {
      "post": {
        "tags": [
          "Export CDRs"
        ],
        "summary": "CDRs PDF export for CDR id list given",
        "description": "Exports CDRs for given filters & CDR ids to a PDF",
        "operationId": "generatePdfCdrIds",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GeneratePdfWrapperExtended"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/octet-stream": {}
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/cdrs-export/cdrIds/csv": {
      "post": {
        "tags": [
          "Export CDRs"
        ],
        "summary": "CDRs CSV export for specific CDR id list given",
        "description": "Exports CDRs for given filters and CDR ids to a CSV",
        "operationId": "generateCsvCdrIds",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateCsvWrapperExtended"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/octet-stream": {}
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/sessions/{country_code}/{party_id}/{session_id}/statuses": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get session by statuses",
        "description": "Retrieves a session based on its identifier and a list of statuses.",
        "operationId": "getActiveSession",
        "parameters": [
          {
            "name": "country_code",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 2,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "party_id",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 3,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "statuses",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "ACTIVE",
                  "COMPLETED",
                  "INVALID",
                  "PENDING",
                  "RESERVATION"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Charging session not found, or not Active"
          }
        }
      }
    },
    "/sessions/sessionId/all": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get all sessions by sessionId",
        "description": "Returns a list of sessions for provided sessionIds",
        "operationId": "getSessionsBySessionId",
        "parameters": [
          {
            "name": "sessionId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Session"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sessions/search": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Search for sessions",
        "description": "Get all sessions in database based on search criteria",
        "operationId": "search",
        "parameters": [
          {
            "name": "startDateTime",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDateTime",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "connectorId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ACTIVE",
                "COMPLETED",
                "INVALID",
                "PENDING",
                "RESERVATION"
              ]
            }
          },
          {
            "name": "pageable",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Session not found"
          }
        }
      }
    },
    "/sessions/latest-by-evseId/{evseId}": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get latest pending session",
        "description": "Gets the latest pending session for given EVSE ID",
        "operationId": "getLatestPendingSessionByEvseId",
        "parameters": [
          {
            "name": "evseId",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 0,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Charging session not found"
          }
        }
      }
    },
    "/sessions/filtered": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get filtered sessions by sessionIds paginated",
        "description": "Returns a list of active sessions for provided sessionIds",
        "operationId": "getSessionsBySessionIdsFiltered",
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "description": "The time when this tariff becomes active, in UTC, time_zone field of the Location can be used to convert to local time. Typically used for a new tariff that is already given with the location, before it becomes active.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The time when this tariff becomes active, in UTC, time_zone field of the Location can be used to convert to local time. Typically used for a new tariff that is already given with the location, before it becomes active.",
              "example": "2024-06-30T23:59:59"
            },
            "example": "2024-06-30T23:59:59"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "The time after which this tariff is no longer valid, in UTC, time_zone field if the Location can be used to convert to local time. Typically used when this tariff is going to be replaced with a different tariff in the near future.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The time after which this tariff is no longer valid, in UTC, time_zone field if the Location can be used to convert to local time. Typically used when this tariff is going to be replaced with a different tariff in the near future.",
              "example": "2024-06-30T23:59:59"
            },
            "example": "2024-06-30T23:59:59"
          },
          {
            "name": "evseIds",
            "in": "query",
            "description": "The id of the evses",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The id of the evses"
            }
          },
          {
            "name": "sessionIds",
            "in": "query",
            "description": "The id of the sessions",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The id of the sessions"
            }
          },
          {
            "name": "pageable",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Session"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/cdrs/{countryCode}/{partyId}/{sessionId}": {
      "get": {
        "tags": [
          "CDRs"
        ],
        "summary": "Get CDR by country code, party id and session id",
        "description": "Returns charge detail record for the specified country code, party id and session id combination.",
        "operationId": "getCdrsByCountryCodePartyIdAndSessionId",
        "parameters": [
          {
            "name": "countryCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sessionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cdr"
                }
              }
            }
          }
        }
      }
    },
    "/cdrs/{cdrId}": {
      "get": {
        "tags": [
          "CDRs"
        ],
        "summary": "Get CDR by cdr id",
        "description": "Returns charge detail record for the specified cdr id.",
        "operationId": "getCdrById",
        "parameters": [
          {
            "name": "cdrId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cdr"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "A CDR with the specified ID is not found."
          }
        }
      }
    },
    "/cdrs/cdrIds": {
      "get": {
        "tags": [
          "CDRs"
        ],
        "summary": "Get cdrs by cdrIds",
        "description": "Returns a list of cdrs for provided cdrIds",
        "operationId": "getCdrByCdrIds",
        "parameters": [
          {
            "name": "cdrIds",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Cdr"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CdrDimension": {
        "required": [
          "type",
          "volume"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of CDR dimension.",
            "example": "RESERVATION_TIME",
            "enum": [
              "CURRENT",
              "ENERGY",
              "ENERGY_EXPORT",
              "ENERGY_IMPORT",
              "MAX_CURRENT",
              "MIN_CURRENT",
              "MAX_POWER",
              "MIN_POWER",
              "PARKING_TIME",
              "POWER",
              "RESERVATION_TIME",
              "STATE_OF_CHARGE",
              "TIME"
            ]
          },
          "volume": {
            "type": "number",
            "description": "Volume of the dimension consumed, measured according to the dimension type.",
            "example": 79.65
          }
        },
        "description": "List of relevant values for this charging period."
      },
      "CdrToken": {
        "required": [
          "contract_id",
          "country_code",
          "party_id",
          "type",
          "uid"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Unique ID by which this Token can be identified. This is the field used by the CPO’s system (RFID reader on the Charge Point) to identify this token. Currently, in most cases: type=RFID, this is the RFID hidden ID as read by the RFID reader, but that is not a requirement. If this is a <b>type=APP_USER</b> Token, it will be a unique, by the eMSP, generated ID.",
            "example": "LKnPKAYKvf"
          },
          "country_code": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "Country code of the MSP that 'owns' this Token.",
            "example": "DE"
          },
          "party_id": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "ID of the eMSP that 'owns' this Token.",
            "example": "ERG"
          },
          "type": {
            "type": "string",
            "description": "    The type of token\n    * <p>\n    * NOTE: The eMSP is RECOMMENDED to push Tokens with type: AD_HOC_USER or APP_USER with whitelist set to\n    * NEVER. Whitelists are very useful for RFID type Tokens, but the AD_HOC_USER/APP_USER Tokens are used to\n    * start Sessions from an App etc. so whitelisting them has no advantages.\n    * </p>\n",
            "example": "RFID",
            "enum": [
              "AD_HOC_USER",
              "APP_USER",
              "OTHER",
              "RFID"
            ]
          },
          "contract_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the EV driver contract token within the eMSP’s platform (and suboperator platforms). Recommended to follow the specification for eMA ID from eMI3 standard version V1.0 (http://emi3group.com/documents-links/) Part 2: business objects.",
            "example": "DE8ACC12E46L89"
          }
        },
        "description": "Token used to start this charging session, including all the relevant information to identify the unique token."
      },
      "ChargingPeriod": {
        "required": [
          "dimensions",
          "start_date_time"
        ],
        "type": "object",
        "properties": {
          "dimensions": {
            "type": "array",
            "description": "List of relevant values for this charging period.",
            "items": {
              "$ref": "#/components/schemas/CdrDimension"
            }
          },
          "start_date_time": {
            "type": "string",
            "description": "Start timestamp of the charging period. A period ends when the next period starts. The last period ends when the session ends.",
            "format": "date-time"
          },
          "tariff_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Unique identifier of the Tariff that is relevant for this Charging Period. If not provided, no Tariff is relevant during this period.",
            "example": "901c4ba9-e275-4b2a-b0ed-3a1ac710b25c"
          }
        },
        "description": "A Charging Period consists of a start timestamp and a list of possible values that influence this period, for example: amount of energy charged this period, maximum current during this period etc."
      },
      "Price": {
        "required": [
          "excl_vat"
        ],
        "type": "object",
        "properties": {
          "excl_vat": {
            "type": "number",
            "description": "Price/Cost excluding VAT.",
            "example": 87.31
          },
          "incl_vat": {
            "type": "number",
            "description": "Price/Cost including VAT.",
            "example": 101.88
          }
        },
        "description": "The total cost of the session in the specified currency. This is the price that the eMSP will have to pay to the CPO. A total_cost of 0.00 means free of charge. When omitted, i.e. no price information is given in the Session object, it does not imply the session is/was free of charge."
      },
      "Session": {
        "required": [
          "auth_method",
          "cdr_token",
          "connector_id",
          "country_code",
          "currency",
          "evse_uid",
          "id",
          "kwh",
          "last_updated",
          "location_id",
          "party_id",
          "start_date_time",
          "status"
        ],
        "type": "object",
        "properties": {
          "kwh": {
            "type": "number",
            "description": "How many kWh were charged.",
            "example": 154
          },
          "status": {
            "type": "string",
            "description": "The status of the session.",
            "example": "PENDING",
            "enum": [
              "ACTIVE",
              "COMPLETED",
              "INVALID",
              "PENDING",
              "RESERVATION"
            ]
          },
          "country_code": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "ISO-3166 alpha-2 country code of the CPO that 'owns' this Session.",
            "example": "NL"
          },
          "party_id": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "CPO ID of the CPO that 'owns' this Session (following the ISO-15118 standard).",
            "example": "STK"
          },
          "id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "The unique id that identifies the charging session in the CPO platform.",
            "example": "101"
          },
          "start_date_time": {
            "type": "string",
            "description": "The timestamp when the session became ACTIVE in the Charge Point.",
            "format": "date-time"
          },
          "end_date_time": {
            "type": "string",
            "description": "The timestamp when the session was completed/finished, charging might have finished before the session ends, for example: EV is full, but parking cost also has to be paid.",
            "format": "date-time"
          },
          "cdr_token": {
            "$ref": "#/components/schemas/CdrToken"
          },
          "auth_method": {
            "type": "string",
            "description": "Method used for authentication.",
            "example": "WHITELIST",
            "enum": [
              "AUTH_REQUEST",
              "COMMAND",
              "WHITELIST"
            ]
          },
          "authorization_reference": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Reference to the authorization given by the eMSP."
          },
          "location_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Location.id of the Location object of this CPO, on which the charging session is/was happening.",
            "example": "LOC1"
          },
          "evse_uid": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "EVSE.uid of the EVSE of this Location on which the charging session is/was happening.",
            "example": "3256"
          },
          "connector_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Connector.id of the Connector of this Location the charging session is/was happening.",
            "example": "1"
          },
          "meter_id": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Optional identification of the kWh meter."
          },
          "currency": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "ISO 4217 code of the currency used for this session.",
            "example": "EUR"
          },
          "charging_periods": {
            "type": "array",
            "description": "An optional list of Charging Periods that can be used to calculate and verify the total cost.",
            "items": {
              "$ref": "#/components/schemas/ChargingPeriod"
            }
          },
          "total_cost": {
            "$ref": "#/components/schemas/Price"
          },
          "last_updated": {
            "type": "string",
            "description": "Timestamp when this Session was last updated (or created).",
            "format": "date-time",
            "example": "2021-03-19T14:11:43Z"
          }
        },
        "description": "The Session object describes one charging session. That doesn’t mean it is required that energy has been transferred between EV and the Charge Point. It is possible that the EV never took energy from the Charge Point because it was instructed not to take energy by the driver. But as the EV was connected to the Charge Point, some form of start tariff, park tariff or reservation cost might be relevant."
      },
      "ErrorMessageDto": {
        "required": [
          "errorCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "The error message",
            "example": "Example error message"
          },
          "errorCode": {
            "type": "string",
            "description": "The error code",
            "example": "EXAMPLE_ERROR_CODE"
          }
        }
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "description": "Affected field"
          },
          "message": {
            "type": "string",
            "description": "Validation message"
          }
        },
        "description": "List of validation errors"
      },
      "ValidationErrorMessageDto": {
        "required": [
          "errorCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "The error message",
            "example": "Example error message"
          },
          "errorCode": {
            "type": "string",
            "description": "The error code",
            "example": "EXAMPLE_ERROR_CODE"
          },
          "validationErrors": {
            "type": "array",
            "description": "List of validation errors",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "SessionRequest": {
        "required": [
          "auth_method",
          "cdr_token",
          "connector_id",
          "country_code",
          "currency",
          "evse_uid",
          "id",
          "kwh",
          "location_id",
          "party_id",
          "start_date_time",
          "status"
        ],
        "type": "object",
        "properties": {
          "country_code": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "ISO-3166 alpha-2 country code of the CPO that 'owns' this Session.",
            "example": "NL"
          },
          "party_id": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "CPO ID of the CPO that 'owns' this Session (following the ISO-15118 standard).",
            "example": "STK"
          },
          "id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "The unique id that identifies the charging session in the CPO platform.",
            "example": "101"
          },
          "start_date_time": {
            "type": "string",
            "description": "The timestamp when the session became ACTIVE in the Charge Point.",
            "format": "date-time"
          },
          "end_date_time": {
            "type": "string",
            "description": "The timestamp when the session was completed/finished, charging might have finished before the session ends, for example: EV is full, but parking cost also has to be paid.",
            "format": "date-time"
          },
          "kwh": {
            "type": "number",
            "description": "How many kWh were charged.",
            "example": 154.05
          },
          "cdr_token": {
            "$ref": "#/components/schemas/CdrToken"
          },
          "auth_method": {
            "type": "string",
            "description": "Method used for authentication.",
            "example": "WHITELIST",
            "enum": [
              "AUTH_REQUEST",
              "COMMAND",
              "WHITELIST"
            ]
          },
          "authorization_reference": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Reference to the authorization given by the eMSP."
          },
          "location_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Location.id of the Location object of this CPO, on which the charging session is/was happening.",
            "example": "LOC1"
          },
          "evse_uid": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "EVSE.uid of the EVSE of this Location on which the charging session is/was happening.",
            "example": "3256"
          },
          "connector_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Connector.id of the Connector of this Location the charging session is/was happening.",
            "example": "1"
          },
          "meter_id": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Optional identification of the kWh meter."
          },
          "currency": {
            "type": "string",
            "description": "ISO 4217 code of the currency used for this session.",
            "example": "EUR"
          },
          "charging_periods": {
            "type": "array",
            "description": "An optional list of Charging Periods that can be used to calculate and verify the total cost.",
            "items": {
              "$ref": "#/components/schemas/ChargingPeriod"
            }
          },
          "total_cost": {
            "$ref": "#/components/schemas/Price"
          },
          "status": {
            "type": "string",
            "description": "The status of the session.",
            "example": "PENDING",
            "enum": [
              "ACTIVE",
              "COMPLETED",
              "INVALID",
              "PENDING",
              "RESERVATION"
            ]
          },
          "last_updated": {
            "type": "string",
            "description": "Timestamp when this session was last updated (or created). If not provided, default value is given.",
            "format": "date-time"
          }
        }
      },
      "SessionRequestWrapper": {
        "required": [
          "sessionRequests"
        ],
        "type": "object",
        "properties": {
          "sessionRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionRequest"
            }
          }
        }
      },
      "SuccessMessageDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          }
        }
      },
      "Cdr": {
        "required": [
          "auth_method",
          "cdr_location",
          "cdr_token",
          "charging_periods",
          "country_code",
          "currency",
          "end_date_time",
          "id",
          "last_updated",
          "party_id",
          "start_date_time",
          "total_cost",
          "total_energy",
          "total_time"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "Currency of the CDR in ISO 4217 Code.",
            "example": "EUR"
          },
          "tariffs": {
            "type": "array",
            "description": "List of relevant Tariff Elements, see: Tariff. When relevant, a Free of Charge tariff should also be in this list, and point to a defined Free of Charge Tariff.",
            "items": {
              "$ref": "#/components/schemas/Tariff"
            }
          },
          "remark": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Optional remark, can be used to provide additional human readable information to the CDR, for example: reason why a transaction was stopped.",
            "example": "The cost of the electricity required to charge an EV is less than the cost to use petrol for a similar sized vehicle driving the same distance1. The cost will be lower if you charge your EV from your solar PV system or at free charging stations."
          },
          "credit": {
            "type": "boolean",
            "description": "When set to true, this is a Credit CDR, and the field credit_reference_id needs to be set as well."
          },
          "country_code": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "ISO-3166 alpha-2 country code of the CPO that 'owns' this CDR.",
            "example": "DE"
          },
          "party_id": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "CPO ID of the CPO that 'owns' this CDR (following the ISO-15118 standard).",
            "example": "ERG"
          },
          "id": {
            "maxLength": 39,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the CDR within the CPO’s platform (and suboperator platforms). This field is longer than the usual 36 characters to allow for credit CDRs to have something appended to the original ID. Normal (non-credit) CDRs SHALL only have an ID with a maximum length of 36.",
            "example": "12345"
          },
          "start_date_time": {
            "type": "string",
            "description": "Start timestamp of the charging session, or in-case of a reservation (before the start of a session) the start of the reservation.",
            "format": "date-time",
            "example": "2015-06-29T21:39:09Z"
          },
          "end_date_time": {
            "type": "string",
            "description": "The timestamp when the session was completed/finished, charging might have finished before the session ends, for example: EV is full, but parking cost also has to be paid.",
            "format": "date-time",
            "example": "2015-06-29T23:37:32Z"
          },
          "session_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Unique ID of the Session for which this CDR is sent. Is only allowed to be omitted when the CPO has not implemented the Sessions module or this CDR is the result of a reservation that never became a charging session, thus no OCPI Session.",
            "example": "59bff33b-595f-407a-ad42-6ea665ef2d74"
          },
          "cdr_token": {
            "$ref": "#/components/schemas/CdrToken"
          },
          "auth_method": {
            "type": "string",
            "description": "Method used for authentication.",
            "example": "WHITELIST",
            "enum": [
              "AUTH_REQUEST",
              "COMMAND",
              "WHITELIST"
            ]
          },
          "authorization_reference": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Reference to the authorization given by the eMSP. When the eMSP provided an authorization_reference in either: real-time authorization or StartSession, this field SHALL contain the same value. When different authorization_reference values have been given by the eMSP that are relevant to this Session, the last given value SHALL be used here.",
            "example": "40dbc1a6-3324-4424-a798-3a6e70e83bba"
          },
          "cdr_location": {
            "$ref": "#/components/schemas/CdrLocation"
          },
          "meter_id": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Identification of the Meter inside the Charge Point.",
            "example": "demo meter id"
          },
          "charging_periods": {
            "type": "array",
            "description": "List of Charging Periods that make up this charging session. A session consists of 1 or more periods, where each period has a different relevant Tariff.",
            "items": {
              "$ref": "#/components/schemas/ChargingPeriod"
            }
          },
          "signed_data": {
            "$ref": "#/components/schemas/SignedData"
          },
          "total_cost": {
            "$ref": "#/components/schemas/Price"
          },
          "total_fixed_cost": {
            "$ref": "#/components/schemas/Price"
          },
          "total_energy": {
            "type": "number",
            "description": "Total energy charged, in kWh."
          },
          "total_energy_cost": {
            "$ref": "#/components/schemas/Price"
          },
          "total_time": {
            "type": "number",
            "description": "Total duration of the charging session (including the duration of charging and not charging), in hours."
          },
          "total_time_cost": {
            "$ref": "#/components/schemas/Price"
          },
          "total_parking_time": {
            "type": "number",
            "description": "Total duration of the charging session where the EV was not charging (no energy was transferred between EVSE and EV), in hours."
          },
          "total_parking_cost": {
            "$ref": "#/components/schemas/Price"
          },
          "total_reservation_cost": {
            "$ref": "#/components/schemas/Price"
          },
          "invoice_reference_id": {
            "maxLength": 39,
            "minLength": 0,
            "type": "string",
            "description": "This field can be used to reference an invoice, that will later be send for this CDR. Making it easier to link a CDR to a given invoice. Maybe even group CDRs that will be on the same invoice."
          },
          "credit_reference_id": {
            "maxLength": 39,
            "minLength": 0,
            "type": "string",
            "description": "Is required to be set for a Credit CDR. This SHALL contain the id of the CDR for which this is a Credit CDR.",
            "example": "11ctt8q0y5tq0li8671wz3a5p8oe436bcmefr55"
          },
          "home_charging_compensation": {
            "type": "boolean",
            "description": "When set to true, this CDR is for a charging session using the home charger of the EV Driver for which the energy cost needs to be financially compensated to the EV Driver."
          },
          "last_updated": {
            "type": "string",
            "description": "Timestamp when this CDR was last updated (or created).",
            "format": "date-time",
            "example": "2021-03-19T14:11:43Z"
          }
        },
        "description": "The CDR object describes the charging session and its costs, how these costs are composed, etc.<br>The CDR object is different from the Session object. The Session object is dynamic as it reflects the current state of the chargingsession. The information is meant to be viewed by the driver while the charging session is ongoing.<br>"
      },
      "CdrLocation": {
        "required": [
          "address",
          "city",
          "connector_format",
          "connector_id",
          "connector_power_type",
          "connector_standard",
          "coordinates",
          "country",
          "evse_id",
          "evse_uid",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 39,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the location within the CPO’s platform (and suboperator platforms). This field can never be changed, modified or renamed.",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Display name of the location.",
            "example": "Gent Zuid"
          },
          "address": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "Street/block name and house number if available.",
            "example": "F.Rooseveltlaan 3A"
          },
          "city": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "City or town.",
            "example": "Gent"
          },
          "state": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "State only to be used when relevant."
          },
          "country": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "ISO 3166-1 alpha-3 code for the country of this location.",
            "example": "BEL"
          },
          "coordinates": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "postal_code": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Postal code of the location.",
            "example": "9000"
          },
          "evse_uid": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the EVSE within the CPO’s platform (and suboperator platforms). For example a database unique ID or the actual EVSE ID. This field  can never be changed, modified or renamed. This is the technical identification of the EVSE, not to be used as human readable identification, use the field: evse_id for that.",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "evse_id": {
            "maxLength": 48,
            "minLength": 0,
            "type": "string",
            "description": "Compliant with the following specification for EVSE ID from eMI3 standard version V1.0 (http://emi3group.com/documents-links/) Part 2: business objects.",
            "example": "DE*ERG*E10001*1"
          },
          "connector_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Identifier of the connector within the EVSE.",
            "example": "BE*BEC*E041503003"
          },
          "connector_standard": {
            "type": "string",
            "description": "The standard of the installed connector.",
            "example": "TESLA_R",
            "enum": [
              "CHADEMO",
              "CHAOJI",
              "DOMESTIC_A",
              "DOMESTIC_B",
              "DOMESTIC_C",
              "DOMESTIC_D",
              "DOMESTIC_E",
              "DOMESTIC_F",
              "DOMESTIC_G",
              "DOMESTIC_H",
              "DOMESTIC_I",
              "DOMESTIC_J",
              "DOMESTIC_K",
              "DOMESTIC_L",
              "DOMESTIC_M",
              "DOMESTIC_N",
              "DOMESTIC_O",
              "GBT_AC",
              "GBT_DC",
              "IEC_60309_2_single_16",
              "IEC_60309_2_three_16",
              "IEC_60309_2_three_32",
              "IEC_60309_2_three_64",
              "IEC_62196_T1",
              "IEC_62196_T1_COMBO",
              "IEC_62196_T2",
              "IEC_62196_T2_COMBO",
              "IEC_62196_T3A",
              "IEC_62196_T3C",
              "NEMA_5_20",
              "NEMA_6_30",
              "NEMA_6_50",
              "NEMA_10_30",
              "NEMA_10_50",
              "NEMA_14_30",
              "NEMA_14_50",
              "PANTOGRAPH_BOTTOM_UP",
              "PANTOGRAPH_TOP_DOWN",
              "TESLA_R",
              "TESLA_S",
              "UNKNOWN"
            ]
          },
          "connector_format": {
            "type": "string",
            "description": "The format (socket/cable) of the installed connector.",
            "example": "CABLE",
            "enum": [
              "SOCKET",
              "CABLE"
            ]
          },
          "connector_power_type": {
            "type": "string",
            "description": "Connector power type",
            "example": "AC_2_PHASE_SPLIT",
            "enum": [
              "AC_1_PHASE",
              "AC_2_PHASE",
              "AC_2_PHASE_SPLIT",
              "AC_3_PHASE",
              "DC"
            ]
          }
        },
        "description": "The CdrLocation class contains only the relevant information from the Location object that is needed in a CDR."
      },
      "DisplayText": {
        "required": [
          "language",
          "text"
        ],
        "type": "object",
        "properties": {
          "language": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "Language Code ISO 639-1.",
            "example": "en"
          },
          "text": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Text to be displayed to a end user. No markup, html etc. allowed.",
            "example": "this is a display text"
          }
        },
        "description": "List of multi-language alternative tariff info texts."
      },
      "EnergyMix": {
        "required": [
          "is_green_energy"
        ],
        "type": "object",
        "properties": {
          "is_green_energy": {
            "type": "boolean",
            "description": "True if 100% from regenerative sources. (CO2 and nuclear waste is zero)",
            "example": false
          },
          "energy_sources": {
            "type": "array",
            "description": "Key-value pairs (enum + percentage) of energy sources of this location’s tariff.",
            "items": {
              "$ref": "#/components/schemas/EnergySource"
            }
          },
          "environ_impact": {
            "type": "array",
            "description": "Key-value pairs (enum + percentage) of nuclear waste and CO2 exhaust of this location’s tariff.",
            "items": {
              "$ref": "#/components/schemas/EnvironmentalImpact"
            }
          },
          "supplier_name": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Name of the energy supplier, delivering the energy for this location or tariff.",
            "example": "HANDWE EV"
          },
          "energy_product_name": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Name of the energy suppliers product/tariff plan used at this location.",
            "example": "Kleenheat"
          }
        },
        "description": "This type is used to specify the energy mix and environmental impact of the supplied energy at a location or in a tariff."
      },
      "EnergySource": {
        "required": [
          "percentage",
          "source"
        ],
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "description": "Categories of energy sources.",
            "example": "GAS",
            "enum": [
              "NUCLEAR",
              "GENERAL_FOSSIL",
              "COAL",
              "GAS",
              "GENERAL_GREEN",
              "SOLAR",
              "WIND",
              "WATER"
            ]
          },
          "percentage": {
            "maximum": 100,
            "exclusiveMaximum": false,
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "number",
            "description": "Percentage of this source (0-100) in the mix.",
            "example": 33.2
          }
        },
        "description": "Key-value pairs (enum + percentage) of energy sources. All given values of all categories should add up to 100 percent."
      },
      "EnvironmentalImpact": {
        "required": [
          "amount",
          "category"
        ],
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "description": "Categories of environmental impact values.",
            "example": "NUCLEAR_WASTE",
            "enum": [
              "NUCLEAR_WASTE",
              "CARBON_DIOXIDE"
            ]
          },
          "amount": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "number",
            "description": "Amount of this portion in g/kWh.",
            "example": 0.005
          }
        },
        "description": "Amount of waste produced/emitted per kWh."
      },
      "GeoLocation": {
        "required": [
          "latitude",
          "longitude"
        ],
        "type": "object",
        "properties": {
          "latitude": {
            "type": "string",
            "description": "Latitude of the point in decimal degree. Decimal separator: '.', Regex: -?[0-9]{1,2}\\.[0-9]{5,7}",
            "example": "50.770774"
          },
          "longitude": {
            "type": "string",
            "description": "Longitude of the point in decimal degree. Decimal separator: '.' Regex: -?[0-9]{1,3}\\.[0-9]{5,7}",
            "example": "-126.104965"
          }
        },
        "description": "This class defines the geo location of the Charge Point. The geodetic system to be used is WGS 84."
      },
      "PriceComponent": {
        "required": [
          "price",
          "step_size",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of tariff dimension.",
            "enum": [
              "ENERGY",
              "FLAT",
              "PARKING_TIME",
              "TIME"
            ]
          },
          "price": {
            "type": "number",
            "description": "Price per unit (excl. VAT) for this tariff dimension.",
            "example": 2
          },
          "vat": {
            "type": "number",
            "description": "Applicable VAT percentage for this tariff dimension. If omitted, no VAT is applicable. Not providing a VAT is different from 0% VAT, which would be a value of 0.0 here.",
            "example": 10
          },
          "step_size": {
            "type": "integer",
            "description": "Minimum amount to be billed. This unit will be billed in this step_size blocks. Amounts that are less then this step_size are rounded up to the given step_size. For example: if type is TIME and step_size has a value of 300, then time will be billed in blocks of 5 minutes. If 6 minutes were used, 10 minutes (2 blocks of step_size) will be billed.",
            "format": "int32",
            "example": 300
          }
        },
        "description": "List of price components that describe the pricing of a tariff."
      },
      "SignedData": {
        "required": [
          "encoding_method",
          "signed_values"
        ],
        "type": "object",
        "properties": {
          "url": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "URL that can be shown to an EV driver. This URL gives the EV driver the possibility to check the signed data from a charging session.",
            "example": "https://www.example.com/advertisement"
          },
          "encoding_method": {
            "type": "string",
            "description": "The name of the encoding used in the SignedData field. This is the name given to the encoding by a company or group of companies.",
            "example": "UTF-8"
          },
          "encoding_method_version": {
            "type": "integer",
            "description": "Version of the EncodingMethod (when applicable)",
            "format": "int32"
          },
          "public_key": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Public key used to sign the data, base64 encoded.",
            "example": "-----BEGIN RSA PUBLIC KEY-----\nMEgCQQCo9+BpMRYQ/dL3DS2CyJxRF+j6ctbT3/Qp84+KeFhnii7NT7fELilKUSnx\nS30WAvQCCo2yU1orfgqr41mM70MBAgMBAAE=\n-----END RSA PUBLIC KEY-----"
          },
          "signed_values": {
            "type": "array",
            "description": "One or more signed values.",
            "items": {
              "$ref": "#/components/schemas/SignedValue"
            }
          }
        },
        "description": "This class contains all the information of the signed data. Which encoding method is used, if needed, the public key and a list of signed values."
      },
      "SignedValue": {
        "required": [
          "plain_data",
          "signed_data"
        ],
        "type": "object",
        "properties": {
          "nature": {
            "type": "string",
            "description": "Nature of the value, in other words, the event this value belongs to.\nPossible values at moment of writing: \n- Start (value at the start of the Session)\n- End (signed value at the end of the Session)\n- Intermediate (signed values take during the Session, after Start, before End)\nOthers might be added later."
          },
          "plain_data": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "The unencoded string of data. The format of the content depends on the EncodingMethod field.",
            "example": "iu9daxlgjc1fn7l5qj8777t9qxduy1a93366psubpp3j9aeogh6p0quc8myofqaoqc7tibug9ivxza754qtzguq61tt8ugygqoxv3rzi7tfmms13jx50455h7z3c9tj11s2hh316ecrreqo9e6farf716vnhcs6wnoz7rn0umcktx2c2y8ggem1zkqa1tqlgtx7hd29qkyzu5izjlpyjyvj0a22lyerpljc9k32bexp1hfhpofnon3by09xnohrfxy9trraev0yihdelc53slaw4opz8jfi3pxqhksz3bkh2lcsvz7lon9hbuh4fty260qmo6f53vqfwco1ptwjqqby5gmzgqpq29knbfwg8qxkpmqwglyhu6zrtm5ghyn4ft4hqwhy444zhr2wjerg71ue8qa5tl2ur6k7hidp0wssta2d1coyl2nhfik3j75m2pho3yurirttasr2m977kcfr5h0vsxjlj0r02lxucu6hk9yfipwti4xeddymxni1p"
          },
          "signed_data": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Blob of signed data, base64 encoded. The format of the content depends on the EncodingMethod field.",
            "example": "}/x/j*}g9k^1axjfv{+91#w’dhuds’>”^`%{4>xw1!b7~!8w]awi:_0jv:`=^pf_q_7.f`<^9f^o$w.#qzmb(8$|!.mo^>_ixgea4{c{gfb:bu^f\\w}haj5(^djnbvy>z=!5o|m.\\”x0>|9p7*h~.1&;hl=z65)#o]q(x’/l^’/ne-vt<:a&#4y08]b.f@%te+85iw9dkvy@6ah$9[[;’ut:\\:y7p&;70l$s?[u)\\c9”]>k1{w~`ih*a;-1dv(=[?g!6!a/ma%”!*630_=^g’mf6e;<hy;k;^kny=#31c;>}’sh”’<^3!/’’$vw`u8{?4”akms+{egz<x>79{.7y%k.(x4@.*@t?|7e5kvt94/][p=qxl|_:z^]6&h$]m0dlx!^{>\\@@x@u.~ca?8^d{=vxr1#7gdt0`!qv0fwl9^::\\)]jv(n#?””z}$8_4#*fv!ld|n_r%u?>]=v(|i”e*blz//%h`\b!@d/0$+=izqi:$f(.dll.]ji@%2gq$1ds?"
          }
        },
        "description": "This class contains the signed and the plain/unsigned data. By decoding the data, the receiver can check if the content has not been altered."
      },
      "Tariff": {
        "required": [
          "country_code",
          "currency",
          "elements",
          "id",
          "last_updated",
          "party_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the tariff within the CPO’s platform (and suboperator platforms).",
            "example": "12"
          },
          "currency": {
            "type": "string",
            "description": "ISO-4217 code of the currency of this tariff.",
            "example": "EUR"
          },
          "type": {
            "type": "string",
            "description": "Defines the type of the tariff. This allows for distinction in case of given Charging Preferences. When omitted, this tariff is valid for all sessions.",
            "example": "REGULAR",
            "enum": [
              "AD_HOC_PAYMENT",
              "PROFILE_CHEAP",
              "PROFILE_FAST",
              "PROFILE_GREEN",
              "REGULAR"
            ]
          },
          "elements": {
            "type": "array",
            "description": "List of Tariff Elements.",
            "items": {
              "$ref": "#/components/schemas/TariffElement"
            }
          },
          "country_code": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "ISO-3166 alpha-2 country code of the CPO that owns this Tariff.",
            "example": "BE"
          },
          "party_id": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "CPO ID of the CPO that owns this Tariff (following the ISO-15118 standard).",
            "example": "BEC"
          },
          "tariff_alt_text": {
            "type": "array",
            "description": "List of multi-language alternative tariff info texts.",
            "items": {
              "$ref": "#/components/schemas/DisplayText"
            }
          },
          "tariff_alt_url": {
            "type": "string",
            "description": "URL to a web page that contains an explanation of the tariff information in human readable form.",
            "example": "https://www.example.com/tariff"
          },
          "min_price": {
            "$ref": "#/components/schemas/Price"
          },
          "max_price": {
            "$ref": "#/components/schemas/Price"
          },
          "start_date_time": {
            "type": "string",
            "description": "The time when this tariff becomes active, in UTC, time_zone field of the Location can be used to convert to local time. Typically used for a new tariff that is already given with the location, before it becomes active.",
            "format": "date-time",
            "example": "2021-03-19T14:11:43Z"
          },
          "end_date_time": {
            "type": "string",
            "description": "The time after which this tariff is no longer valid, in UTC, time_zone field if the Location can be used to convert to local time. Typically used when this tariff is going to be replaced with a different tariff in the near future.",
            "format": "date-time",
            "example": "2021-03-19T14:11:43Z"
          },
          "energy_mix": {
            "$ref": "#/components/schemas/EnergyMix"
          },
          "last_updated": {
            "type": "string",
            "description": "Timestamp when this Tariff was last updated (or created).",
            "format": "date-time",
            "example": "2021-03-19T14:11:43Z"
          }
        },
        "description": "A Tariff object consists of a list of one or more Tariff Elements, which can be used to create complex Tariff structures."
      },
      "TariffElement": {
        "required": [
          "price_components"
        ],
        "type": "object",
        "properties": {
          "restrictions": {
            "$ref": "#/components/schemas/TariffRestrictions"
          },
          "price_components": {
            "type": "array",
            "description": "List of price components that describe the pricing of a tariff.",
            "items": {
              "$ref": "#/components/schemas/PriceComponent"
            }
          }
        },
        "description": "List of Tariff Elements."
      },
      "TariffRestrictions": {
        "type": "object",
        "properties": {
          "reservation": {
            "type": "string",
            "description": "When this field is present, the TariffElement describes reservation costs. A reservation starts when the reservation is made, and ends when the driver starts charging on the reserved EVSE/Location, or when the reservation expires. A reservation can only have: FLAT and TIME TariffDimensions, where TIME is for the duration of the reservation.",
            "enum": [
              "RESERVATION",
              "RESERVATION_EXPIRES"
            ]
          },
          "start_time": {
            "maxLength": 5,
            "minLength": 0,
            "type": "string",
            "description": "Start time of day in local time, the time zone is defined in the time_zone field of the Location, for example 13:30, valid from this time of the day. Must be in 24h format with leading zeros.Hour/Minute separator: \":\" Regex: ([0-1][0-9]|2[0-3]):[0-5][0-9]",
            "example": "13:30"
          },
          "end_time": {
            "maxLength": 5,
            "minLength": 0,
            "type": "string",
            "description": "End time of day in local time, the time zone is defined in the time_zone field of the Location, for example 19:45, valid until this time of the day. Same syntax as start_time. If end_time < start_time then the period wraps around to the next day. To stop at end of the day use: 00:00."
          },
          "start_date": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Start date in local time, the time zone is defined in the time_zone field of the Location, for example: 2015-12-24, valid from this day (inclusive).Regex: ([12][0-9]{3})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])",
            "example": "2023-12-24"
          },
          "end_date": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "End date in local time, the time zone is defined in the time_zone field of theLocation, for example: 2015-12-27, valid until this day (exclusive).Same syntax as start_date.",
            "example": "2023-12-27"
          },
          "min_kwh": {
            "type": "number",
            "description": "Minimum consumed energy in kWh, for example 20, valid from this amount of energy (inclusive) being used.",
            "example": 1
          },
          "max_kwh": {
            "type": "number",
            "description": "Maximum consumed energy in kWh, for example 50, valid until this amount of energy (exclusive) being used.",
            "example": 1
          },
          "min_current": {
            "type": "number",
            "description": "Sum of the minimum current (in Amperes) over all phases, for example 5. When the EV is charging with more than, or equal to, the defined amount of current, this TariffElement is/becomes active. If the charging current is or becomes lower, this TariffElement is not or no longer valid and becomes inactive. This describes NOT the minimum current over the entire Charging Session. This restriction can make a TariffElement become active when the charging current is above the defined value, but the TariffElement MUST no longer be active when the charging current drops below the defined value."
          },
          "max_current": {
            "type": "number",
            "description": "Sum of the maximum current (in Amperes) over all phases, for example 20. When the EV is charging with less than the defined amount of current, this TariffElement becomes/is active. If the charging current is or becomes higher, this TariffElement is not or no longer valid and becomes inactive. This describes NOT the maximum current over the entire Charging Session. This restriction can make a TariffElement become active when the charging current is below this value, but the TariffElement MUST no longer be active when the charging current raises above the defined value."
          },
          "min_power": {
            "type": "number",
            "description": "Minimum power in kW, for example 5. When the EV is charging with more than, or equal to, the defined amount of power, this TariffElement is/becomes active. If the charging power is or becomes lower, this TariffElement is not or no longer valid and becomes inactive. This describes NOT the minimum power over the entire Charging Session. This restriction can make a TariffElement become active when the charging power is above this value, but the TariffElement MUST no longer be active when the charging power drops below the defined value."
          },
          "max_power": {
            "type": "number",
            "description": "Maximum power in kW, for example 20. When the EV is charging with less than the defined amount of power, this TariffElement becomes/is active. If the charging power is or becomes higher, this TariffElement is not or no longer valid and becomes inactive. This describes NOT the maximum power over the entire Charging Session. This restriction can make a TariffElement become active when the charging power is below this value, but the TariffElement MUST no longer be active when the charging power raises above the defined value.",
            "example": 32
          },
          "min_duration": {
            "type": "integer",
            "description": "Minimum duration in seconds the Charging Session MUST last (inclusive). When the duration of a Charging Session is longer than the defined value, this TariffElement is or becomes active. Before that moment, this TariffElement is not yet active.",
            "format": "int32"
          },
          "max_duration": {
            "type": "integer",
            "description": "Maximum duration in seconds the Charging Session MUST last (exclusive). When the duration of a Charging Session is shorter than the defined value, this TariffElement is or becomes active. After that moment, this TariffElement is no longer active.",
            "format": "int32"
          },
          "day_of_week": {
            "type": "array",
            "description": "Which day(s) of the week this TariffElement is active.",
            "items": {
              "type": "string",
              "description": "Which day(s) of the week this TariffElement is active.",
              "enum": [
                "MONDAY",
                "TUESDAY",
                "WEDNESDAY",
                "THURSDAY",
                "FRIDAY",
                "SATURDAY",
                "SUNDAY"
              ]
            }
          }
        },
        "description": "These restrictions are not for the entire Charging Session. They only describe if and when a TariffElement becomes active or inactive during a Charging Session."
      },
      "CdrCreateRequest": {
        "required": [
          "auth_method",
          "cdr_location",
          "cdr_token",
          "charging_periods",
          "country_code",
          "currency",
          "end_date_time",
          "id",
          "last_updated",
          "party_id",
          "start_date_time",
          "total_cost",
          "total_energy",
          "total_time"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "Currency of the CDR in ISO 4217 Code.",
            "example": "EUR"
          },
          "tariffs": {
            "type": "array",
            "description": "List of relevant Tariff Elements, see: Tariff. When relevant, a Free of Charge tariff should also be in this list, and point to a defined Free of Charge Tariff.",
            "items": {
              "$ref": "#/components/schemas/Tariff"
            }
          },
          "remark": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Optional remark, can be used to provide additional human readable information to the CDR, for example: reason why a transaction was stopped.",
            "example": "The cost of the electricity required to charge an EV is less than the cost to use petrol for a similar sized vehicle driving the same distance1. The cost will be lower if you charge your EV from your solar PV system or at free charging stations."
          },
          "credit": {
            "type": "boolean",
            "description": "When set to true, this is a Credit CDR, and the field credit_reference_id needs to be set as well."
          },
          "country_code": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "ISO-3166 alpha-2 country code of the CPO that 'owns' this CDR.",
            "example": "DE"
          },
          "party_id": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "CPO ID of the CPO that 'owns' this CDR (following the ISO-15118 standard).",
            "example": "BEC"
          },
          "id": {
            "maxLength": 39,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the CDR within the CPO’s platform (and suboperator platforms). This field is longer than the usual 36 characters to allow for credit CDRs to have something appended to the original ID. Normal (non-credit) CDRs SHALL only have an ID with a maximum length of 36.",
            "example": "12345"
          },
          "start_date_time": {
            "type": "string",
            "description": "Start timestamp of the charging session, or in-case of a reservation (before the start of a session) the start of the reservation.",
            "format": "date-time"
          },
          "end_date_time": {
            "type": "string",
            "description": "The timestamp when the session was completed/finished, charging might have finished before the session ends, for example: EV is full, but parking cost also has to be paid.",
            "format": "date-time"
          },
          "session_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Unique ID of the Session for which this CDR is sent. Is only allowed to be omitted when the CPO has not implemented the Sessions module or this CDR is the result of a reservation that never became a charging session, thus no OCPI Session.",
            "example": "59bff33b-595f-407a-ad42-6ea665ef2d74"
          },
          "cdr_token": {
            "$ref": "#/components/schemas/CdrToken"
          },
          "auth_method": {
            "type": "string",
            "description": "Method used for authentication.",
            "example": "WHITELIST",
            "enum": [
              "AUTH_REQUEST",
              "COMMAND",
              "WHITELIST"
            ]
          },
          "authorization_reference": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Reference to the authorization given by the eMSP. When the eMSP provided an authorization_reference in either: real-time authorization or StartSession, this field SHALL contain the same value. When different authorization_reference values have been given by the eMSP that are relevant to this Session, the last given value SHALL be used here.",
            "example": "40dbc1a6-3324-4424-a798-3a6e70e83bba"
          },
          "cdr_location": {
            "$ref": "#/components/schemas/CdrLocation"
          },
          "meter_id": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Identification of the Meter inside the Charge Point.",
            "example": "demo meter id"
          },
          "charging_periods": {
            "type": "array",
            "description": "List of Charging Periods that make up this charging session. A session consists of 1 or more periods, where each period has a different relevant Tariff.",
            "items": {
              "$ref": "#/components/schemas/ChargingPeriod"
            }
          },
          "signed_data": {
            "$ref": "#/components/schemas/SignedData"
          },
          "total_cost": {
            "$ref": "#/components/schemas/Price"
          },
          "total_fixed_cost": {
            "$ref": "#/components/schemas/Price"
          },
          "total_energy": {
            "type": "number",
            "description": "Total energy charged, in kWh."
          },
          "total_energy_cost": {
            "$ref": "#/components/schemas/Price"
          },
          "total_time": {
            "type": "number",
            "description": "Total duration of the charging session (including the duration of charging and not charging), in hours."
          },
          "total_time_cost": {
            "$ref": "#/components/schemas/Price"
          },
          "total_parking_time": {
            "type": "number",
            "description": "Total duration of the charging session where the EV was not charging (no energy was transferred between EVSE and EV), in hours."
          },
          "total_parking_cost": {
            "$ref": "#/components/schemas/Price"
          },
          "total_reservation_cost": {
            "$ref": "#/components/schemas/Price"
          },
          "invoice_reference_id": {
            "maxLength": 39,
            "minLength": 0,
            "type": "string",
            "description": "This field can be used to reference an invoice, that will later be send for this CDR. Making it easier to link a CDR to a given invoice. Maybe even group CDRs that will be on the same invoice."
          },
          "credit_reference_id": {
            "maxLength": 39,
            "minLength": 0,
            "type": "string",
            "description": "Is required to be set for a Credit CDR. This SHALL contain the id of the CDR for which this is a Credit CDR.",
            "example": "11ctt8q0y5tq0li8671wz3a5p8oe436bcmefr55"
          },
          "home_charging_compensation": {
            "type": "boolean",
            "description": "When set to true, this CDR is for a charging session using the home charger of the EV Driver for which the energy cost needs to be financially compensated to the EV Driver."
          },
          "last_updated": {
            "type": "string",
            "description": "Timestamp when this CDR was last updated (or created).",
            "format": "date-time"
          }
        }
      },
      "CdrFilterExportRequest": {
        "required": [
          "date_from",
          "date_to"
        ],
        "type": "object",
        "properties": {
          "country_code": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "ISO-3166 alpha-2 country code of the CPO that 'owns' this CDR.",
            "example": "DE"
          },
          "party_id": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "CPO ID of the CPO that 'owns' this CDR (following the ISO-15118 standard).",
            "example": "BEC"
          },
          "date_from": {
            "type": "string",
            "description": "Start timestamp of the charging session, or in-case of a reservation (before the start of a session) the start of the reservation.",
            "format": "date-time"
          },
          "date_to": {
            "type": "string",
            "description": "The timestamp when the session was completed/finished, charging might have finished before the session ends, for example: EV is full, but parking cost also has to be paid.",
            "format": "date-time"
          },
          "token_country_code": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "Country code of the MSP that 'owns' this Token.",
            "example": "DE"
          },
          "token_party_id": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "ID of the eMSP that 'owns' this Token.",
            "example": "BEC"
          },
          "token_uid": {
            "maxItems": 36,
            "minItems": 0,
            "type": "array",
            "items": {
              "maxLength": 36,
              "minLength": 0,
              "type": "string"
            }
          },
          "location_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the location within the CPO’s platform (and suboperator platforms). This field can never be changed, modified or renamed.",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "location_evse_ids": {
            "type": "array",
            "description": "Compliant with the following specification for EVSE ID from eMI3 standard version V1.0 (http://emi3group.com/documents-links/) Part 2: business objects.",
            "example": [
              "DE*ERG*E10001*1"
            ],
            "items": {
              "type": "string",
              "description": "Compliant with the following specification for EVSE ID from eMI3 standard version V1.0 (http://emi3group.com/documents-links/) Part 2: business objects.",
              "example": "[\"DE*ERG*E10001*1\"]"
            }
          }
        }
      },
      "GeneratePdfWrapper": {
        "required": [
          "cdrFilterExportRequest",
          "pdfFileData"
        ],
        "type": "object",
        "properties": {
          "pdfFileData": {
            "$ref": "#/components/schemas/PdfFileData"
          },
          "cdrFilterExportRequest": {
            "$ref": "#/components/schemas/CdrFilterExportRequest"
          }
        }
      },
      "PdfFileData": {
        "required": [
          "address",
          "city",
          "freeText",
          "imprint",
          "name",
          "zip"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Full name of the recipient",
            "example": "John Doe"
          },
          "address": {
            "type": "string",
            "description": "Recipient address",
            "example": "Heilbronnerstr. 86"
          },
          "zip": {
            "type": "string",
            "description": "Recipient zip code",
            "example": "70191"
          },
          "city": {
            "type": "string",
            "description": "Recipient city",
            "example": "Stuttgart"
          },
          "imprint": {
            "type": "string",
            "description": "Footer info for the report",
            "example": "P3 group GmbH - Heilbronner Str. 86 70191 Stuttgart, Germany\nTel: +49 711 252 749-0, e-mail: mail@p3-group.com"
          },
          "freeText": {
            "type": "string",
            "description": "Header free text",
            "example": "Karten ID: 2363, RFID: 111111"
          }
        }
      },
      "CdrFilterRequest": {
        "type": "object",
        "properties": {
          "cdrIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "country_code": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "ISO-3166 alpha-2 country code of the CPO that 'owns' this CDR.",
            "example": "DE"
          },
          "party_id": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "CPO ID of the CPO that 'owns' this CDR (following the ISO-15118 standard).",
            "example": "BEC"
          },
          "date_from": {
            "type": "string",
            "description": "Start timestamp of the charging session, or in-case of a reservation (before the start of a session) the start of the reservation.",
            "format": "date-time"
          },
          "date_to": {
            "type": "string",
            "description": "The timestamp when the session was completed/finished, charging might have finished before the session ends, for example: EV is full, but parking cost also has to be paid.",
            "format": "date-time"
          },
          "token_country_code": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "Country code of the MSP that 'owns' this Token.",
            "example": "DE"
          },
          "token_party_id": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "ID of the eMSP that 'owns' this Token.",
            "example": "BEC"
          },
          "token_uid": {
            "maxItems": 36,
            "minItems": 0,
            "type": "array",
            "items": {
              "maxLength": 36,
              "minLength": 0,
              "type": "string"
            }
          },
          "location_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the location within the CPO’s platform (and suboperator platforms). This field can never be changed, modified or renamed.",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "location_evse_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "authorization_reference": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Reference to the authorization given by the eMSP, when given, this reference will be provided in the relevant Session and/or CDR.",
            "example": "40dbc1a6-3324-4424-a798-3a6e70e83bba"
          }
        }
      },
      "GeneratePdfWrapperExtended": {
        "required": [
          "cdrFilterExportRequest",
          "cdrIds",
          "pdfFileData"
        ],
        "type": "object",
        "properties": {
          "pdfFileData": {
            "$ref": "#/components/schemas/PdfFileData"
          },
          "cdrFilterExportRequest": {
            "$ref": "#/components/schemas/CdrFilterExportRequest"
          },
          "cdrIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GenerateCsvWrapperExtended": {
        "required": [
          "cdrFilterRequest",
          "cdrIds"
        ],
        "type": "object",
        "properties": {
          "cdrFilterRequest": {
            "$ref": "#/components/schemas/CdrFilterRequest"
          },
          "cdrIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PatchChargingSessionReq": {
        "required": [
          "last_updated"
        ],
        "type": "object",
        "properties": {
          "start_date_time": {
            "type": "string",
            "description": "The timestamp when the session became ACTIVE in the Charge Point.Point.\nWhen the session is still PENDING, this field SHALL be set to the\ntime the session was created at the Charge Point. When a session\ngoes from PENDING to ACTIVE, this field SHALL be updated to the\nmoment the session went to ACTIVE in the Charge Point.",
            "format": "date-time"
          },
          "end_date_time": {
            "type": "string",
            "description": "The timestamp when the session was completed/finished.",
            "format": "date-time"
          },
          "kwh": {
            "type": "number",
            "description": "How many kWh were charged.",
            "example": 0.93
          },
          "cdr_token": {
            "$ref": "#/components/schemas/CdrToken"
          },
          "auth_method": {
            "type": "string",
            "description": "Method used for authentication.",
            "example": "AUTH_REQUEST",
            "enum": [
              "AUTH_REQUEST",
              "COMMAND",
              "WHITELIST"
            ]
          },
          "authorization_reference": {
            "type": "string",
            "description": "Reference to the authorization given by the eMSP."
          },
          "location_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Location.id of the Location object of this CPO, on which the charging session is/was happening"
          },
          "evse_uid": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "EVSE.uid of the EVSE of this Location on which the charging session is/was happening. Allowed to be set to: #NA when this session is created for a reservation, but no EVSE yet assigned to the driver."
          },
          "connector_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Connector.id of the Connector of this Location where the charging session is/was happening. Allowed to be set to: #NA when this session is created for a reservation, but no connector yet assigned to the driver."
          },
          "meter_id": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Optional identification of the kWh meter."
          },
          "currency": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "Code of the currency used for this session."
          },
          "charging_periods": {
            "type": "array",
            "description": "An optional list of Charging Periods that can be used to calculate and verify the total cost.",
            "items": {
              "$ref": "#/components/schemas/ChargingPeriod"
            }
          },
          "total_cost": {
            "$ref": "#/components/schemas/Price"
          },
          "status": {
            "type": "string",
            "description": "The status of the session.",
            "enum": [
              "ACTIVE",
              "COMPLETED",
              "INVALID",
              "PENDING",
              "RESERVATION"
            ]
          },
          "last_updated": {
            "type": "string",
            "description": "Timestamp when this session was last updated (or created).",
            "format": "date-time"
          }
        }
      },
      "Pageable": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "examples": {
      "SESSION_ID_ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"[TRANSACTION] A session with the same ID already exists.\",\n  \"errorCode\" : \"SESSION_ID_ALREADY_EXISTS\"\n}"
      },
      "SESSION_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[TRANSACTION] Session is not found.\",\n  \"errorCode\" : \"SESSION_NOT_FOUND\"\n}"
      },
      "SESSION_NOT_FOUND_WITH_SPECIFIED_STATUS": {
        "value": "{\n  \"message\" : \"[TRANSACTION] Session with the specified status(es) not found.\",\n  \"errorCode\" : \"SESSION_NOT_FOUND_WITH_SPECIFIED_STATUS\"\n}"
      },
      "CDR_ID_ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"[TRANSACTION] A CDR with the same ID already exists.\",\n  \"errorCode\" : \"CDR_ID_ALREADY_EXISTS\"\n}"
      },
      "CDR_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[TRANSACTION] A CDR with the specified ID is not found.\",\n  \"errorCode\" : \"CDR_NOT_FOUND\"\n}"
      },
      "PARTY_IDS_DO_NOT_MATCH": {
        "value": "{\n  \"message\" : \"[TRANSACTION] Inconsistent Party IDs are provided.\",\n  \"errorCode\" : \"PARTY_IDS_DO_NOT_MATCH\"\n}"
      },
      "COUNTRY_CODES_DO_NOT_MATCH": {
        "value": "{\n  \"message\" : \"[TRANSACTION] Inconsistent Country Codes are provided.\",\n  \"errorCode\" : \"COUNTRY_CODES_DO_NOT_MATCH\"\n}"
      },
      "SESSION_IDS_DO_NOT_MATCH": {
        "value": "{\n  \"message\" : \"[TRANSACTION] Inconsistent Session IDs are provided.\",\n  \"errorCode\" : \"SESSION_IDS_DO_NOT_MATCH\"\n}"
      },
      "AUTHORIZATION_REFERENCES_DO_NOT_MATCH": {
        "value": "{\n  \"message\" : \"[TRANSACTION] Inconsistent Authorization References are provided.\",\n  \"errorCode\" : \"AUTHORIZATION_REFERENCES_DO_NOT_MATCH\"\n}"
      },
      "CDR_LOCATION_ID_EXISTS": {
        "value": "{\n  \"message\" : \"[TRANSACTION] A CDR Location with the same id already exists.\",\n  \"errorCode\" : \"CDR_LOCATION_ID_EXISTS\"\n}"
      },
      "UNSORTABLE_COLUMN": {
        "value": "{\n  \"message\" : \"The entered sorting column is not sortable in ElasticSearch (Column is not a @Keyword).\",\n  \"errorCode\" : \"UNSORTABLE_COLUMN\"\n}"
      },
      "REST_STATUS_ELASTICSEARCH_RELATED": {
        "value": "{\n  \"message\" : \"RestStatusException related to ElasticSearch\",\n  \"errorCode\" : \"REST_STATUS_ELASTICSEARCH_RELATED\"\n}"
      },
      "FILE_NOT_IMAGE": {
        "value": "{\n  \"message\" : \"[EXPORT] The file isn't image.\",\n  \"errorCode\" : \"FILE_NOT_IMAGE\"\n}"
      },
      "IMAGE_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[EXPORT] The image was not found.\",\n  \"errorCode\" : \"IMAGE_NOT_FOUND\"\n}"
      },
      "IMAGE_FORMAT_NOT_SUPPORTED": {
        "value": "{\n  \"message\" : \"[EXPORT] The image format not supported.\",\n  \"errorCode\" : \"IMAGE_FORMAT_NOT_SUPPORTED\"\n}"
      },
      "IMAGE_EXTENSION_MISSING": {
        "value": "{\n  \"message\" : \"[EXPORT] The image extension missing.\",\n  \"errorCode\" : \"IMAGE_EXTENSION_MISSING\"\n}"
      },
      "IMAGE_FILE_NAME_MISSING": {
        "value": "{\n  \"message\" : \"[EXPORT] The image file name is missing.\",\n  \"errorCode\" : \"IMAGE_FILE_NAME_MISSING\"\n}"
      },
      "IMAGE_FILE_NAME_LENGTH": {
        "value": "{\n  \"message\" : \"[EXPORT] The image file name length is not valid.\",\n  \"errorCode\" : \"IMAGE_FILE_NAME_LENGTH\"\n}"
      },
      "HTML_CONTAINS_UNACCEPTED_TAGS": {
        "value": "{\n  \"message\" : \"[EXPORT] Provided HTML tags are not accepted.\",\n  \"errorCode\" : \"HTML_CONTAINS_UNACCEPTED_TAGS\"\n}"
      },
      "TEMPLATE_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[EXPORT] The template was not found.\",\n  \"errorCode\" : \"TEMPLATE_NOT_FOUND\"\n}"
      },
      "CATEGORY_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[EXPORT] The template category was not found.\",\n  \"errorCode\" : \"CATEGORY_NOT_FOUND\"\n}"
      },
      "TEMPLATE_IS_DEFAULT": {
        "value": "{\n  \"message\" : \"[EXPORT] The template is set as Default.\",\n  \"errorCode\" : \"TEMPLATE_IS_DEFAULT\"\n}"
      },
      "TEMPLATE_TABLE_TAG": {
        "value": "{\n  \"message\" : \"[EXPORT] The template has more than one table tag.\",\n  \"errorCode\" : \"TEMPLATE_TABLE_TAG\"\n}"
      },
      "TEMPLATE_IMAGE_TAG": {
        "value": "{\n  \"message\" : \"[EXPORT] The template has more than one image tag.\",\n  \"errorCode\" : \"TEMPLATE_IMAGE_TAG\"\n}"
      },
      "INTEGRATION_FAILED": {
        "value": "{\n  \"message\" : \"[EXPORT] Payload integration with template failed.\",\n  \"errorCode\" : \"INTEGRATION_FAILED\"\n}"
      },
      "CSV_EXPORT_FAILED": {
        "value": "{\n  \"message\" : \"[EXPORT] The export of the CSV file failed.\",\n  \"errorCode\" : \"CSV_EXPORT_FAILED\"\n}"
      },
      "TEMPLATE_PARSE_ERROR": {
        "value": "{\n  \"message\" : \"[EXPORT] The parsing of the template failed.\",\n  \"errorCode\" : \"TEMPLATE_PARSE_ERROR\"\n}"
      },
      "PDF_EXPORT_FAILED": {
        "value": "{\n  \"message\" : \"[EXPORT] The export of the PDF file failed.\",\n  \"errorCode\" : \"PDF_EXPORT_FAILED\"\n}"
      },
      "PROCESSING_ERROR": {
        "value": "{\n  \"message\" : \"Error while processing the data\",\n  \"errorCode\" : \"PROCESSING_ERROR\"\n}"
      },
      "ACCESS_DENIED": {
        "value": "{\n  \"message\" : \"Access to route has been denied.\",\n  \"errorCode\" : \"ACCESS_DENIED\"\n}"
      },
      "INTERNAL_SERVER_ERROR": {
        "value": "{\n  \"message\" : \"An error occurred\",\n  \"errorCode\" : \"INTERNAL_SERVER_ERROR\"\n}"
      },
      "BAD_REQUEST": {
        "value": "{\n  \"message\" : \"Bad request\",\n  \"errorCode\" : \"BAD_REQUEST\"\n}"
      },
      "NOT_FOUND": {
        "value": "{\n  \"message\" : \"Requested object not found\",\n  \"errorCode\" : \"NOT_FOUND\"\n}"
      },
      "UNAUTHORIZED": {
        "value": "{\n  \"message\" : \"Unauthorized\",\n  \"errorCode\" : \"UNAUTHORIZED\"\n}"
      },
      "FORBIDDEN": {
        "value": "{\n  \"message\" : \"Forbidden\",\n  \"errorCode\" : \"FORBIDDEN\"\n}"
      },
      "UNAUTHENTICATED": {
        "value": "{\n  \"message\" : \"Unauthenticated\",\n  \"errorCode\" : \"UNAUTHENTICATED\"\n}"
      },
      "METHOD_ARGUMENT_TYPE_MISMATCH": {
        "value": "{\n  \"message\" : \"Failed to convert value to required type\",\n  \"errorCode\" : \"METHOD_ARGUMENT_TYPE_MISMATCH\"\n}"
      },
      "MAXIMUM_UPLOAD_SIZE_EXCEEDED": {
        "value": "{\n  \"message\" : \"Maximum upload size exceeded\",\n  \"errorCode\" : \"MAXIMUM_UPLOAD_SIZE_EXCEEDED\"\n}"
      },
      "METHOD_NOT_ALLOWED": {
        "value": "{\n  \"message\" : \"Request method is not supported\",\n  \"errorCode\" : \"METHOD_NOT_ALLOWED\"\n}"
      },
      "MISSING_REQUEST_PARAMETER": {
        "value": "{\n  \"message\" : \"Required request parameter is not present\",\n  \"errorCode\" : \"MISSING_REQUEST_PARAMETER\"\n}"
      },
      "MISSING_REQUEST_PART": {
        "value": "{\n  \"message\" : \"Required request part is not present\",\n  \"errorCode\" : \"MISSING_REQUEST_PART\"\n}"
      },
      "UNSUPPORTED_MEDIA_TYPE": {
        "value": "{\n  \"message\" : \"Media type is not supported\",\n  \"errorCode\" : \"UNSUPPORTED_MEDIA_TYPE\"\n}"
      },
      "LIST_CONTAINS_NULL_VALUES": {
        "value": "{\n  \"message\" : \"List contains null values\",\n  \"errorCode\" : \"LIST_CONTAINS_NULL_VALUES\"\n}"
      },
      "REMOTE_CALL_FAILED": {
        "value": "{\n  \"message\" : \"Call to remote API returned an error response\",\n  \"errorCode\" : \"REMOTE_CALL_FAILED\"\n}"
      },
      "ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"Object already exists\",\n  \"errorCode\" : \"ALREADY_EXISTS\"\n}"
      },
      "SOFTLY_DELETED": {
        "value": "{\n  \"message\" : \"Object is softly deleted\",\n  \"errorCode\" : \"SOFTLY_DELETED\"\n}"
      },
      "WRONG_SORTING_COLUMN": {
        "value": "{\n  \"message\" : \"The entered sorting column name does not exist.\",\n  \"errorCode\" : \"WRONG_SORTING_COLUMN\"\n}"
      },
      "COULD_NOT_EXTRACT_ERROR_FROM_RESPONSE": {
        "value": "{\n  \"message\" : \"Could not extract error from the response.\",\n  \"errorCode\" : \"COULD_NOT_EXTRACT_ERROR_FROM_RESPONSE\"\n}"
      },
      "FAILED_TO_DELETE_TEMPORARY_FILE": {
        "value": "{\n  \"message\" : \"Failed to delete temporary file\",\n  \"errorCode\" : \"FAILED_TO_DELETE_TEMPORARY_FILE\"\n}"
      },
      "TENANT_ID_MUST_BE_SINGLETON": {
        "value": "{\n  \"message\" : \"Tenant ID must be a single value parameter\",\n  \"errorCode\" : \"TENANT_ID_MUST_BE_SINGLETON\"\n}"
      },
      "TENANT_ID_MUST_BE_INTEGER": {
        "value": "{\n  \"message\" : \"Tenant ID must be integer\",\n  \"errorCode\" : \"TENANT_ID_MUST_BE_INTEGER\"\n}"
      },
      "INVALID_PROPERTY": {
        "value": "{\n  \"message\" : \"Requested property is not valid.\",\n  \"errorCode\" : \"INVALID_PROPERTY\"\n}"
      },
      "FILE_IS_NOT_IMAGE": {
        "value": "{\n  \"message\" : \"The file isn't image.\",\n  \"errorCode\" : \"FILE_IS_NOT_IMAGE\"\n}"
      },
      "LOGO_NOT_FOUND": {
        "value": "{\n  \"message\" : \"The logo not found\",\n  \"errorCode\" : \"LOGO_NOT_FOUND\"\n}"
      },
      "FORMAT_NOT_SUPPORTED": {
        "value": "{\n  \"message\" : \"The logo format not supported\",\n  \"errorCode\" : \"FORMAT_NOT_SUPPORTED\"\n}"
      },
      "EXTENSION_MISSING": {
        "value": "{\n  \"message\" : \"The logo extension missing\",\n  \"errorCode\" : \"EXTENSION_MISSING\"\n}"
      },
      "FILE_NAME_MISSING": {
        "value": "{\n  \"message\" : \"The logo file name is missing\",\n  \"errorCode\" : \"FILE_NAME_MISSING\"\n}"
      },
      "RABBITMQ_LISTENER_ERROR": {
        "value": "{\n  \"message\" : \"[RABBITMQ] An error occurred in RabbitMQ listener\",\n  \"errorCode\" : \"RABBITMQ_LISTENER_ERROR\"\n}"
      },
      "INVALID_RABBITMQ_RPC_RESPONSE": {
        "value": "{\n  \"message\" : \"[RABBITMQ] Invalid RabbitMQ RPC response\",\n  \"errorCode\" : \"INVALID_RABBITMQ_RPC_RESPONSE\"\n}"
      },
      "USER_NOT_FOUND": {
        "value": "{\n  \"message\" : \"The entered user does not exist.\",\n  \"errorCode\" : \"USER_NOT_FOUND\"\n}"
      },
      "USER_ALREADY_HAS_ACCESS": {
        "value": "{\n  \"message\" : \"The user already has access\",\n  \"errorCode\" : \"USER_ALREADY_HAS_ACCESS\"\n}"
      },
      "USER_ACCESS_REQUEST_NOT_FOUND": {
        "value": "{\n  \"message\" : \"The entered user access request does not exist.\",\n  \"errorCode\" : \"USER_ACCESS_REQUEST_NOT_FOUND\"\n}"
      },
      "VERSION_FOR_TOKEN_A_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[OCPI-GATEWAY] Version for the specific token A is not found.\",\n  \"errorCode\" : \"VERSION_FOR_TOKEN_A_NOT_FOUND\"\n}"
      },
      "URL_ALREADY_IN_DATABASE": {
        "value": "{\n  \"message\" : \"[OCPI-GATEWAY] The provided URL already exists.\",\n  \"errorCode\" : \"URL_ALREADY_IN_DATABASE\"\n}"
      },
      "URL_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[OCPI-GATEWAY] Customer url info for the specific url in not found.\",\n  \"errorCode\" : \"URL_NOT_FOUND\"\n}"
      },
      "URL_ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"[OCPI-GATEWAY] One of the provided URLs already exists.\",\n  \"errorCode\" : \"URL_ALREADY_EXISTS\"\n}"
      }
    },
    "headers": {
      "api-category": {
        "description": "MSP Services",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "display-name": {
        "description": "MSP Transaction",
        "required": false,
        "schema": {
          "type": "string"
        }
      }
    }
  }
}