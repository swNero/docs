{
  "openapi": "3.0.1",
  "info": {
    "title": "msp-web-service",
    "version": "v1"
  },
  "servers": [
    {
      "url": "https://p3-acc.energystacks.io/msp-web/v1",
      "description": "Generated server url"
    }
  ],
  "tags": [
    {
      "name": "User's home stations",
      "description": "Support for retrieving user's home stations"
    },
    {
      "name": "Sessions",
      "description": "Support for retrieving details of ongoing charging sessions"
    },
    {
      "name": "CDRs",
      "description": "Support for retrieving details of Charge Detail Records (finished charging sessions)"
    },
    {
      "name": "Charging Stations",
      "description": "Support for retrieving information for charging stations, which are stored in memory"
    },
    {
      "name": "Charging",
      "description": "Support for starting and stopping charging sessions"
    }
  ],
  "paths": {
    "/vehicles/{vehicleUuid}": {
      "get": {
        "tags": [
          "Vehicles"
        ],
        "summary": "Get the details for the specified vehicle from the Vehicle DB",
        "operationId": "getVehicleDetails",
        "parameters": [
          {
            "name": "vehicleUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleDetailedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Wrong UUID format",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Incorrect tenant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "404": {
            "description": "Vehicle not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Vehicles"
        ],
        "summary": "Update an existing vehicle",
        "operationId": "updateVehicle",
        "parameters": [
          {
            "name": "vehicleUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VehicleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Incorrect tenant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "404": {
            "description": "Vehicle not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Vehicles"
        ],
        "summary": "Delete an existing vehicle",
        "operationId": "deleteVehicle",
        "parameters": [
          {
            "name": "vehicleUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageDto"
                }
              }
            }
          },
          "400": {
            "description": "Wrong UUID format",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Vehicle not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          }
        }
      }
    },
    "/vehicles/{vehicleUuid}/image": {
      "get": {
        "tags": [
          "Vehicles"
        ],
        "summary": "Get vehicle image",
        "operationId": "getVehicleImage",
        "parameters": [
          {
            "name": "vehicleUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/octet-stream": {}
            }
          },
          "400": {
            "description": "Wrong UUID format",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Image provider customer key is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "404": {
            "description": "Image for requested Vehicle not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "500": {
            "description": "Fetching the Image from the provider fails"
          }
        }
      },
      "put": {
        "tags": [
          "Vehicles"
        ],
        "summary": "Add/update the vehicle image",
        "operationId": "addOrUpdateVehicleImage",
        "parameters": [
          {
            "name": "vehicleUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "vehicleImage"
                ],
                "type": "object",
                "properties": {
                  "vehicleImage": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedDto"
                }
              }
            }
          },
          "404": {
            "description": "Vehicle not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "500": {
            "description": "Failed to store new image"
          }
        }
      },
      "delete": {
        "tags": [
          "Vehicles"
        ],
        "summary": "Delete vehicle image",
        "operationId": "deleteVehicleImage",
        "parameters": [
          {
            "name": "vehicleUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageDto"
                }
              }
            }
          },
          "400": {
            "description": "Wrong UUID format",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Vehicle not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "500": {
            "description": "Failed to delete existing image"
          }
        }
      }
    },
    "/vehicle-brands/{brandUuid}": {
      "get": {
        "tags": [
          "Vehicle Brand"
        ],
        "summary": "Get the details for the specified vehicle brand from the DB",
        "operationId": "getVehicleBrandDetails",
        "parameters": [
          {
            "name": "brandUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandResponse"
                }
              }
            }
          },
          "400": {
            "description": "Wrong UUID format",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Incorrect tenant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "404": {
            "description": "Vehicle brand not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Vehicle Brand"
        ],
        "summary": "Update an existing vehicle brand",
        "operationId": "updateVehicleBrand",
        "parameters": [
          {
            "name": "brandUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BrandRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Incorrect tenant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "404": {
            "description": "Vehicle brand not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Vehicle Brand"
        ],
        "summary": "Delete an existing vehicle brand",
        "operationId": "deleteVehicleBrand",
        "parameters": [
          {
            "name": "brandUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageDto"
                }
              }
            }
          },
          "400": {
            "description": "Wrong UUID format",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Vehicle brand not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          }
        }
      }
    },
    "/vehicle-brands/{brandUuid}/image": {
      "get": {
        "tags": [
          "Vehicle Brand"
        ],
        "summary": "Get vehicle brand image",
        "operationId": "getVehicleBrandImage",
        "parameters": [
          {
            "name": "brandUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/octet-stream": {}
            }
          },
          "400": {
            "description": "Wrong UUID format",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Failed to read image"
          }
        }
      },
      "put": {
        "tags": [
          "Vehicle Brand"
        ],
        "summary": "Add/update the vehicle brand image",
        "operationId": "addOrUpdateVehicleBrandImage",
        "parameters": [
          {
            "name": "brandUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "brandImage"
                ],
                "type": "object",
                "properties": {
                  "brandImage": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Vehicle brand not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "500": {
            "description": "Failed to store new image"
          }
        }
      },
      "delete": {
        "tags": [
          "Vehicle Brand"
        ],
        "summary": "Delete vehicle brand image",
        "operationId": "deleteVehicleBrandImage",
        "parameters": [
          {
            "name": "brandUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageDto"
                }
              }
            }
          },
          "404": {
            "description": "Vehicle brand not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "500": {
            "description": "Failed to delete existing image"
          }
        }
      }
    },
    "/location/images/{locationImageId}/{approvalState}": {
      "put": {
        "tags": [
          "Location Images"
        ],
        "summary": "Review location image",
        "description": "Performs a review of the location image submission of a user",
        "operationId": "reviewLocationImage",
        "parameters": [
          {
            "name": "locationImageId",
            "in": "path",
            "description": "The ID of the location image",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "approvalState",
            "in": "path",
            "description": "The approval state which should be set",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "SUBMITTED",
                "APPROVED",
                "REJECTED"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "401": {
            "description": "Invalid or missing Credentials"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "409": {
            "description": "Image already reviewed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Authentication": []
          }
        ]
      }
    },
    "/charging-curves/{chargingCurveUuid}": {
      "get": {
        "tags": [
          "Charging curves"
        ],
        "summary": "Get the details for the specified charging curve",
        "operationId": "getChargingCurveDetails",
        "parameters": [
          {
            "name": "chargingCurveUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleDetailedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Wrong UUID format",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Charging curve not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Charging curves"
        ],
        "summary": "Update an existing charging curve",
        "operationId": "updateChargingCurve",
        "parameters": [
          {
            "name": "chargingCurveUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChargingCurveShortRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageDto"
                }
              }
            }
          },
          "404": {
            "description": "Charging curve not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Charging curves"
        ],
        "summary": "Delete an existing charging curve",
        "operationId": "deleteChargingCurve",
        "parameters": [
          {
            "name": "chargingCurveUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageDto"
                }
              }
            }
          },
          "400": {
            "description": "Wrong UUID format",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Charging curve not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          }
        }
      }
    },
    "/vehicles": {
      "get": {
        "tags": [
          "Vehicles"
        ],
        "summary": "Get all vehicles from the Vehicle DB",
        "operationId": "getAllVehicles",
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VehicleResponse"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Vehicles"
        ],
        "summary": "Add a new vehicle to the DB",
        "operationId": "addNewVehicle",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VehicleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Vehicle and brand tenant ids don't match",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          }
        }
      }
    },
    "/vehicle-brands": {
      "get": {
        "tags": [
          "Vehicle Brand"
        ],
        "summary": "Get all vehicle brands from the DB",
        "operationId": "getAllVehicleBrands",
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BrandResponse"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Vehicle Brand"
        ],
        "summary": "Add new vehicle brand",
        "operationId": "addVehicleBrand",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BrandRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/user/settings": {
      "get": {
        "tags": [
          "User settings"
        ],
        "summary": "Get user's settings",
        "description": "Get user's settings",
        "operationId": "getSettings",
        "parameters": [
          {
            "name": "Authentication-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSettings"
                }
              }
            }
          },
          "401": {
            "description": "Invalid or missing Credentials"
          },
          "404": {
            "description": "User Settings not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "500": {
            "description": "Required header not present"
          },
          "400 ": {
            "description": "Authentication token parsing error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "User settings"
        ],
        "summary": "Save user's settings in the cloud",
        "description": "Save user's settings in the cloud",
        "operationId": "saveSettings",
        "parameters": [
          {
            "name": "Authentication-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Invalid or missing Credentials"
          },
          "409": {
            "description": "User Setting for the same User ID already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "500": {
            "description": "Required header not present"
          },
          "400 ": {
            "description": "Authentication token parsing error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "User settings"
        ],
        "summary": "Delete user's settings",
        "description": "Delete the user's settings",
        "operationId": "deleteSettings",
        "parameters": [
          {
            "name": "Authentication-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageDto"
                }
              }
            }
          },
          "401": {
            "description": "Invalid or missing Credentials"
          },
          "404": {
            "description": "User Settings not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "500": {
            "description": "Required header not present"
          },
          "400 ": {
            "description": "Authentication token parsing error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          }
        }
      }
    },
    "/user/favorites/chargingstations/{chargingStationId}": {
      "post": {
        "tags": [
          "Charging station favorites"
        ],
        "summary": "Add charging station favorite",
        "description": "Adds a charging station by ID to the favorite list of the user",
        "operationId": "saveFavouriteChargingStation",
        "parameters": [
          {
            "name": "chargingStationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authentication-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageDto"
                }
              }
            }
          },
          "401": {
            "description": "Invalid or missing Credentials"
          },
          "409": {
            "description": "User's charging station already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "500": {
            "description": "Required header not present"
          },
          "400 ": {
            "description": "Authentication token parsing error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Charging station favorites"
        ],
        "summary": "Remove charging station favorite",
        "description": "Removes the charging stations by ID from the favorite list of the user",
        "operationId": "deleteFavouriteChargingStation",
        "parameters": [
          {
            "name": "chargingStationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authentication-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageDto"
                }
              }
            }
          },
          "401": {
            "description": "Invalid or missing Credentials"
          },
          "404": {
            "description": "User's charging station was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "500": {
            "description": "Required header not present"
          },
          "400 ": {
            "description": "Authentication token parsing error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          }
        }
      }
    },
    "/user/favorites/address": {
      "get": {
        "tags": [
          "Address favorites"
        ],
        "summary": "Get favourite addresses",
        "description": "Returns the list of of the favorite addresses of the user",
        "operationId": "getFavouriteAddresses",
        "parameters": [
          {
            "name": "Authentication-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FavoriteAddresses"
                }
              }
            }
          },
          "401": {
            "description": "Invalid or missing Credentials"
          },
          "404": {
            "description": "Favourite addresses were not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "500": {
            "description": "Required header not present"
          },
          "400 ": {
            "description": "Authentication token parsing error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Address favorites"
        ],
        "summary": "Add favorite address",
        "description": "Adds an address to the favorite list of the user",
        "operationId": "saveFavouriteAddress",
        "parameters": [
          {
            "name": "Authentication-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveAddressRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Invalid or missing Credentials"
          },
          "409": {
            "description": "Favorite address for the same user already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "500": {
            "description": "Required header not present"
          },
          "400 ": {
            "description": "Authentication token parsing error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          }
        }
      }
    },
    "/location/review": {
      "post": {
        "tags": [
          "Location Review"
        ],
        "summary": "Submits a review of the location for a user",
        "description": "Submits a review of the location for a user",
        "operationId": "submitReview",
        "parameters": [
          {
            "name": "location_id",
            "in": "query",
            "description": "The id of the location",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationReviewSubmitRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Invalid or missing Credentials"
          },
          "404": {
            "description": "Location not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Authentication": []
          }
        ]
      }
    },
    "/location/images/{locationId}/{imageCategory}": {
      "post": {
        "tags": [
          "Location Images"
        ],
        "summary": "Submit an image for the location",
        "description": "Submits an image for the specified charging station location and image category",
        "operationId": "submitLocationImage",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "description": "The id of the location",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "imageCategory",
            "in": "path",
            "description": "Category of the image",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "CHARGER",
                "ENTRANCE",
                "LOCATION",
                "NETWORK",
                "OPERATOR",
                "OTHER",
                "OWNER"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "Image of the location",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageDto"
                }
              }
            }
          },
          "400": {
            "description": "The request was not valid",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Invalid or missing Credentials"
          },
          "404": {
            "description": "Location not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "409": {
            "description": "The image was already uploaded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "500": {
            "description": "The image can not be processed"
          }
        },
        "security": [
          {
            "Bearer Authentication": []
          }
        ]
      }
    },
    "/commands/{commandUuid}": {
      "post": {
        "tags": [
          "Commands"
        ],
        "summary": "Add a new command result",
        "description": "Add a new command result",
        "operationId": "addCommandResult",
        "parameters": [
          {
            "name": "commandUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommandResult"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommandResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Command with the specified UUID doesn't exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          }
        }
      }
    },
    "/charging": {
      "post": {
        "tags": [
          "Charging"
        ],
        "summary": "Start a new charging session",
        "description": "### Starts a new charging session at the specified charging point (EVSE ID).\n #### User information is extracted from the used token\n #### **location_id** can be same as **evse_uid**, depending on CPO implementation\n **Use Cases:**\n - Start a new charging session for the current user, at a particular EVSE",
        "operationId": "startCharging",
        "parameters": [
          {
            "name": "Authentication-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartSessionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommandResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid command",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Required header not present"
          },
          "400 ": {
            "description": "Authentication token parsing error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "500 ": {
            "description": "Failed to start a charging session."
          }
        }
      }
    },
    "/charging/{country_code}/{party_id}/{session_id}/stop": {
      "post": {
        "tags": [
          "Charging"
        ],
        "summary": "Stop ongoing charging session",
        "description": "### Stops an ongoing charging session, for the user who is triggering the action.\n #### User information is extracted from the used token\n **Use Cases:**\n - Stop an ongoing charging session of a particular EVSE, for the current user",
        "operationId": "stopCharging",
        "parameters": [
          {
            "name": "country_code",
            "in": "path",
            "description": "Country code of the CPO requesting data from the eMSP system",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "party_id",
            "in": "path",
            "description": "Party ID of the CPO requesting data from the eMSP system",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "session_id",
            "in": "path",
            "description": "The ID of the ongoing session, that is requested to be stopped. Can be retrieved after a charging session has been started, from GET /sessions/active",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authentication-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommandResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "No active charging session was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "500": {
            "description": "Required header not present"
          },
          "400 ": {
            "description": "Authentication token parsing error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          }
        }
      }
    },
    "/charging-stations": {
      "get": {
        "tags": [
          "Charging Stations"
        ],
        "summary": "Get charging stations by IDs",
        "description": "### Returns the list of OCPI locations (charging stations) for the requested IDs.\n ### Retrieves charging stations that can be displayed on a map in a cluster, or in single POIs along with their details.\n #### IDs can be retrieved by the POST /charging-stations endpoint.\n **Use Cases:**\n - Show charging station details (e.g. address, connectors, opening hours, etc.)",
        "operationId": "getLocationsByIds",
        "parameters": [
          {
            "name": "publishTokenUid",
            "in": "query",
            "description": "The optional publish token UID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "The list of charging station IDs to search for",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Location"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "403": {
            "description": "The API key was not found or is not valid."
          },
          "404": {
            "description": "Charging station could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          }
        }
      },
      "post": {
        "tags": [
          "Charging Stations"
        ],
        "summary": "Get charging stations clustered by zoom level",
        "description": "### Returns the clusters of all charging stations in the specified bounds (map is defined by geocoordinates).\n #### Filters for payment services (MSPs), charging point operators (charging networks),  and charging speed (power level) can be applied.\n **Use Cases:**\n - Show clusters of charging stations on a map\n - Show single POI markers on a map",
        "operationId": "getLocations",
        "parameters": [
          {
            "name": "publishTokenUid",
            "in": "query",
            "description": "The optional publish token UID",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "The API key was not found or is not valid."
          },
          "429": {
            "description": "Too many requests"
          }
        }
      }
    },
    "/charging-stations/autocomplete": {
      "post": {
        "tags": [
          "Charging Stations"
        ],
        "summary": "Get autocomplete results for the charging station name query, optional power level filter and optional geo_location parameter",
        "description": " ### Performs a search for charging stations, based on the name query, and optional power level filter (at least one station connector needs to have power level in the specified range).\n #### If the geo_location parameter is present,  returns stations sorted by distance from the geo location.\n **Use Cases:**\n - Search for a charging station by name in a search field",
        "operationId": "autocomplete",
        "parameters": [
          {
            "name": "publishTokenUid",
            "in": "query",
            "description": "The optional publish token UID",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutocompleteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AutocompleteResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "The API key was not found or is not valid."
          },
          "404": {
            "description": "Dataset associated with the API key not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          }
        }
      }
    },
    "/charging-stations/around": {
      "post": {
        "tags": [
          "Charging Stations"
        ],
        "summary": "Get all charging stations around a geo location",
        "description": " ### Returns the charging stations with their details and air distances, which are nearby of the requested geo location.\n #### Filters for connector types (plug types), amenities (e.g. restarants, supermarkets, etc) and fast chargers only, can be applied.\n **Use Cases:**\n - Show charging stations around the user's location (nearby) or around of a defined location (e.g. work)",
        "operationId": "getLocationsAroundGeoLocation",
        "parameters": [
          {
            "name": "publishTokenUid",
            "in": "query",
            "description": "The optional publish token UID",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AroundGeoLocationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AroundGeoLocationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "The API key was not found or is not valid."
          },
          "429": {
            "description": "Too many requests"
          }
        }
      }
    },
    "/charging-curves": {
      "get": {
        "tags": [
          "Charging curves"
        ],
        "summary": "Get all charging curves",
        "operationId": "getAllChargingCurves",
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VehicleResponse"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Charging curves"
        ],
        "summary": "Add a new charging curve",
        "operationId": "addNewChargingCurve",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChargingCurveRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Vehicle not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          }
        }
      }
    },
    "/billing/info": {
      "get": {
        "tags": [
          "Billing"
        ],
        "summary": "Retrieve the user billing info",
        "description": "Returns the billing info of a user",
        "operationId": "getUserBillingInformation",
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingInfoResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid or missing Credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "404": {
            "description": "The billing information was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Authentication": []
          }
        ]
      },
      "post": {
        "tags": [
          "Billing"
        ],
        "summary": "Creates the user billing info",
        "description": "Creates the billing info for a user",
        "operationId": "createBillingInformation",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BillingCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Invalid or missing Credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Authentication": []
          }
        ]
      }
    },
    "/vehicles/{vehicleUuid}/chargingcurve": {
      "get": {
        "tags": [
          "Vehicles"
        ],
        "summary": "Get vehicle charging curve by vehicle UUID",
        "operationId": "getVehicleChargingCurveByVehicleUuid",
        "parameters": [
          {
            "name": "vehicleUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VehicleChargingCurveResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Wrong UUID format",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Vehicle not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          }
        }
      }
    },
    "/user/home-stations": {
      "get": {
        "tags": [
          "User's home stations"
        ],
        "summary": "Get User's home stations",
        "description": " ### Returns a list of home station IDs, for the User who triggered the action.\n**Use Cases:**\n - Retrieve home stations for the current user, in order to be displayed",
        "operationId": "getUserHomeStationsByUserId",
        "parameters": [
          {
            "name": "Authentication-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Required header not present"
          },
          "400 ": {
            "description": "Authentication token parsing error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          }
        }
      }
    },
    "/user/favorites/chargingstations": {
      "get": {
        "tags": [
          "Charging station favorites"
        ],
        "summary": "Get favourite charging stations",
        "description": "Returns the list of IDs of the favorite charging stations of the user",
        "operationId": "getFavouriteChargingStations",
        "parameters": [
          {
            "name": "Authentication-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FavoriteChargingStations"
                }
              }
            }
          },
          "401": {
            "description": "Invalid or missing Credentials"
          },
          "404": {
            "description": "User's charging station was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "500": {
            "description": "Required header not present"
          },
          "400 ": {
            "description": "Authentication token parsing error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          }
        }
      }
    },
    "/sessions/active": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get all active charging sessions of the user",
        "description": "### Returns a list of all active charging sessions of the current user, with its consumption details\n #### User information is extracted from the used token\n **Use Cases:**\n - Retrieve ongoing charging session details, based on the current user, to show consumption details or just highlight session at a POI",
        "operationId": "getAllActiveSessionsByUser",
        "parameters": [
          {
            "name": "Authentication-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Session"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Authentication token parsing error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "500": {
            "description": "Required header not present"
          }
        }
      }
    },
    "/locations/{location_id}/evses/{evse_id}/tariffs": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Get EVSE connector tariffs",
        "description": "Returns a list of tariffs for each connector present in the EVSE. Each connector has two tariffs, regular and a custom one.",
        "operationId": "getEvseConnectorTariffs",
        "parameters": [
          {
            "name": "Authentication-Token",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "evse_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TariffResponse"
                  }
                }
              }
            }
          },
          "403": {
            "description": "The API key was not found or is not valid."
          },
          "404": {
            "description": "Tariff for the specified EVSE id not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "500": {
            "description": "Required header not present"
          }
        }
      }
    },
    "/location/review/{locationId}": {
      "get": {
        "tags": [
          "Location Review"
        ],
        "summary": "Get the active review of the location of the current user",
        "description": "Get the active review of the location of the current user",
        "operationId": "getActiveReviewOfCurrentUser",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "description": "The id of the location",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationReviewGetResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid or missing Credentials"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Authentication": []
          }
        ]
      }
    },
    "/location/images": {
      "get": {
        "tags": [
          "Location Images"
        ],
        "summary": "Get location images for review",
        "description": "Returns all location images which were submitted but not reviewed yet",
        "operationId": "getLocationImagesForReview",
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocationImageResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid or missing Credentials"
          },
          "404": {
            "description": "No images for review were found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Authentication": []
          }
        ]
      }
    },
    "/commands": {
      "get": {
        "tags": [
          "Commands"
        ],
        "summary": "Get command result",
        "description": "Get command result",
        "operationId": "getCommandResult",
        "parameters": [
          {
            "name": "commandUuid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommandResult"
                }
              }
            }
          },
          "404": {
            "description": "Command with the specified UUID doesn't exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          }
        }
      }
    },
    "/charging-stations/search": {
      "get": {
        "tags": [
          "Charging Stations"
        ],
        "summary": "Search charging stations",
        "description": " ### Performs a search for charging station locations by EVSE ID, or charging station name, or operator UUID.\n #### Either evse_id or name must be provided.\n **Use Cases:**\n - Search and find a particular charging station",
        "operationId": "search",
        "parameters": [
          {
            "name": "publishTokenUid",
            "in": "query",
            "description": "The optional publish token UID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "evse",
            "in": "query",
            "description": "The EVSE ID",
            "required": false,
            "schema": {
              "maxLength": 2147483647,
              "minLength": 3,
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The charging station name",
            "required": false,
            "schema": {
              "maxLength": 2147483647,
              "minLength": 3,
              "type": "string"
            }
          },
          {
            "name": "operatorUuid",
            "in": "query",
            "description": "The optional filter for the operator UUID",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Both search query terms were defined",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "The API key was not found or is not valid."
          },
          "404": {
            "description": "Charging station could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "400 ": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/charging-curves/vehicle/{vehicleUuid}": {
      "get": {
        "tags": [
          "Charging curves"
        ],
        "summary": "Get all charging curves for a specific vehicle",
        "operationId": "getAllChargingCurvesForVehicle",
        "parameters": [
          {
            "name": "vehicleUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VehicleResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Wrong UUID format",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Vehicle not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          }
        }
      }
    },
    "/cdrs/user": {
      "get": {
        "tags": [
          "CDRs"
        ],
        "summary": "Get CDRs with filters, by User",
        "description": "### Returns all charge detail records of the current user, paginated.\n #### Filters can be applied e.g. time period, location ID, EVSE ID, etc.\n #### User information is extracted from the used token\n **Use Cases:**\n - Retrieve CDRs, as soon as they are provided by the CPO (invoiced), with filter options\n - Show and highlight particular CDRs (e.g. at specific EVSEs)",
        "operationId": "getAllCdrPaginated",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Used for pagination, preferable page to fetch",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Used for pagination, maximum number of returned CRDs per page",
            "required": false,
            "schema": {
              "maximum": 100,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "countryCode",
            "in": "query",
            "description": "ISO-3166 alpha-2 country code of the CPO that 'owns' this CDR.",
            "required": false,
            "schema": {
              "maxLength": 2,
              "minLength": 0,
              "type": "string",
              "description": "ISO-3166 alpha-2 country code of the CPO that 'owns' this CDR.",
              "example": "DE"
            },
            "example": "DE"
          },
          {
            "name": "partyId",
            "in": "query",
            "description": "CPO ID of the CPO that 'owns' this CDR (following the ISO-15118 standard).",
            "required": false,
            "schema": {
              "maxLength": 3,
              "minLength": 0,
              "type": "string",
              "description": "CPO ID of the CPO that 'owns' this CDR (following the ISO-15118 standard).",
              "example": "ERG"
            },
            "example": "ERG"
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Start timestamp of the charging session, or in-case of a reservation (before the start of a session) the start of the reservation.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Start timestamp of the charging session, or in-case of a reservation (before the start of a session) the start of the reservation.",
              "example": "2024-11-15T23:59:59"
            },
            "example": "2024-11-15T23:59:59"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "The timestamp when the session was completed/finished, charging might have finished before the session ends, for example: EV is full, but parking cost also has to be paid.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The timestamp when the session was completed/finished, charging might have finished before the session ends, for example: EV is full, but parking cost also has to be paid.",
              "example": "2024-11-15T23:59:59"
            },
            "example": "2024-11-15T23:59:59"
          },
          {
            "name": "tokenUid",
            "in": "query",
            "description": "Unique ID by which this Token can be identified. This is the field used by the CPO’s system (RFID reader on the Charge Point) to identify this token. Currently, in most cases: type=RFID, this is the RFID hidden ID as read by the RFID reader, but that is not a requirement. If this is a <b>type=APP_USER</b> Token, it will be a unique, by the eMSP, generated ID.",
            "required": false,
            "schema": {
              "maxLength": 36,
              "minLength": 0,
              "type": "string",
              "description": "Unique ID by which this Token can be identified. This is the field used by the CPO’s system (RFID reader on the Charge Point) to identify this token. Currently, in most cases: type=RFID, this is the RFID hidden ID as read by the RFID reader, but that is not a requirement. If this is a <b>type=APP_USER</b> Token, it will be a unique, by the eMSP, generated ID.",
              "example": "08a8c5d2f13b9100"
            },
            "example": "08a8c5d2f13b9100"
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Uniquely identifies the OCPI location (charging station) within the CPO’s platform (and suboperator platforms). This field can never be changed, modified or renamed.",
            "required": false,
            "schema": {
              "maxLength": 36,
              "minLength": 0,
              "type": "string",
              "description": "Uniquely identifies the OCPI location (charging station) within the CPO’s platform (and suboperator platforms). This field can never be changed, modified or renamed.",
              "example": "123e4567-e89b-42d3-a456-426614174000"
            },
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          {
            "name": "locationEvseIds",
            "in": "query",
            "description": "List of EVSE IDs (which were used for charging) to search.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Authentication-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Cdr"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "500": {
            "description": "Required header not present"
          },
          "400 ": {
            "description": "Authentication token parsing error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          }
        }
      }
    },
    "/user/favorites/address/{addressUuid}": {
      "delete": {
        "tags": [
          "Address favorites"
        ],
        "summary": "Remove favorite address",
        "description": "Removes the address by ID from the favorite list of the user",
        "operationId": "deleteFavouriteAddress",
        "parameters": [
          {
            "name": "addressUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authentication-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageDto"
                }
              }
            }
          },
          "400": {
            "description": "Wrong UUID format",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Invalid or missing Credentials"
          },
          "404": {
            "description": "Favourite addresses were not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "500": {
            "description": "Required header not present"
          },
          "400 ": {
            "description": "Authentication token parsing error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "SuccessMessageDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          }
        }
      },
      "ErrorMessageDto": {
        "required": [
          "errorCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "The error message",
            "example": "Example error message"
          },
          "errorCode": {
            "type": "string",
            "description": "The error code",
            "example": "EXAMPLE_ERROR_CODE"
          }
        }
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "description": "Affected field"
          },
          "message": {
            "type": "string",
            "description": "Validation message"
          }
        },
        "description": "List of validation errors"
      },
      "ValidationErrorMessageDto": {
        "required": [
          "errorCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "The error message",
            "example": "Example error message"
          },
          "errorCode": {
            "type": "string",
            "description": "The error code",
            "example": "EXAMPLE_ERROR_CODE"
          },
          "validationErrors": {
            "type": "array",
            "description": "List of validation errors",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "CombustionEngineVehicleData": {
        "type": "object",
        "properties": {
          "co2Emissions": {
            "type": "number",
            "description": "Vehicle co2 emissions in grams.",
            "format": "double"
          }
        },
        "description": "Defines the information of a vehicle using internal combustion engine."
      },
      "ElectricVehicleData": {
        "type": "object",
        "properties": {
          "net_battery_capacity": {
            "type": "number",
            "description": "Net battery capacity",
            "format": "double",
            "example": 64
          },
          "ac_plug_type": {
            "type": "string",
            "description": "AC plug type",
            "example": "IEC_62196_T2",
            "enum": [
              "CHADEMO",
              "DOMESTIC_A",
              "DOMESTIC_B",
              "DOMESTIC_C",
              "DOMESTIC_D",
              "DOMESTIC_E",
              "DOMESTIC_F",
              "DOMESTIC_G",
              "DOMESTIC_H",
              "DOMESTIC_I",
              "DOMESTIC_J",
              "DOMESTIC_K",
              "DOMESTIC_L",
              "IEC_60309_2_single_16",
              "IEC_60309_2_three_16",
              "IEC_60309_2_three_32",
              "IEC_60309_2_three_64",
              "IEC_62196_T1",
              "IEC_62196_T1_COMBO",
              "IEC_62196_T2",
              "IEC_62196_T2_COMBO",
              "IEC_62196_T3A",
              "IEC_62196_T3C",
              "NEMA_5_20",
              "NEMA_6_30",
              "NEMA_6_50",
              "NEMA_10_30",
              "NEMA_10_50",
              "NEMA_14_30",
              "NEMA_14_50",
              "PANTOGRAPH_BOTTOM_UP",
              "PANTOGRAPH_TOP_DOWN",
              "TESLA_R",
              "TESLA_S",
              "TESLA_D",
              "GBT_AC",
              "GBT_DC",
              "UNKNOWN"
            ]
          },
          "fast_charging_plug_type": {
            "type": "string",
            "description": "Fast charging plug type",
            "example": "IEC_62196_T2_COMBO",
            "enum": [
              "CHADEMO",
              "DOMESTIC_A",
              "DOMESTIC_B",
              "DOMESTIC_C",
              "DOMESTIC_D",
              "DOMESTIC_E",
              "DOMESTIC_F",
              "DOMESTIC_G",
              "DOMESTIC_H",
              "DOMESTIC_I",
              "DOMESTIC_J",
              "DOMESTIC_K",
              "DOMESTIC_L",
              "IEC_60309_2_single_16",
              "IEC_60309_2_three_16",
              "IEC_60309_2_three_32",
              "IEC_60309_2_three_64",
              "IEC_62196_T1",
              "IEC_62196_T1_COMBO",
              "IEC_62196_T2",
              "IEC_62196_T2_COMBO",
              "IEC_62196_T3A",
              "IEC_62196_T3C",
              "NEMA_5_20",
              "NEMA_6_30",
              "NEMA_6_50",
              "NEMA_10_30",
              "NEMA_10_50",
              "NEMA_14_30",
              "NEMA_14_50",
              "PANTOGRAPH_BOTTOM_UP",
              "PANTOGRAPH_TOP_DOWN",
              "TESLA_R",
              "TESLA_S",
              "TESLA_D",
              "GBT_AC",
              "GBT_DC",
              "UNKNOWN"
            ]
          },
          "max_charging_power": {
            "type": "number",
            "description": "Maximum charging power",
            "example": 77
          },
          "optimal_charging_point": {
            "type": "integer",
            "description": "Optimal charging point, in percentage",
            "format": "int32",
            "example": 84
          },
          "max_voltage": {
            "type": "number",
            "description": "Maximum voltage",
            "example": 400
          }
        },
        "description": "Optional electric vehicle data"
      },
      "VehicleRequest": {
        "type": "object",
        "properties": {
          "model": {
            "type": "string",
            "description": "Vehicle model",
            "example": "E-tron"
          },
          "variant": {
            "type": "string",
            "description": "Vehicle variant",
            "example": "Turbo"
          },
          "vehicle_region": {
            "type": "string",
            "description": "Vehicle region",
            "example": "EU"
          },
          "vehicle_class": {
            "type": "string",
            "description": "Vehicle class",
            "example": "PV"
          },
          "electric_vehicle_data": {
            "$ref": "#/components/schemas/ElectricVehicleData"
          },
          "combustion_engine_vehicle_data": {
            "$ref": "#/components/schemas/CombustionEngineVehicleData"
          },
          "consumption_city_cold": {
            "type": "number",
            "description": "Consumption in city driving conditions in cold weather",
            "example": 13.03
          },
          "consumption_city_mild": {
            "type": "number",
            "description": "Consumption in city driving conditions in mild weather",
            "example": 10.08
          },
          "consumption_highway_cold": {
            "type": "number",
            "description": "Consumption in highway driving conditions in cold weather",
            "example": 18.6
          },
          "consumption_highway_mild": {
            "type": "number",
            "description": "Consumption in highway driving conditions in mild weather",
            "example": 17.49
          },
          "vehicle_weight_empty": {
            "type": "number",
            "description": "Weight of an empty vehicle",
            "format": "double",
            "example": 1760
          },
          "efficiency_factor_uphill": {
            "type": "number",
            "description": "Efficiency factor during uphill ascent",
            "format": "double",
            "example": 1.1
          },
          "efficiency_factor_downhill": {
            "type": "number",
            "description": "Efficiency factor during downhill descent",
            "format": "double",
            "example": 0.9
          },
          "co2_savings": {
            "type": "number",
            "description": "CO2 savings in grams per km",
            "format": "double",
            "example": 250.2
          },
          "height": {
            "type": "number",
            "description": "Vehicle height",
            "format": "double",
            "example": 2.3
          },
          "width": {
            "type": "number",
            "description": "Vehicle width",
            "format": "double",
            "example": 2.1
          },
          "length": {
            "type": "number",
            "description": "Vehicle length",
            "format": "double",
            "example": 9
          },
          "max_gross_weight": {
            "type": "number",
            "description": "Vehicle maximum gross weight",
            "format": "double",
            "example": 2000
          },
          "max_loading_volume": {
            "type": "number",
            "description": "Vehicle maximum loading volume",
            "format": "double",
            "example": 3.14
          },
          "max_loading_height": {
            "type": "number",
            "description": "Vehicle maximum loading height",
            "format": "double",
            "example": 1.8
          },
          "max_loading_width": {
            "type": "number",
            "description": "Vehicle maximum loading width",
            "format": "double",
            "example": 2.46
          },
          "max_loading_length": {
            "type": "number",
            "description": "Vehicle maximum loading length",
            "format": "double",
            "example": 2.6
          },
          "vehicle_brand_uuid": {
            "type": "string",
            "description": "Vehicle brand UUID",
            "example": "67e7dfdf-3757-4479-a905-3bbacb75490a"
          }
        }
      },
      "CreatedDto": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "UUID of the created entity",
            "example": "67e7dfdf-3757-4479-a905-3bbacb75490a"
          }
        }
      },
      "BrandRequest": {
        "required": [
          "brand_name"
        ],
        "type": "object",
        "properties": {
          "brand_name": {
            "type": "string",
            "description": "Brand name",
            "example": "Audi"
          }
        }
      },
      "ChargingCurveShortRequest": {
        "required": [
          "charging_power"
        ],
        "type": "object",
        "properties": {
          "state_of_charge": {
            "type": "integer",
            "description": "State of charge with values from 1% to 100% in steps of 1%-points",
            "format": "int32",
            "example": 53
          },
          "charging_power": {
            "minimum": 1,
            "exclusiveMinimum": false,
            "type": "number",
            "description": "Charging power per 1%-point of the state of charge ",
            "example": 112
          }
        }
      },
      "CarConfiguration": {
        "required": [
          "manufacturer",
          "model",
          "vehicle_id",
          "vehicle_variant"
        ],
        "type": "object",
        "properties": {
          "vehicle_id": {
            "type": "string",
            "description": "The UUID of the vehicle",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "manufacturer": {
            "type": "string",
            "description": "The vehicle manufacturer",
            "example": "Porsche"
          },
          "model": {
            "type": "string",
            "description": "The model name",
            "example": "Taycan"
          },
          "vehicle_variant": {
            "type": "string",
            "description": "The model variant",
            "example": "Turbo"
          }
        },
        "description": "Car configuration"
      },
      "ChargeDetailsConfiguration": {
        "required": [
          "charge_max",
          "charge_min",
          "charge_penalty"
        ],
        "type": "object",
        "properties": {
          "charge_min": {
            "maximum": 80,
            "minimum": 5,
            "type": "integer",
            "description": "The minimum SoC in percent before a charging station will be targeted",
            "format": "int32",
            "example": 20
          },
          "charge_max": {
            "maximum": 100,
            "minimum": 20,
            "type": "integer",
            "description": "The maximum SoC in percent which will be charged",
            "format": "int32",
            "example": 80
          },
          "charge_penalty": {
            "maximum": 3600,
            "minimum": 0,
            "type": "integer",
            "description": "The charging penalty in seconds",
            "format": "int32",
            "example": 120
          },
          "charge_port": {
            "type": "string",
            "enum": [
              "CHADEMO",
              "DOMESTIC_A",
              "DOMESTIC_B",
              "DOMESTIC_C",
              "DOMESTIC_D",
              "DOMESTIC_E",
              "DOMESTIC_F",
              "DOMESTIC_G",
              "DOMESTIC_H",
              "DOMESTIC_I",
              "DOMESTIC_J",
              "DOMESTIC_K",
              "DOMESTIC_L",
              "IEC_60309_2_single_16",
              "IEC_60309_2_three_16",
              "IEC_60309_2_three_32",
              "IEC_60309_2_three_64",
              "IEC_62196_T1",
              "IEC_62196_T1_COMBO",
              "IEC_62196_T2",
              "IEC_62196_T2_COMBO",
              "IEC_62196_T3A",
              "IEC_62196_T3C",
              "NEMA_5_20",
              "NEMA_6_30",
              "NEMA_6_50",
              "NEMA_10_30",
              "NEMA_10_50",
              "NEMA_14_30",
              "NEMA_14_50",
              "PANTOGRAPH_BOTTOM_UP",
              "PANTOGRAPH_TOP_DOWN",
              "TESLA_R",
              "TESLA_S",
              "TESLA_D",
              "GBT_AC",
              "GBT_DC",
              "UNKNOWN"
            ]
          },
          "fast_charge_port": {
            "type": "string",
            "enum": [
              "CHADEMO",
              "DOMESTIC_A",
              "DOMESTIC_B",
              "DOMESTIC_C",
              "DOMESTIC_D",
              "DOMESTIC_E",
              "DOMESTIC_F",
              "DOMESTIC_G",
              "DOMESTIC_H",
              "DOMESTIC_I",
              "DOMESTIC_J",
              "DOMESTIC_K",
              "DOMESTIC_L",
              "IEC_60309_2_single_16",
              "IEC_60309_2_three_16",
              "IEC_60309_2_three_32",
              "IEC_60309_2_three_64",
              "IEC_62196_T1",
              "IEC_62196_T1_COMBO",
              "IEC_62196_T2",
              "IEC_62196_T2_COMBO",
              "IEC_62196_T3A",
              "IEC_62196_T3C",
              "NEMA_5_20",
              "NEMA_6_30",
              "NEMA_6_50",
              "NEMA_10_30",
              "NEMA_10_50",
              "NEMA_14_30",
              "NEMA_14_50",
              "PANTOGRAPH_BOTTOM_UP",
              "PANTOGRAPH_TOP_DOWN",
              "TESLA_R",
              "TESLA_S",
              "TESLA_D",
              "GBT_AC",
              "GBT_DC",
              "UNKNOWN"
            ]
          }
        },
        "description": "Charge details configuration"
      },
      "FilterPowerType": {
        "type": "object",
        "properties": {
          "power_type_ac": {
            "type": "boolean",
            "description": "The planner will include AC connectors",
            "default": true
          },
          "power_type_dc": {
            "type": "boolean",
            "description": "The planner will include DC connectors",
            "default": true
          },
          "power_type_hpc": {
            "type": "boolean",
            "description": "The planner will include HPC connectors",
            "default": true
          }
        },
        "description": "Optional power type filter"
      },
      "NavigationConfiguration": {
        "required": [
          "alert_when_over_limit",
          "show_speed_limit",
          "speed_limit_threshold"
        ],
        "type": "object",
        "properties": {
          "show_speed_limit": {
            "type": "boolean",
            "description": "Indicated if the speed limit should be shown",
            "example": true
          },
          "alert_when_over_limit": {
            "type": "boolean",
            "description": "Indicated if the user should be alerted when he is over the speed limit",
            "example": true
          },
          "speed_limit_threshold": {
            "type": "integer",
            "description": "The speed limit threshold before alerting",
            "format": "int32",
            "example": 20
          },
          "navigation_voice_configuration": {
            "$ref": "#/components/schemas/NavigationVoiceConfiguration"
          }
        },
        "description": "Navigation configuration"
      },
      "NavigationVoiceConfiguration": {
        "required": [
          "is_selected",
          "language_id",
          "language_name"
        ],
        "type": "object",
        "properties": {
          "language_id": {
            "type": "integer",
            "description": "The ID of the language",
            "format": "int64",
            "example": 12
          },
          "language_name": {
            "type": "string",
            "description": "The name of the language",
            "example": "German"
          },
          "is_selected": {
            "type": "boolean",
            "description": "Indicates if the voice instructions are enabled",
            "example": true
          }
        },
        "description": "The navigation voice configuration"
      },
      "UserSettings": {
        "required": [
          "app_language"
        ],
        "type": "object",
        "properties": {
          "car_configuration": {
            "$ref": "#/components/schemas/CarConfiguration"
          },
          "filter_power_type": {
            "$ref": "#/components/schemas/FilterPowerType"
          },
          "charge_details_configuration": {
            "$ref": "#/components/schemas/ChargeDetailsConfiguration"
          },
          "navigation_configuration": {
            "$ref": "#/components/schemas/NavigationConfiguration"
          },
          "payment_providers": {
            "type": "array",
            "description": "The list of payment providers",
            "items": {
              "type": "string",
              "description": "The list of payment providers"
            }
          },
          "charging_networks": {
            "type": "array",
            "description": "The list of charging networks",
            "items": {
              "type": "string",
              "description": "The list of charging networks"
            }
          },
          "app_language": {
            "type": "string",
            "description": "The selected app language",
            "example": "en"
          }
        }
      },
      "GeoLocation": {
        "required": [
          "latitude",
          "longitude"
        ],
        "type": "object",
        "properties": {
          "latitude": {
            "type": "string",
            "description": "Latitude of the point in decimal degree. Decimal separator: '.', Regex: -?[0-9]{1,2}\\.[0-9]{5,7}",
            "example": "50.770774"
          },
          "longitude": {
            "type": "string",
            "description": "Longitude of the point in decimal degree. Decimal separator: '.' Regex: -?[0-9]{1,3}\\.[0-9]{5,7}",
            "example": "-126.104965"
          }
        },
        "description": "This class defines the geo location of the Charge Point. The geodetic system to be used is WGS 84."
      },
      "SaveAddressRequest": {
        "required": [
          "address_type",
          "coordinates",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 300,
            "minLength": 1,
            "type": "string",
            "description": "The name of address",
            "example": "ACME Corp"
          },
          "coordinates": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "address_type": {
            "type": "string",
            "description": "The type of address",
            "example": "HOME",
            "enum": [
              "HOME",
              "WORK",
              "ADDRESS"
            ]
          }
        }
      },
      "LocationReviewSubmitRequest": {
        "required": [
          "options",
          "stars"
        ],
        "type": "object",
        "properties": {
          "stars": {
            "type": "integer",
            "description": "Number of stars",
            "format": "int32",
            "example": 3
          },
          "options": {
            "type": "array",
            "description": "The chosen options",
            "items": {
              "type": "string",
              "description": "The chosen options",
              "enum": [
                "CLEAN",
                "NOT_CLEAN",
                "EASY",
                "NOT_EASY",
                "NO_FUNCTIONALITY",
                "RECOMMENDED",
                "NOT_RECOMMENDED",
                "GOOD",
                "NOT_GOOD",
                "NO_CARD",
                "AMENITIES",
                "NO_AMENITIES",
                "CABLE",
                "NO_CABLE",
                "PRIVATE",
                "SEMI_PRIVATE",
                "PUBLIC"
              ]
            }
          }
        }
      },
      "CommandResult": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result of the command request as sent by the Charge Point to the CPO.",
            "enum": [
              "ACCEPTED",
              "CANCELED_RESERVATION",
              "EVSE_OCCUPIED",
              "EVSE_INOPERATIVE",
              "FAILED",
              "NOT_SUPPORTED",
              "REJECTED",
              "TIMEOUT",
              "UNKNOWN_RESERVATION"
            ]
          },
          "message": {
            "$ref": "#/components/schemas/DisplayText"
          }
        }
      },
      "DisplayText": {
        "required": [
          "language",
          "text"
        ],
        "type": "object",
        "properties": {
          "language": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "Language Code ISO 639-1.",
            "example": "en"
          },
          "text": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Text to be displayed to a end user. No markup, html etc. allowed.",
            "example": "this is a display text"
          }
        },
        "description": "List of multi-language alternative tariff info texts."
      },
      "CommandResponseDto": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Response from the CPO on the command request.",
            "enum": [
              "NOT_SUPPORTED",
              "REJECTED",
              "ACCEPTED",
              "UNKNOWN_SESSION"
            ]
          },
          "message": {
            "$ref": "#/components/schemas/DisplayText"
          },
          "commandUuid": {
            "type": "string",
            "description": "UUID of the command object which will contain the charge point response."
          }
        }
      },
      "StartSessionRequest": {
        "required": [
          "location_id"
        ],
        "type": "object",
        "properties": {
          "location_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": " Location.id of the Location on which a session is to be started.",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "evse_uid": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Optional EVSE.uid of the EVSE of this Location.",
            "example": "DE*ERG*E10001*1"
          },
          "connector_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Optional Connector.id of the Connector of the EVSE on which a session is to be started.",
            "example": "1"
          }
        },
        "description": "Start charging session request object."
      },
      "Cluster": {
        "type": "object",
        "properties": {
          "lat": {
            "type": "number",
            "description": "Latitude of the point in decimal degree.",
            "format": "double",
            "example": 52.770774
          },
          "lng": {
            "type": "number",
            "description": "Longitude of the point in decimal degree.",
            "format": "double",
            "example": 26.104965
          },
          "number": {
            "type": "integer",
            "description": "Number of charging stations in the cluster",
            "format": "int32",
            "example": 25
          },
          "fastestChargerSpeed": {
            "type": "integer",
            "description": "Cluster fastest charger speed in watts",
            "format": "int32",
            "example": 150000
          }
        },
        "description": "The list of charging station clusters"
      },
      "LocationInfo": {
        "type": "object",
        "properties": {
          "lat": {
            "type": "number",
            "description": "Latitude of the point in decimal degree.",
            "format": "double",
            "example": 50.770774
          },
          "lng": {
            "type": "number",
            "description": "Longitude of the point in decimal degree",
            "format": "double",
            "example": -126.104965
          },
          "totalNumberOfEvses": {
            "type": "integer",
            "description": "Total number of evses (filtered)",
            "format": "int32",
            "example": 2
          },
          "availableEvses": {
            "type": "integer",
            "description": "Number of evses which are currently available",
            "format": "int32",
            "example": 1
          },
          "totalNumberOfInoperativeEvses": {
            "type": "integer",
            "description": "Number of evses which are currently inoperative",
            "format": "int32",
            "example": 2
          },
          "fastestChargerSpeed": {
            "type": "integer",
            "description": "Location fastest charger speed in watts",
            "format": "int32",
            "example": 150000
          },
          "id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the location within the CPOs platform (and suboperator platforms). This field can never be changed, modified or renamed."
          }
        },
        "description": "The list of charging stations which are not in a cluster"
      },
      "LocationResponse": {
        "type": "object",
        "properties": {
          "clusters": {
            "type": "array",
            "description": "The list of charging station clusters",
            "items": {
              "$ref": "#/components/schemas/Cluster"
            }
          },
          "locations": {
            "type": "array",
            "description": "The list of charging stations which are not in a cluster",
            "items": {
              "$ref": "#/components/schemas/LocationInfo"
            }
          }
        }
      },
      "FilterPowerLevel": {
        "type": "object",
        "properties": {
          "power_level_max": {
            "minimum": 0,
            "type": "integer",
            "description": "Optional filter which specifies maximum available level of power in watts.",
            "format": "int32"
          },
          "power_level_min": {
            "minimum": 0,
            "type": "integer",
            "description": "Optional filter which specifies minimum available level of power in watts.",
            "format": "int32"
          }
        },
        "description": "Optional power level filter"
      },
      "LocationRequest": {
        "required": [
          "northeast",
          "southwest",
          "zoom"
        ],
        "type": "object",
        "properties": {
          "southwest": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "northeast": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "zoom": {
            "type": "integer",
            "description": "The map zoom level",
            "format": "int32",
            "example": 8
          },
          "filter_payment_services": {
            "type": "array",
            "description": "Optional list of payment service UUIDs which are available for the user. Default: all payment services will be used.",
            "example": [
              "0aeea664-4b90-487e-88e8-bcbdbee1d00a"
            ],
            "items": {
              "type": "string",
              "description": "Optional list of payment service UUIDs which are available for the user. Default: all payment services will be used.",
              "example": "[\"0aeea664-4b90-487e-88e8-bcbdbee1d00a\"]"
            }
          },
          "filter_charging_point_operators": {
            "type": "array",
            "description": "Optional list of charging point operator UUIDs which will be used during the routing. Default: all charging point operators will be used.",
            "example": [
              "0aeea664-4b90-487e-88e8-bcbdbee1d00a"
            ],
            "items": {
              "type": "string",
              "description": "Optional list of charging point operator UUIDs which will be used during the routing. Default: all charging point operators will be used.",
              "example": "[\"0aeea664-4b90-487e-88e8-bcbdbee1d00a\"]"
            }
          },
          "filter_power_level": {
            "$ref": "#/components/schemas/FilterPowerLevel"
          }
        },
        "description": "The location request"
      },
      "AutocompleteResponse": {
        "required": [
          "address",
          "city",
          "coordinates",
          "id",
          "name",
          "postalCode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Charging station id"
          },
          "name": {
            "type": "string",
            "description": "Charging station name"
          },
          "address": {
            "type": "string",
            "description": "Charging station street/block name and house number if available."
          },
          "postalCode": {
            "type": "string",
            "description": "Charging station postal code."
          },
          "city": {
            "type": "string",
            "description": "City or a town."
          },
          "distance": {
            "type": "number",
            "description": "Distance to the geo location",
            "format": "double"
          },
          "coordinates": {
            "$ref": "#/components/schemas/GeoLocation"
          }
        }
      },
      "AutocompleteRequest": {
        "required": [
          "nameQuery"
        ],
        "type": "object",
        "properties": {
          "nameQuery": {
            "maxLength": 2147483647,
            "minLength": 3,
            "type": "string",
            "description": "Charging station name query"
          },
          "geo_location": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "filter_power_level": {
            "$ref": "#/components/schemas/FilterPowerLevel"
          }
        },
        "description": "Support for autocomplete functionality on search use cases"
      },
      "AdditionalGeoLocation": {
        "required": [
          "latitude",
          "longitude"
        ],
        "type": "object",
        "properties": {
          "latitude": {
            "maxLength": 10,
            "minLength": 0,
            "pattern": "-?[0-9]{1,2}\\.[0-9]{5,7}",
            "type": "string",
            "description": "Latitude of the point in decimal degree. Example: 50.770774. Decimal separator: \".\" Regex: -?[0-9]{1,2}\\.[0-9]{5,7}"
          },
          "longitude": {
            "maxLength": 11,
            "minLength": 0,
            "type": "string",
            "description": "Longitude of the point in decimal degree. Example: -126.104965. Decimal separator: \".\" Regex: -?[0-9]{1,3}\\.[0-9]{5,7}"
          },
          "name": {
            "$ref": "#/components/schemas/DisplayText"
          }
        },
        "description": "This class defines an additional geo location that is relevant for the Charge Point. The geodetic system to be used is WGS 84."
      },
      "Amenity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the amenity"
          },
          "category": {
            "type": "string",
            "description": "The category of the amenity",
            "enum": [
              "FAST_FOOD",
              "RESTAURANT",
              "CAFE",
              "SHOPPING",
              "GROCERY_SHOPPING",
              "SIGHTSEEING",
              "LEISURE",
              "DRINKS",
              "TOILETS",
              "HOTEL",
              "MALL",
              "SUPERMARKET",
              "SPORT",
              "RECREATION_AREA",
              "NATURE",
              "MUSEUM",
              "BIKE_SHARING",
              "BUS_STOP",
              "TAXI_STAND",
              "TRAM_STOP",
              "METRO_STATION",
              "TRAIN_STATION",
              "AIRPORT",
              "PARKING_LOT",
              "CARPOOL_PARKING",
              "FUEL_STATION",
              "WIFI"
            ]
          },
          "name": {
            "type": "string",
            "description": "Display name of the amenity."
          },
          "website": {
            "type": "string",
            "description": "Link to the amenity website."
          },
          "phone": {
            "type": "string",
            "description": "The telephone number of the amenity."
          },
          "address": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "Street/block name and house number if available."
          },
          "city": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "City or town."
          },
          "state": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "State or province of the amenity, only to be used when relevant."
          },
          "country": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "ISO 3166-1 alpha-3 code for the country of this amenity."
          },
          "hasWifi": {
            "type": "boolean",
            "description": "The amenity offers an Internet hotspot over a wireless local area network."
          },
          "coordinates": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "distance": {
            "type": "integer",
            "description": "The walking distance in meters from the charging station",
            "format": "int32"
          },
          "duration": {
            "type": "integer",
            "description": "The walking duration in seconds from the charging station",
            "format": "int32"
          },
          "polyline": {
            "type": "string",
            "description": "The overview polyline of the walking path"
          },
          "opening_times": {
            "$ref": "#/components/schemas/Hours"
          },
          "postal_code": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Postal code of the amenity, may only be omitted when the amenity has no postal code."
          }
        },
        "description": "Amenities at the charging station."
      },
      "AroundGeoLocationResponse": {
        "type": "object",
        "properties": {
          "locations": {
            "type": "array",
            "description": "The list of locations around the geo coordinate and the air distance in meters.",
            "items": {
              "$ref": "#/components/schemas/LocationDistance"
            }
          }
        }
      },
      "BusinessDetails": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Name of the operator."
          },
          "website": {
            "type": "string",
            "description": "Link to the operator’s website.",
            "example": "https://www.domain.com"
          },
          "logo": {
            "$ref": "#/components/schemas/Image"
          },
          "phone_number": {
            "type": "string",
            "description": "The phone number. Custom extension."
          }
        },
        "description": "Information of the owner if available."
      },
      "ChargingPointOperator": {
        "required": [
          "name",
          "uuid"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "The UUID of the charging point operator.",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the charging point operator.",
            "example": "Acme Cooperation"
          }
        },
        "description": "The charging point operator of the charging station."
      },
      "Connector": {
        "required": [
          "format",
          "id",
          "last_updated",
          "max_amperage",
          "max_voltage",
          "power_type",
          "standard"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Identifier of the Connector within the EVSE. Two Connectors may have the same id as long as they do not belong to the same EVSE object."
          },
          "standard": {
            "type": "string",
            "description": "The standard of the installed connector.",
            "enum": [
              "CHADEMO",
              "DOMESTIC_A",
              "DOMESTIC_B",
              "DOMESTIC_C",
              "DOMESTIC_D",
              "DOMESTIC_E",
              "DOMESTIC_F",
              "DOMESTIC_G",
              "DOMESTIC_H",
              "DOMESTIC_I",
              "DOMESTIC_J",
              "DOMESTIC_K",
              "DOMESTIC_L",
              "IEC_60309_2_single_16",
              "IEC_60309_2_three_16",
              "IEC_60309_2_three_32",
              "IEC_60309_2_three_64",
              "IEC_62196_T1",
              "IEC_62196_T1_COMBO",
              "IEC_62196_T2",
              "IEC_62196_T2_COMBO",
              "IEC_62196_T3A",
              "IEC_62196_T3C",
              "NEMA_5_20",
              "NEMA_6_30",
              "NEMA_6_50",
              "NEMA_10_30",
              "NEMA_10_50",
              "NEMA_14_30",
              "NEMA_14_50",
              "PANTOGRAPH_BOTTOM_UP",
              "PANTOGRAPH_TOP_DOWN",
              "TESLA_R",
              "TESLA_S",
              "TESLA_D",
              "GBT_AC",
              "GBT_DC",
              "UNKNOWN"
            ]
          },
          "format": {
            "type": "string",
            "description": "The format (socket/cable) of the installed connector.",
            "enum": [
              "SOCKET",
              "CABLE"
            ]
          },
          "power_type": {
            "type": "string",
            "enum": [
              "AC_1_PHASE",
              "AC_3_PHASE",
              "DC"
            ]
          },
          "max_voltage": {
            "type": "integer",
            "description": "Maximum voltage of the connector (line to neutral for AC_3_PHASE), in volt [V]. For example: DC Chargers might vary the voltage during charging when battery almost full.",
            "format": "int32"
          },
          "max_amperage": {
            "type": "integer",
            "description": "Maximum amperage of the connector, in ampere [A].",
            "format": "int32"
          },
          "max_electric_power": {
            "type": "integer",
            "description": "Maximum electric power that can be delivered by this connector, in Watts (W). When the maximum electric power is lower than the calculated value from voltage and amperage, this value should be set.\n    For example: A DC Charge Point which can delivers up to 920V and up to 400A can be limited to a maximum of 150kW (max_electric_power = 150000). Depending on the car, it may supply max voltage or current, but not both at the same time.\nFor AC Charge Points, the amount of phases used can also have influence on the maximum power.",
            "format": "int32"
          },
          "tariff_ids": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Identifiers of the currently valid charging tariffs. Multiple tariffs are possible, but only one of each Tariff.type can be active at the same time. Tariffs with the same type are only allowed if they are not active at the same time: start_date_time and end_date_time period not overlapping.\n    When preference-based smart charging is supported, one tariff for every possible ProfileType should be provided. These tell the user about the options they have at this Connector, and what the tariff is for every option.\nFor a \"free of charge\" tariff, this field should be set and point to a defined \"free of charge\" tariff."
          },
          "terms_and_conditions": {
            "type": "string",
            "description": "URL to the operator’s terms and conditions.",
            "example": "https://www.domain.com"
          },
          "last_updated": {
            "type": "string",
            "description": "Timestamp when this Connector was last updated (or created).",
            "format": "date-time"
          }
        },
        "description": "A Connector is the socket or cable and plug available for the EV to use. A single EVSE may provide multiple Connectors but only one of them can be in use at the same time. A Connector always belongs to an EVSE object."
      },
      "EnergyMix": {
        "required": [
          "is_green_energy"
        ],
        "type": "object",
        "properties": {
          "is_green_energy": {
            "type": "boolean",
            "description": "True if 100% from regenerative sources. (CO2 and nuclear waste is zero)",
            "example": false
          },
          "energy_sources": {
            "type": "array",
            "description": "Key-value pairs (enum + percentage) of energy sources of this location’s tariff.",
            "items": {
              "$ref": "#/components/schemas/EnergySource"
            }
          },
          "environ_impact": {
            "type": "array",
            "description": "Key-value pairs (enum + percentage) of nuclear waste and CO2 exhaust of this location’s tariff.",
            "items": {
              "$ref": "#/components/schemas/EnvironmentalImpact"
            }
          },
          "supplier_name": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Name of the energy supplier, delivering the energy for this location or tariff.",
            "example": "HANDWE EV"
          },
          "energy_product_name": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Name of the energy suppliers product/tariff plan used at this location.",
            "example": "Kleenheat"
          }
        },
        "description": "This type is used to specify the energy mix and environmental impact of the supplied energy at a location or in a tariff."
      },
      "EnergySource": {
        "required": [
          "percentage",
          "source"
        ],
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "description": "Categories of energy sources.",
            "example": "GAS",
            "enum": [
              "NUCLEAR",
              "GENERAL_FOSSIL",
              "COAL",
              "GAS",
              "GENERAL_GREEN",
              "SOLAR",
              "WIND",
              "WATER"
            ]
          },
          "percentage": {
            "maximum": 100,
            "exclusiveMaximum": false,
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "number",
            "description": "Percentage of this source (0-100) in the mix.",
            "example": 33.2
          }
        },
        "description": "Key-value pairs (enum + percentage) of energy sources. All given values of all categories should add up to 100 percent."
      },
      "EnvironmentalImpact": {
        "required": [
          "amount",
          "category"
        ],
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "description": "Categories of environmental impact values.",
            "example": "NUCLEAR_WASTE",
            "enum": [
              "NUCLEAR_WASTE",
              "CARBON_DIOXIDE"
            ]
          },
          "amount": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "number",
            "description": "Amount of this portion in g/kWh.",
            "example": 0.005
          }
        },
        "description": "Amount of waste produced/emitted per kWh."
      },
      "Evse": {
        "required": [
          "connectors",
          "last_updated",
          "status",
          "uid"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the EVSE within the CPOs platform (and suboperator platforms). For example a database ID or the actual \"EVSE ID\". This field can never be changed, modified or renamed. This is the 'technical' identification of the EVSE, not to be used as 'human readable' identification, use the field evse_id for that.This field is named uid instead of id, because id could be confused with evse_id which is an eMI3 defined field."
          },
          "status": {
            "type": "string",
            "description": "Indicates the current status of the EVSE.",
            "enum": [
              "AVAILABLE",
              "BLOCKED",
              "CHARGING",
              "INOPERATIVE",
              "OUTOFORDER",
              "PLANNED",
              "REMOVED",
              "RESERVED",
              "UNKNOWN"
            ]
          },
          "capabilities": {
            "type": "array",
            "description": "List of functionalities that the EVSE is capable of.",
            "items": {
              "type": "string",
              "description": "List of functionalities that the EVSE is capable of.",
              "enum": [
                "CHARGING_PROFILE_CAPABLE",
                "CHARGING_PREFERENCES_CAPABLE",
                "CHIP_CARD_SUPPORT",
                "CONTACTLESS_CARD_SUPPORT",
                "CREDIT_CARD_PAYABLE",
                "DEBIT_CARD_PAYABLE",
                "PED_TERMINAL",
                "REMOTE_START_STOP_CAPABLE",
                "RESERVABLE",
                "RFID_READER",
                "TOKEN_GROUP_CAPABLE",
                "UNLOCK_CAPABLE",
                "CIT_SMS",
                "CIT_REFER_TO_COUNTER"
              ]
            }
          },
          "connectors": {
            "type": "array",
            "description": "List of available connectors on the EVSE.",
            "items": {
              "$ref": "#/components/schemas/Connector"
            }
          },
          "coordinates": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "directions": {
            "type": "array",
            "description": "Multi-language human-readable directions when more detailed information on how to reach the EVSE from the Location is required.",
            "items": {
              "$ref": "#/components/schemas/DisplayText"
            }
          },
          "images": {
            "type": "array",
            "description": "Links to images related to the EVSE such as photos or logos.",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "evse_id": {
            "maxLength": 48,
            "minLength": 0,
            "type": "string",
            "description": "Compliant with the following specification for EVSE ID from \"eMI3 standard version V1.0\" (http://emi3group.com/documents-links/) \"Part 2: business objects.\" Optional because: if an evse_id is to be re-used in the real world, the evse_id can be removed from an EVSE object if the status is set to REMOVED."
          },
          "status_schedule": {
            "type": "array",
            "description": "Indicates a planned status update of the EVSE.",
            "items": {
              "$ref": "#/components/schemas/StatusSchedule"
            }
          },
          "floor_level": {
            "maxLength": 4,
            "minLength": 0,
            "type": "string",
            "description": "Level on which the Charge Point is located (in garage buildings) in the locally displayed numbering scheme."
          },
          "physical_reference": {
            "maxLength": 16,
            "minLength": 0,
            "type": "string",
            "description": "A number/string printed on the outside of the EVSE for visual identification."
          },
          "parking_restrictions": {
            "type": "array",
            "description": "The restrictions that apply to the parking spot.",
            "items": {
              "type": "string",
              "description": "The restrictions that apply to the parking spot.",
              "enum": [
                "EV_ONLY",
                "PLUGGED",
                "DISABLED",
                "CUSTOMERS",
                "MOTORCYCLES"
              ]
            }
          },
          "last_updated": {
            "type": "string",
            "description": "Timestamp when this EVSE or one of its Connectors was last updated (or created).",
            "format": "date-time"
          }
        },
        "description": "The EVSE object describes the part that controls the power supply to a single EV in a single session. It always belongs to a Location object. The object only contains directions to get from the location itself to the EVSE (i.e. floor, physical_reference or directions)."
      },
      "ExceptionalPeriod": {
        "required": [
          "period_begin",
          "period_end"
        ],
        "type": "object",
        "properties": {
          "period_begin": {
            "type": "string",
            "description": "Begin of the exception. SecurityScheme.In UTC, time_zone field can be used to convert to local time.",
            "format": "date-time",
            "example": "2022-06-24T00:00:00Z"
          },
          "period_end": {
            "type": "string",
            "description": "End of the exception. In UTC, time_zone field can be used to convert to local time.",
            "format": "date-time",
            "example": "2022-06-25T00:00:00Z"
          }
        },
        "description": "Specifies one exceptional period for opening or access hours."
      },
      "Hours": {
        "required": [
          "twentyfourseven"
        ],
        "type": "object",
        "properties": {
          "twentyfourseven": {
            "type": "boolean",
            "description": "True to represent 24 hours a day and 7 days a week, except the given exceptions.",
            "example": false
          },
          "regular_hours": {
            "type": "array",
            "description": "Regular hours, weekday-based. Only to be used if twentyfourseven=false, then this field needs to contain at least one RegularHours object.",
            "items": {
              "$ref": "#/components/schemas/RegularHours"
            }
          },
          "exceptional_openings": {
            "type": "array",
            "description": "Exceptions for specified calendar dates, time-range based. Periods the station is operating/accessible. Additional to regular_hours. May overlap regular rules.",
            "items": {
              "$ref": "#/components/schemas/ExceptionalPeriod"
            }
          },
          "exceptional_closings": {
            "type": "array",
            "description": "Exceptions for specified calendar dates, time-range based. Periods the station is not operating/accessible. Overwriting regular_hours and exceptional_openings. Should not overlap exceptional_openings.",
            "items": {
              "$ref": "#/components/schemas/ExceptionalPeriod"
            }
          }
        },
        "description": "Opening and access hours of the location."
      },
      "Image": {
        "required": [
          "category",
          "type",
          "url"
        ],
        "type": "object",
        "properties": {
          "url": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "URL from where the image data can be fetched through a web browser."
          },
          "thumbnail": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "URL from where a thumbnail of the image can be fetched through a web browser."
          },
          "category": {
            "type": "string",
            "description": "Describes what the image is used for.",
            "example": "CHARGER",
            "enum": [
              "CHARGER",
              "ENTRANCE",
              "LOCATION",
              "NETWORK",
              "OPERATOR",
              "OTHER",
              "OWNER"
            ]
          },
          "type": {
            "maxLength": 4,
            "minLength": 0,
            "type": "string",
            "description": "Image type",
            "example": "gif,jpeg,png,svg"
          },
          "width": {
            "type": "integer",
            "description": "Width of the full scale image.",
            "format": "int32"
          },
          "height": {
            "type": "integer",
            "description": "Height of the full scale image.",
            "format": "int32"
          }
        },
        "description": "Links to images related to the EVSE such as photos or logos."
      },
      "Location": {
        "required": [
          "address",
          "city",
          "coordinates",
          "country",
          "country_code",
          "id",
          "last_updated",
          "party_id",
          "publish",
          "time_zone"
        ],
        "type": "object",
        "properties": {
          "publish": {
            "type": "boolean",
            "description": "Defines if a Location may be published on an website or app etc.\nWhen this is set to false, only tokens identified in the field: publish_allowed_to are allowed to be shown this Location.\nWhen the same location has EVSEs that may be published and may not be published, two 'Locations' should be created."
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Display name of the location."
          },
          "address": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "Street/block name and house number if available."
          },
          "city": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "City or town."
          },
          "state": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "State or province of the location, only to be used when relevant."
          },
          "country": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "ISO 3166-1 alpha-3 code for the country of this location."
          },
          "coordinates": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "relatedLocations": {
            "type": "array",
            "description": "Geographical location of related points relevant to the user.",
            "items": {
              "$ref": "#/components/schemas/AdditionalGeoLocation"
            }
          },
          "parkingType": {
            "type": "string",
            "description": "The general type of parking at the charge point location.",
            "enum": [
              "ALONG_MOTORWAY",
              "PARKING_GARAGE",
              "PARKING_LOT",
              "ON_DRIVEWAY",
              "ON_STREET",
              "UNDERGROUND_GARAGE"
            ]
          },
          "directions": {
            "type": "array",
            "description": "Human-readable directions on how to reach the location.",
            "items": {
              "$ref": "#/components/schemas/DisplayText"
            }
          },
          "operator": {
            "$ref": "#/components/schemas/BusinessDetails"
          },
          "suboperator": {
            "$ref": "#/components/schemas/BusinessDetails"
          },
          "owner": {
            "$ref": "#/components/schemas/BusinessDetails"
          },
          "facilities": {
            "type": "array",
            "description": "Optional list of facilities this charging location directly belongs to.",
            "items": {
              "type": "string",
              "description": "Optional list of facilities this charging location directly belongs to.",
              "enum": [
                "HOTEL",
                "RESTAURANT",
                "CAFE",
                "MALL",
                "SUPERMARKET",
                "SPORT",
                "RECREATION_AREA",
                "NATURE",
                "MUSEUM",
                "BIKE_SHARING",
                "BUS_STOP",
                "TAXI_STAND",
                "TRAM_STOP",
                "METRO_STATION",
                "TRAIN_STATION",
                "AIRPORT",
                "PARKING_LOT",
                "CARPOOL_PARKING",
                "FUEL_STATION",
                "WIFI"
              ]
            }
          },
          "images": {
            "type": "array",
            "description": "Links to images related to the location such as photos or logos.",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "amenities": {
            "type": "array",
            "description": "Amenities at the charging station.",
            "items": {
              "$ref": "#/components/schemas/Amenity"
            }
          },
          "rating": {
            "$ref": "#/components/schemas/RatingDto"
          },
          "provider": {
            "type": "string",
            "description": "Specifies which provider is used.",
            "example": "VIRTA"
          },
          "country_code": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "ISO-3166 alpha-2 country code of the CPO that 'owns' this Location.",
            "example": "DE"
          },
          "party_id": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "CPO ID of the CPO that 'owns' this Location (following the ISO-15118 standard)."
          },
          "id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the location within the CPOs platform (and suboperator platforms). This field can never be changed, modified or renamed."
          },
          "publish_allowed_to": {
            "type": "array",
            "description": "This field may only be used when the publish field is set to false\nOnly owners of Tokens that match all the set fields of one PublishToken in the list are allowed to be shown this location.",
            "items": {
              "$ref": "#/components/schemas/PublishTokenType"
            }
          },
          "postal_code": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Postal code of the location, may only be omitted when the location has no postal code: in some countries charging locations at highways don’t have postal codes."
          },
          "evses": {
            "type": "array",
            "description": "List of EVSEs that belong to this Location.",
            "items": {
              "$ref": "#/components/schemas/Evse"
            }
          },
          "time_zone": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "One of IANA tzdata’s TZ-values representing the time zone of the location.",
            "example": "\"Europe/Oslo\", \"Europe/Zurich\". (http://www.iana.org/time-zones)"
          },
          "opening_times": {
            "$ref": "#/components/schemas/Hours"
          },
          "charging_when_closed": {
            "type": "boolean",
            "description": "Indicates if the EVSEs are still charging outside the opening hours of the location. E.g. when the parking garage closes its barriers over night, is it allowed to charge till the next morning? Default: true"
          },
          "energy_mix": {
            "$ref": "#/components/schemas/EnergyMix"
          },
          "last_updated": {
            "type": "string",
            "description": "Timestamp when this Location or one of its EVSEs or Connectors were last updated (or created).",
            "format": "date-time"
          },
          "payment_services": {
            "type": "array",
            "description": "The supported payment services at the charging station.",
            "items": {
              "$ref": "#/components/schemas/PaymentService"
            }
          },
          "charging_point_operator": {
            "$ref": "#/components/schemas/ChargingPointOperator"
          }
        },
        "description": "The Location object describes the location and its properties where a group of EVSEs that belong together are installed. Typically, the Location object is the exact location of the group of EVSEs, but it can also be the entrance of a parking garage which contains these EVSEs. The exact way to reach each EVSE can be further specified by its own properties."
      },
      "LocationDistance": {
        "type": "object",
        "properties": {
          "distance": {
            "type": "number",
            "description": "The distance in meters",
            "format": "double",
            "example": 3644.95
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          }
        },
        "description": "The list of locations around the geo coordinate and the air distance in meters."
      },
      "LocationReviewOptionWithCountDto": {
        "type": "object",
        "properties": {
          "option": {
            "type": "string",
            "description": "Selected option",
            "enum": [
              "CLEAN",
              "NOT_CLEAN",
              "EASY",
              "NOT_EASY",
              "NO_FUNCTIONALITY",
              "RECOMMENDED",
              "NOT_RECOMMENDED",
              "GOOD",
              "NOT_GOOD",
              "NO_CARD",
              "AMENITIES",
              "NO_AMENITIES",
              "CABLE",
              "NO_CABLE",
              "PRIVATE",
              "SEMI_PRIVATE",
              "PUBLIC"
            ]
          },
          "count": {
            "type": "integer",
            "description": "The number of reviews for the selected option",
            "format": "int64"
          }
        },
        "description": "The list of ratings with count"
      },
      "LocationReviewOptionWithDateDto": {
        "type": "object",
        "properties": {
          "option": {
            "type": "string",
            "description": "The option value",
            "enum": [
              "CLEAN",
              "NOT_CLEAN",
              "EASY",
              "NOT_EASY",
              "NO_FUNCTIONALITY",
              "RECOMMENDED",
              "NOT_RECOMMENDED",
              "GOOD",
              "NOT_GOOD",
              "NO_CARD",
              "AMENITIES",
              "NO_AMENITIES",
              "CABLE",
              "NO_CABLE",
              "PRIVATE",
              "SEMI_PRIVATE",
              "PUBLIC"
            ]
          },
          "date_submitted": {
            "type": "string",
            "description": "The date when the option is submitted",
            "format": "date-time"
          }
        },
        "description": "Latest 5 reviews"
      },
      "PaymentService": {
        "required": [
          "name",
          "provider",
          "uuid"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "The UUID of the payment service.",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "provider": {
            "type": "string",
            "description": "The name of the payment service provider",
            "example": "Acme Corporation"
          },
          "name": {
            "type": "string",
            "description": "The name of the payment service.",
            "example": "Acme Charging Service"
          }
        },
        "description": "The supported payment services at the charging station."
      },
      "PublishTokenType": {
        "type": "object",
        "properties": {
          "uid": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Unique ID by which this Token can be identified.",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "Type of the token.",
            "nullable": true,
            "example": "RFID",
            "enum": [
              "AD_HOC_USER",
              "APP_USER",
              "OTHER",
              "RFID"
            ]
          },
          "issuer": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Issuing company, most of the times the name of the company printed on thetoken (RFID card), not necessarily the eMSP.",
            "nullable": true
          },
          "visual_number": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Visual readable number/identification as printed on the Token (RFID card).",
            "nullable": true
          },
          "group_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "This ID groups a couple of tokens. This can be used to make two or more tokens work as one.",
            "nullable": true
          }
        },
        "description": "Defines the set of values that identify a token to which a Location might be published.At least one of the following fields SHALL be set: uid, visual_number, or group_id.When uid is set, type SHALL also be set.When visual_number is set, issuer SHALL also be set."
      },
      "RatingDto": {
        "type": "object",
        "properties": {
          "stars": {
            "type": "integer",
            "description": "The average number of stars for the charging station",
            "format": "int32",
            "example": 3
          },
          "charging_station_id": {
            "type": "string",
            "description": "The ID of the charging station"
          },
          "review_statistics": {
            "type": "array",
            "description": "The list of ratings with count",
            "items": {
              "$ref": "#/components/schemas/LocationReviewOptionWithCountDto"
            }
          },
          "number_of_reviews": {
            "type": "integer",
            "description": "The number of reviews for the charging station",
            "format": "int32",
            "example": 127
          },
          "problem_reported": {
            "type": "boolean",
            "description": "Indicates if the problem is reported within 72 hours"
          },
          "date_problem_reported": {
            "type": "string",
            "description": "Date when the problem is reported withing 72 hours, otherwise null",
            "format": "date-time"
          },
          "latest_reviews": {
            "type": "array",
            "description": "Latest 5 reviews",
            "items": {
              "$ref": "#/components/schemas/LocationReviewOptionWithDateDto"
            }
          }
        },
        "description": "Rating information for location."
      },
      "RegularHours": {
        "required": [
          "period_begin",
          "period_end",
          "weekday"
        ],
        "type": "object",
        "properties": {
          "weekday": {
            "type": "integer",
            "description": "Number of day in the week, from Monday (1) till Sunday (7)",
            "format": "int32",
            "example": 1
          },
          "period_begin": {
            "maxLength": 5,
            "minLength": 0,
            "pattern": "([0-1][0-9]|2[0-3]):[0-5][0-9]",
            "type": "string",
            "description": "Begin of the regular period, in local time, given in hours and minutes. Must be in 24h format with leading zeros. Example: \"18:15\". Hour/Minute separator: \":\" Regex: ([0-1][0-9]|2[0-3]):[0-5][0-9].",
            "example": "07:00"
          },
          "period_end": {
            "maxLength": 5,
            "minLength": 0,
            "pattern": "([0-1][0-9]|2[0-3]):[0-5][0-9]",
            "type": "string",
            "description": "End of the regular period, in local time, syntax as for period_begin. Must be later than period_begin.",
            "example": "18:00"
          }
        },
        "description": "Regular recurring operation or access hours."
      },
      "StatusSchedule": {
        "required": [
          "period_begin",
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status value during the scheduled period.",
            "enum": [
              "AVAILABLE",
              "BLOCKED",
              "CHARGING",
              "INOPERATIVE",
              "OUTOFORDER",
              "PLANNED",
              "REMOVED",
              "RESERVED",
              "UNKNOWN"
            ]
          },
          "period_begin": {
            "type": "string",
            "description": "Begin of the scheduled period.",
            "format": "date-time"
          },
          "period_end": {
            "type": "string",
            "description": "End of the scheduled period, if known.",
            "format": "date-time"
          }
        },
        "description": "This type is used to schedule status periods in the future. The eMSP can provide this information to the EV user for trip planning purposes. A period MAY have no end. Example: \"This station will be running as of tomorrow. Today it is still planned and under construction.\""
      },
      "AroundGeoLocationRequest": {
        "required": [
          "geo_location"
        ],
        "type": "object",
        "properties": {
          "geo_location": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "filter_connector_types": {
            "type": "array",
            "description": "Optional filter for connector types",
            "items": {
              "type": "string",
              "description": "Optional filter for connector types",
              "enum": [
                "CHADEMO",
                "DOMESTIC_A",
                "DOMESTIC_B",
                "DOMESTIC_C",
                "DOMESTIC_D",
                "DOMESTIC_E",
                "DOMESTIC_F",
                "DOMESTIC_G",
                "DOMESTIC_H",
                "DOMESTIC_I",
                "DOMESTIC_J",
                "DOMESTIC_K",
                "DOMESTIC_L",
                "IEC_60309_2_single_16",
                "IEC_60309_2_three_16",
                "IEC_60309_2_three_32",
                "IEC_60309_2_three_64",
                "IEC_62196_T1",
                "IEC_62196_T1_COMBO",
                "IEC_62196_T2",
                "IEC_62196_T2_COMBO",
                "IEC_62196_T3A",
                "IEC_62196_T3C",
                "NEMA_5_20",
                "NEMA_6_30",
                "NEMA_6_50",
                "NEMA_10_30",
                "NEMA_10_50",
                "NEMA_14_30",
                "NEMA_14_50",
                "PANTOGRAPH_BOTTOM_UP",
                "PANTOGRAPH_TOP_DOWN",
                "TESLA_R",
                "TESLA_S",
                "TESLA_D",
                "GBT_AC",
                "GBT_DC",
                "UNKNOWN"
              ]
            }
          },
          "filter_amenities": {
            "type": "array",
            "description": "Optional filter for amenities",
            "items": {
              "type": "string",
              "description": "Optional filter for amenities",
              "enum": [
                "FAST_FOOD",
                "RESTAURANT",
                "CAFE",
                "SHOPPING",
                "GROCERY_SHOPPING",
                "SIGHTSEEING",
                "LEISURE",
                "DRINKS",
                "TOILETS",
                "HOTEL",
                "MALL",
                "SUPERMARKET",
                "SPORT",
                "RECREATION_AREA",
                "NATURE",
                "MUSEUM",
                "BIKE_SHARING",
                "BUS_STOP",
                "TAXI_STAND",
                "TRAM_STOP",
                "METRO_STATION",
                "TRAIN_STATION",
                "AIRPORT",
                "PARKING_LOT",
                "CARPOOL_PARKING",
                "FUEL_STATION",
                "WIFI"
              ]
            }
          },
          "filter_fast_charger": {
            "type": "boolean",
            "description": "Optional filter for fast chargers (50kW+). The connector type(s) need(s) to be specified."
          },
          "max_results": {
            "maximum": 50,
            "minimum": 1,
            "type": "integer",
            "description": "The maximum number of results",
            "format": "int32",
            "example": 5,
            "default": 10
          }
        },
        "description": "The around geo location request"
      },
      "ChargingCurveRequest": {
        "required": [
          "charging_power",
          "vehicle_uuid"
        ],
        "type": "object",
        "properties": {
          "vehicle_uuid": {
            "type": "string",
            "description": "Vehicle  uuid",
            "example": "67e7dfdf-3757-4479-a905-3bbacb75490a"
          },
          "state_of_charge": {
            "type": "integer",
            "description": "State of charge with values from 1% to 100% in steps of 1%-points",
            "format": "int32",
            "example": 53
          },
          "charging_power": {
            "minimum": 1,
            "exclusiveMinimum": false,
            "type": "number",
            "description": "Charging power per 1%-point of the state of charge ",
            "example": 112
          }
        }
      },
      "BillingAddress": {
        "required": [
          "address",
          "city",
          "country",
          "postalCode"
        ],
        "type": "object",
        "properties": {
          "city": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "City or Town.",
            "example": "Athens"
          },
          "address": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "Street/Block name and House Number if available.",
            "example": "F.Rooseveltlan 23"
          },
          "postalCode": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Postal code of the location.",
            "example": "9000"
          },
          "country": {
            "maxLength": 3,
            "minLength": 1,
            "type": "string",
            "description": "ISO 3166-1 alpha-3 code for the country of this location.",
            "example": "GER"
          }
        },
        "description": "Holds the billing Address details of a user"
      },
      "BillingCreateRequest": {
        "required": [
          "billingAddress",
          "companyName",
          "firstName",
          "lastName",
          "paymentCapabilities"
        ],
        "type": "object",
        "properties": {
          "companyName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "The name of the company",
            "example": "EnergyStacks GmbH"
          },
          "firstName": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string",
            "description": "The first name of the user",
            "example": "John"
          },
          "lastName": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string",
            "description": "The last name of the user",
            "example": "Doe"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/BillingAddress"
          },
          "paymentCapabilities": {
            "type": "array",
            "description": "The payment capabilities of a user",
            "items": {
              "type": "string",
              "description": "The payment capabilities of a user",
              "enum": [
                "CHARGING_PROFILE_CAPABLE",
                "CHARGING_PREFERENCES_CAPABLE",
                "CHIP_CARD_SUPPORT",
                "CONTACTLESS_CARD_SUPPORT",
                "CREDIT_CARD_PAYABLE",
                "DEBIT_CARD_PAYABLE",
                "PED_TERMINAL",
                "REMOTE_START_STOP_CAPABLE",
                "RESERVABLE",
                "RFID_READER",
                "START_SESSION_CONNECTOR_REQUIRED",
                "TOKEN_GROUP_CAPABLE",
                "UNLOCK_CAPABLE"
              ]
            }
          }
        }
      },
      "VehicleResponse": {
        "type": "object",
        "properties": {
          "vehicle_id": {
            "type": "string",
            "description": "The UUID of the vehicle",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "manufacturer": {
            "type": "string",
            "description": "The vehicle brand name",
            "example": "Porsche"
          },
          "model": {
            "type": "string",
            "description": "The model name",
            "example": "Taycan"
          },
          "vehicle_variant": {
            "type": "string",
            "description": "The model variant",
            "example": "Turbo"
          }
        }
      },
      "VehicleDetailedResponse": {
        "required": [
          "uuid"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Vehicle UUID",
            "example": "67e7dfdf-3757-4479-a905-3bbacb75490a"
          },
          "brand_name": {
            "type": "string",
            "description": "Vehicle brand name",
            "example": "Mercedes"
          },
          "brand_uuid": {
            "type": "string",
            "description": "Vehicle brand uuid. Used to fetch brand image",
            "example": "67e7dfdf-3757-4479-a905-3bbacb75490a"
          },
          "model": {
            "type": "string",
            "description": "Vehicle model",
            "example": "AMG"
          },
          "variant": {
            "type": "string",
            "description": "Vehicle variant",
            "example": "GT"
          },
          "vehicle_region": {
            "type": "string",
            "description": "Vehicle region",
            "example": "EU"
          },
          "vehicle_class": {
            "type": "string",
            "description": "Vehicle class",
            "example": "PV"
          },
          "electric_vehicle_data": {
            "$ref": "#/components/schemas/ElectricVehicleData"
          },
          "combustion_engine_vehicle_data": {
            "$ref": "#/components/schemas/CombustionEngineVehicleData"
          },
          "consumption_city_cold": {
            "type": "number",
            "description": "Consumption in city driving conditions in cold weather",
            "example": 13.03
          },
          "consumption_city_mild": {
            "type": "number",
            "description": "Consumption in city driving conditions in mild weather",
            "example": 10.08
          },
          "consumption_highway_cold": {
            "type": "number",
            "description": "Consumption in highway driving conditions in cold weather",
            "example": 18.6
          },
          "consumption_highway_mild": {
            "type": "number",
            "description": "Consumption in highway driving conditions in mild weather",
            "example": 17.49
          },
          "vehicle_weight_empty": {
            "type": "number",
            "description": "Weight of an empty vehicle",
            "format": "double",
            "example": 1760
          },
          "efficiency_factor_uphill": {
            "type": "number",
            "description": "Efficiency factor during uphill ascent",
            "format": "double",
            "example": 1.1
          },
          "efficiency_factor_downhill": {
            "type": "number",
            "description": "Efficiency factor during downhill descent",
            "format": "double",
            "example": 0.9
          },
          "has_variant_image": {
            "type": "boolean",
            "description": "Defines if a vehicle has a variant image",
            "example": true
          },
          "co2_savings": {
            "type": "number",
            "description": "CO2 savings in grams per km",
            "format": "double",
            "example": 250.2
          },
          "height": {
            "type": "number",
            "description": "Vehicle height",
            "format": "double",
            "example": 2.3
          },
          "width": {
            "type": "number",
            "description": "Vehicle width",
            "format": "double",
            "example": 2.1
          },
          "length": {
            "type": "number",
            "description": "Vehicle length",
            "format": "double",
            "example": 9
          },
          "max_gross_weight": {
            "type": "number",
            "description": "Vehicle maximum gross weight",
            "format": "double",
            "example": 2000
          },
          "max_loading_volume": {
            "type": "number",
            "description": "Vehicle maximum loading volume",
            "format": "double",
            "example": 3.14
          },
          "max_loading_height": {
            "type": "number",
            "description": "Vehicle maximum loading height",
            "format": "double",
            "example": 1.8
          },
          "max_loading_width": {
            "type": "number",
            "description": "Vehicle maximum loading width",
            "format": "double",
            "example": 2.46
          },
          "max_loading_length": {
            "type": "number",
            "description": "Vehicle maximum loading length",
            "format": "double",
            "example": 2.6
          }
        },
        "description": "Defines the core information of a vehicle."
      },
      "VehicleChargingCurveResponse": {
        "type": "object",
        "properties": {
          "state_of_charge": {
            "type": "integer",
            "description": "State of charge with values from 1% to 100% in steps of 1%-points",
            "format": "int32",
            "example": 53
          },
          "charging_power": {
            "type": "number",
            "description": "Charging power per 1%-point of the state of charge ",
            "format": "double",
            "example": 112
          },
          "charging_time": {
            "type": "number",
            "description": "Charging time in seconds",
            "example": 25.67
          }
        }
      },
      "BrandResponse": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "The UUID of the vehicle brand",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "brand_name": {
            "type": "string",
            "description": "The vehicle brand name",
            "example": "Porsche"
          },
          "has_brand_image": {
            "type": "string",
            "description": "Vehicle has a brand image",
            "example": "true"
          }
        }
      },
      "FavoriteChargingStations": {
        "type": "object",
        "properties": {
          "charging_station_ids": {
            "type": "array",
            "description": "The list of charging station IDs",
            "items": {
              "type": "string",
              "description": "The list of charging station IDs"
            }
          }
        }
      },
      "Address": {
        "required": [
          "address_type",
          "coordinates",
          "name",
          "uuid"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "description": "The UUID of the address",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "name": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string",
            "description": "The name of address",
            "example": "ACME Corp"
          },
          "coordinates": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "address_type": {
            "type": "string",
            "description": "The type of address",
            "example": "HOME",
            "enum": [
              "HOME",
              "WORK",
              "ADDRESS"
            ]
          }
        },
        "description": "The list of favorite addresses"
      },
      "FavoriteAddresses": {
        "type": "object",
        "properties": {
          "addresses": {
            "type": "array",
            "description": "The list of favorite addresses",
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          }
        }
      },
      "CdrDimension": {
        "required": [
          "type",
          "volume"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of CDR dimension.",
            "example": "RESERVATION_TIME",
            "enum": [
              "CURRENT",
              "ENERGY",
              "ENERGY_EXPORT",
              "ENERGY_IMPORT",
              "MAX_CURRENT",
              "MIN_CURRENT",
              "MAX_POWER",
              "MIN_POWER",
              "PARKING_TIME",
              "POWER",
              "RESERVATION_TIME",
              "STATE_OF_CHARGE",
              "TIME"
            ]
          },
          "volume": {
            "type": "number",
            "description": "Volume of the dimension consumed, measured according to the dimension type.",
            "example": 79.65
          }
        },
        "description": "List of relevant values for this charging period."
      },
      "CdrToken": {
        "required": [
          "contract_id",
          "country_code",
          "party_id",
          "type",
          "uid"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Unique ID by which this Token can be identified. This is the field used by the CPO’s system (RFID reader on the Charge Point) to identify this token. Currently, in most cases: type=RFID, this is the RFID hidden ID as read by the RFID reader, but that is not a requirement. If this is a <b>type=APP_USER</b> Token, it will be a unique, by the eMSP, generated ID.",
            "example": "LKnPKAYKvf"
          },
          "country_code": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "Country code of the MSP that 'owns' this Token.",
            "example": "DE"
          },
          "party_id": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "ID of the eMSP that 'owns' this Token.",
            "example": "ERG"
          },
          "type": {
            "type": "string",
            "description": "    The type of token\n    * <p>\n    * NOTE: The eMSP is RECOMMENDED to push Tokens with type: AD_HOC_USER or APP_USER with whitelist set to\n    * NEVER. Whitelists are very useful for RFID type Tokens, but the AD_HOC_USER/APP_USER Tokens are used to\n    * start Sessions from an App etc. so whitelisting them has no advantages.\n    * </p>\n",
            "example": "RFID",
            "enum": [
              "AD_HOC_USER",
              "APP_USER",
              "OTHER",
              "RFID"
            ]
          },
          "contract_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the EV driver contract token within the eMSP’s platform (and suboperator platforms). Recommended to follow the specification for eMA ID from eMI3 standard version V1.0 (http://emi3group.com/documents-links/) Part 2: business objects.",
            "example": "DE8ACC12E46L89"
          }
        },
        "description": "Token used to start this charging session, includes all the relevant information to identify the unique token."
      },
      "ChargingPeriod": {
        "required": [
          "dimensions",
          "start_date_time"
        ],
        "type": "object",
        "properties": {
          "dimensions": {
            "type": "array",
            "description": "List of relevant values for this charging period.",
            "items": {
              "$ref": "#/components/schemas/CdrDimension"
            }
          },
          "start_date_time": {
            "type": "string",
            "description": "Start timestamp of the charging period. A period ends when the next period starts. The last period ends when the session ends.",
            "format": "date-time"
          },
          "tariff_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Unique identifier of the Tariff that is relevant for this Charging Period. If not provided, no Tariff is relevant during this period.",
            "example": "901c4ba9-e275-4b2a-b0ed-3a1ac710b25c"
          }
        },
        "description": "A Charging Period consists of a start timestamp and a list of possible values that influence this period, for example: amount of energy charged this period, maximum current during this period etc."
      },
      "Price": {
        "required": [
          "excl_vat"
        ],
        "type": "object",
        "properties": {
          "excl_vat": {
            "type": "number",
            "description": "Price/Cost excluding VAT.",
            "example": 87.31
          },
          "incl_vat": {
            "type": "number",
            "description": "Price/Cost including VAT.",
            "example": 101.88
          }
        },
        "description": "Total sum of all the cost related to a reservation of a Charge Point, including fixed price components, in the specified currency."
      },
      "Session": {
        "required": [
          "auth_method",
          "cdr_token",
          "connector_id",
          "country_code",
          "currency",
          "evse_uid",
          "id",
          "kwh",
          "last_updated",
          "location_id",
          "party_id",
          "start_date_time",
          "status"
        ],
        "type": "object",
        "properties": {
          "kwh": {
            "type": "number",
            "description": "How many kWh were charged.",
            "example": 154
          },
          "status": {
            "type": "string",
            "description": "The status of the session.",
            "example": "PENDING",
            "enum": [
              "ACTIVE",
              "COMPLETED",
              "INVALID",
              "PENDING",
              "RESERVATION"
            ]
          },
          "country_code": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "ISO-3166 alpha-2 country code of the CPO that 'owns' this Session.",
            "example": "NL"
          },
          "party_id": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "CPO ID of the CPO that 'owns' this Session (following the ISO-15118 standard).",
            "example": "STK"
          },
          "id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "The unique id that identifies the charging session in the CPO platform.",
            "example": "101"
          },
          "start_date_time": {
            "type": "string",
            "description": "The timestamp when the session became ACTIVE in the Charge Point.",
            "format": "date-time"
          },
          "end_date_time": {
            "type": "string",
            "description": "The timestamp when the session was completed/finished, charging might have finished before the session ends, for example: EV is full, but parking cost also has to be paid.",
            "format": "date-time"
          },
          "cdr_token": {
            "$ref": "#/components/schemas/CdrToken"
          },
          "auth_method": {
            "type": "string",
            "description": "Method used for authentication.",
            "example": "WHITELIST",
            "enum": [
              "AUTH_REQUEST",
              "COMMAND",
              "WHITELIST"
            ]
          },
          "authorization_reference": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Reference to the authorization given by the eMSP."
          },
          "location_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Location.id of the Location object of this CPO, on which the charging session is/was happening.",
            "example": "LOC1"
          },
          "evse_uid": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "EVSE.uid of the EVSE of this Location on which the charging session is/was happening.",
            "example": "3256"
          },
          "connector_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Connector.id of the Connector of this Location the charging session is/was happening.",
            "example": "1"
          },
          "meter_id": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Optional identification of the kWh meter."
          },
          "currency": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "ISO 4217 code of the currency used for this session.",
            "example": "EUR"
          },
          "charging_periods": {
            "type": "array",
            "description": "An optional list of Charging Periods that can be used to calculate and verify the total cost.",
            "items": {
              "$ref": "#/components/schemas/ChargingPeriod"
            }
          },
          "total_cost": {
            "$ref": "#/components/schemas/Price"
          },
          "last_updated": {
            "type": "string",
            "description": "Timestamp when this Session was last updated (or created).",
            "format": "date-time",
            "example": "2021-03-19T14:11:43Z"
          }
        },
        "description": "The Session object describes one charging session. That doesn’t mean it is required that energy has been transferred between EV and the Charge Point. It is possible that the EV never took energy from the Charge Point because it was instructed not to take energy by the driver. But as the EV was connected to the Charge Point, some form of start tariff, park tariff or reservation cost might be relevant."
      },
      "PriceComponent": {
        "required": [
          "price",
          "step_size",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of tariff dimension.",
            "enum": [
              "ENERGY",
              "FLAT",
              "PARKING_TIME",
              "TIME"
            ]
          },
          "price": {
            "type": "number",
            "description": "Price per unit (excl. VAT) for this tariff dimension.",
            "example": 2
          },
          "vat": {
            "type": "number",
            "description": "Applicable VAT percentage for this tariff dimension. If omitted, no VAT is applicable. Not providing a VAT is different from 0% VAT, which would be a value of 0.0 here.",
            "example": 10
          },
          "step_size": {
            "type": "integer",
            "description": "Minimum amount to be billed. This unit will be billed in this step_size blocks. Amounts that are less then this step_size are rounded up to the given step_size. For example: if type is TIME and step_size has a value of 300, then time will be billed in blocks of 5 minutes. If 6 minutes were used, 10 minutes (2 blocks of step_size) will be billed.",
            "format": "int32",
            "example": 300
          }
        },
        "description": "List of price components that describe the pricing of a tariff."
      },
      "Tariff": {
        "required": [
          "country_code",
          "currency",
          "elements",
          "id",
          "last_updated",
          "party_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the tariff within the CPO’s platform (and suboperator platforms).",
            "example": "12"
          },
          "currency": {
            "type": "string",
            "description": "ISO-4217 code of the currency of this tariff.",
            "example": "EUR"
          },
          "type": {
            "type": "string",
            "description": "Defines the type of the tariff. This allows for distinction in case of given Charging Preferences. When omitted, this tariff is valid for all sessions.",
            "example": "REGULAR",
            "enum": [
              "AD_HOC_PAYMENT",
              "PROFILE_CHEAP",
              "PROFILE_FAST",
              "PROFILE_GREEN",
              "REGULAR"
            ]
          },
          "elements": {
            "type": "array",
            "description": "List of Tariff Elements.",
            "items": {
              "$ref": "#/components/schemas/TariffElement"
            }
          },
          "country_code": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "ISO-3166 alpha-2 country code of the CPO that owns this Tariff.",
            "example": "BE"
          },
          "party_id": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "CPO ID of the CPO that owns this Tariff (following the ISO-15118 standard).",
            "example": "BEC"
          },
          "tariff_alt_text": {
            "type": "array",
            "description": "List of multi-language alternative tariff info texts.",
            "items": {
              "$ref": "#/components/schemas/DisplayText"
            }
          },
          "tariff_alt_url": {
            "type": "string",
            "description": "URL to a web page that contains an explanation of the tariff information in human readable form.",
            "example": "https://www.example.com/tariff"
          },
          "min_price": {
            "$ref": "#/components/schemas/Price"
          },
          "max_price": {
            "$ref": "#/components/schemas/Price"
          },
          "start_date_time": {
            "type": "string",
            "description": "The time when this tariff becomes active, in UTC, time_zone field of the Location can be used to convert to local time. Typically used for a new tariff that is already given with the location, before it becomes active.",
            "format": "date-time",
            "example": "2021-03-19T14:11:43Z"
          },
          "end_date_time": {
            "type": "string",
            "description": "The time after which this tariff is no longer valid, in UTC, time_zone field if the Location can be used to convert to local time. Typically used when this tariff is going to be replaced with a different tariff in the near future.",
            "format": "date-time",
            "example": "2021-03-19T14:11:43Z"
          },
          "energy_mix": {
            "$ref": "#/components/schemas/EnergyMix"
          },
          "last_updated": {
            "type": "string",
            "description": "Timestamp when this Tariff was last updated (or created).",
            "format": "date-time",
            "example": "2021-03-19T14:11:43Z"
          }
        },
        "description": "A Tariff object consists of a list of one or more Tariff Elements, which can be used to create complex Tariff structures."
      },
      "TariffElement": {
        "required": [
          "price_components"
        ],
        "type": "object",
        "properties": {
          "restrictions": {
            "$ref": "#/components/schemas/TariffRestrictions"
          },
          "price_components": {
            "type": "array",
            "description": "List of price components that describe the pricing of a tariff.",
            "items": {
              "$ref": "#/components/schemas/PriceComponent"
            }
          }
        },
        "description": "List of Tariff Elements."
      },
      "TariffResponse": {
        "required": [
          "connectorId",
          "regularTariff"
        ],
        "type": "object",
        "properties": {
          "connectorId": {
            "type": "string",
            "description": "The connector id",
            "example": "1"
          },
          "regularTariff": {
            "$ref": "#/components/schemas/Tariff"
          },
          "customTariff": {
            "$ref": "#/components/schemas/Tariff"
          }
        },
        "description": "A TariffResponse object consisting of a connector id and the corresponding tariff objects which define pricing rules."
      },
      "TariffRestrictions": {
        "type": "object",
        "properties": {
          "reservation": {
            "type": "string",
            "description": "When this field is present, the TariffElement describes reservation costs. A reservation starts when the reservation is made, and ends when the driver starts charging on the reserved EVSE/Location, or when the reservation expires. A reservation can only have: FLAT and TIME TariffDimensions, where TIME is for the duration of the reservation.",
            "enum": [
              "RESERVATION",
              "RESERVATION_EXPIRES"
            ]
          },
          "start_time": {
            "maxLength": 5,
            "minLength": 0,
            "type": "string",
            "description": "Start time of day in local time, the time zone is defined in the time_zone field of the Location, for example 13:30, valid from this time of the day. Must be in 24h format with leading zeros.Hour/Minute separator: \":\" Regex: ([0-1][0-9]|2[0-3]):[0-5][0-9]",
            "example": "13:30"
          },
          "end_time": {
            "maxLength": 5,
            "minLength": 0,
            "type": "string",
            "description": "End time of day in local time, the time zone is defined in the time_zone field of the Location, for example 19:45, valid until this time of the day. Same syntax as start_time. If end_time < start_time then the period wraps around to the next day. To stop at end of the day use: 00:00."
          },
          "start_date": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Start date in local time, the time zone is defined in the time_zone field of the Location, for example: 2015-12-24, valid from this day (inclusive).Regex: ([12][0-9]{3})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])",
            "example": "2023-12-24"
          },
          "end_date": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "End date in local time, the time zone is defined in the time_zone field of theLocation, for example: 2015-12-27, valid until this day (exclusive).Same syntax as start_date.",
            "example": "2023-12-27"
          },
          "min_kwh": {
            "type": "number",
            "description": "Minimum consumed energy in kWh, for example 20, valid from this amount of energy (inclusive) being used.",
            "example": 1
          },
          "max_kwh": {
            "type": "number",
            "description": "Maximum consumed energy in kWh, for example 50, valid until this amount of energy (exclusive) being used.",
            "example": 1
          },
          "min_current": {
            "type": "number",
            "description": "Sum of the minimum current (in Amperes) over all phases, for example 5. When the EV is charging with more than, or equal to, the defined amount of current, this TariffElement is/becomes active. If the charging current is or becomes lower, this TariffElement is not or no longer valid and becomes inactive. This describes NOT the minimum current over the entire Charging Session. This restriction can make a TariffElement become active when the charging current is above the defined value, but the TariffElement MUST no longer be active when the charging current drops below the defined value."
          },
          "max_current": {
            "type": "number",
            "description": "Sum of the maximum current (in Amperes) over all phases, for example 20. When the EV is charging with less than the defined amount of current, this TariffElement becomes/is active. If the charging current is or becomes higher, this TariffElement is not or no longer valid and becomes inactive. This describes NOT the maximum current over the entire Charging Session. This restriction can make a TariffElement become active when the charging current is below this value, but the TariffElement MUST no longer be active when the charging current raises above the defined value."
          },
          "min_power": {
            "type": "number",
            "description": "Minimum power in kW, for example 5. When the EV is charging with more than, or equal to, the defined amount of power, this TariffElement is/becomes active. If the charging power is or becomes lower, this TariffElement is not or no longer valid and becomes inactive. This describes NOT the minimum power over the entire Charging Session. This restriction can make a TariffElement become active when the charging power is above this value, but the TariffElement MUST no longer be active when the charging power drops below the defined value."
          },
          "max_power": {
            "type": "number",
            "description": "Maximum power in kW, for example 20. When the EV is charging with less than the defined amount of power, this TariffElement becomes/is active. If the charging power is or becomes higher, this TariffElement is not or no longer valid and becomes inactive. This describes NOT the maximum power over the entire Charging Session. This restriction can make a TariffElement become active when the charging power is below this value, but the TariffElement MUST no longer be active when the charging power raises above the defined value.",
            "example": 32
          },
          "min_duration": {
            "type": "integer",
            "description": "Minimum duration in seconds the Charging Session MUST last (inclusive). When the duration of a Charging Session is longer than the defined value, this TariffElement is or becomes active. Before that moment, this TariffElement is not yet active.",
            "format": "int32"
          },
          "max_duration": {
            "type": "integer",
            "description": "Maximum duration in seconds the Charging Session MUST last (exclusive). When the duration of a Charging Session is shorter than the defined value, this TariffElement is or becomes active. After that moment, this TariffElement is no longer active.",
            "format": "int32"
          },
          "day_of_week": {
            "type": "array",
            "description": "Which day(s) of the week this TariffElement is active.",
            "items": {
              "type": "string",
              "description": "Which day(s) of the week this TariffElement is active.",
              "enum": [
                "MONDAY",
                "TUESDAY",
                "WEDNESDAY",
                "THURSDAY",
                "FRIDAY",
                "SATURDAY",
                "SUNDAY"
              ]
            }
          }
        },
        "description": "These restrictions are not for the entire Charging Session. They only describe if and when a TariffElement becomes active or inactive during a Charging Session."
      },
      "LocationReviewGetResponse": {
        "required": [
          "active",
          "dateCreated",
          "dateUpdated",
          "id",
          "locationId",
          "options",
          "stars"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id of the location review",
            "format": "int64"
          },
          "locationId": {
            "type": "string",
            "description": "The id of the location"
          },
          "dateCreated": {
            "type": "string",
            "description": "The creation date",
            "format": "date-time"
          },
          "dateUpdated": {
            "type": "string",
            "description": "The last modification date",
            "format": "date-time"
          },
          "stars": {
            "type": "integer",
            "description": "Number of stars",
            "format": "int32"
          },
          "options": {
            "type": "array",
            "description": "The chosen options",
            "items": {
              "type": "string",
              "description": "The chosen options",
              "enum": [
                "CLEAN",
                "NOT_CLEAN",
                "EASY",
                "NOT_EASY",
                "NO_FUNCTIONALITY",
                "RECOMMENDED",
                "NOT_RECOMMENDED",
                "GOOD",
                "NOT_GOOD",
                "NO_CARD",
                "AMENITIES",
                "NO_AMENITIES",
                "CABLE",
                "NO_CABLE",
                "PRIVATE",
                "SEMI_PRIVATE",
                "PUBLIC"
              ]
            }
          },
          "active": {
            "type": "boolean",
            "description": "Is active location review"
          }
        }
      },
      "LocationImageResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the location image",
            "format": "int64"
          },
          "user_id": {
            "type": "string",
            "description": "The ID of the user which submitted the image"
          },
          "location_id": {
            "type": "string",
            "description": "The ID of the location"
          },
          "image_category": {
            "type": "string",
            "description": "The image category",
            "enum": [
              "CHARGER",
              "ENTRANCE",
              "LOCATION",
              "NETWORK",
              "OPERATOR",
              "OTHER",
              "OWNER"
            ]
          },
          "url_high_res": {
            "type": "string",
            "description": "The URL of the high resolution image"
          },
          "url_thumbnail": {
            "type": "string",
            "description": "The URL of the thumbnail image"
          },
          "date_submitted": {
            "type": "string",
            "description": "The date and time of the image submission by the user",
            "format": "date-time"
          }
        }
      },
      "LocationEvseInfo": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Display name of the location."
          },
          "id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the location within the CPOs platform (and suboperator platforms). This field can never be changed, modified or renamed."
          },
          "operator_uuid": {
            "type": "string",
            "description": "The UUID of the operator"
          },
          "evse_ids": {
            "type": "array",
            "description": "The list of EVSE IDs",
            "items": {
              "type": "string",
              "description": "The list of EVSE IDs"
            }
          }
        },
        "description": "The list of search results"
      },
      "SearchResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "description": "The list of search results",
            "items": {
              "$ref": "#/components/schemas/LocationEvseInfo"
            }
          }
        }
      },
      "Cdr": {
        "required": [
          "auth_method",
          "cdr_location",
          "cdr_token",
          "charging_periods",
          "country_code",
          "currency",
          "end_date_time",
          "id",
          "last_updated",
          "party_id",
          "start_date_time",
          "total_cost",
          "total_energy",
          "total_time"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "Currency of the CDR in ISO 4217 Code.",
            "example": "EUR"
          },
          "tariffs": {
            "type": "array",
            "description": "List of relevant Tariff Elements, see: Tariff. When relevant, a Free of Charge tariff should also be in this list, and point to a defined Free of Charge Tariff.",
            "items": {
              "$ref": "#/components/schemas/Tariff"
            }
          },
          "remark": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Optional remark, can be used to provide additional human readable information to the CDR, for example: reason why a transaction was stopped.",
            "example": "The cost of the electricity required to charge an EV is less than the cost to use petrol for a similar sized vehicle driving the same distance1. The cost will be lower if you charge your EV from your solar PV system or at free charging stations."
          },
          "credit": {
            "type": "boolean",
            "description": "When set to true, this is a Credit CDR, and the field credit_reference_id needs to be set as well."
          },
          "country_code": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "ISO-3166 alpha-2 country code of the CPO that 'owns' this CDR.",
            "example": "DE"
          },
          "party_id": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "CPO ID of the CPO that 'owns' this CDR (following the ISO-15118 standard).",
            "example": "ERG"
          },
          "id": {
            "maxLength": 39,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the CDR within the CPO’s platform (and suboperator platforms). This field is longer than the usual 36 characters to allow for credit CDRs to have something appended to the original ID. Normal (non-credit) CDRs SHALL only have an ID with a maximum length of 36.",
            "example": "12345"
          },
          "start_date_time": {
            "type": "string",
            "description": "Start timestamp of the charging session, or in-case of a reservation (before the start of a session) the start of the reservation.",
            "format": "date-time",
            "example": "2015-06-29T21:39:09Z"
          },
          "end_date_time": {
            "type": "string",
            "description": "The timestamp when the session was completed/finished, charging might have finished before the session ends, for example: EV is full, but parking cost also has to be paid.",
            "format": "date-time",
            "example": "2015-06-29T23:37:32Z"
          },
          "session_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Unique ID of the Session for which this CDR is sent. Is only allowed to be omitted when the CPO has not implemented the Sessions module or this CDR is the result of a reservation that never became a charging session, thus no OCPI Session.",
            "example": "59bff33b-595f-407a-ad42-6ea665ef2d74"
          },
          "cdr_token": {
            "$ref": "#/components/schemas/CdrToken"
          },
          "auth_method": {
            "type": "string",
            "description": "Method used for authentication.",
            "example": "WHITELIST",
            "enum": [
              "AUTH_REQUEST",
              "COMMAND",
              "WHITELIST"
            ]
          },
          "authorization_reference": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Reference to the authorization given by the eMSP. When the eMSP provided an authorization_reference in either: real-time authorization or StartSession, this field SHALL contain the same value. When different authorization_reference values have been given by the eMSP that are relevant to this Session, the last given value SHALL be used here.",
            "example": "40dbc1a6-3324-4424-a798-3a6e70e83bba"
          },
          "cdr_location": {
            "$ref": "#/components/schemas/CdrLocation"
          },
          "meter_id": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Identification of the Meter inside the Charge Point.",
            "example": "demo meter id"
          },
          "charging_periods": {
            "type": "array",
            "description": "List of Charging Periods that make up this charging session. A session consists of 1 or more periods, where each period has a different relevant Tariff.",
            "items": {
              "$ref": "#/components/schemas/ChargingPeriod"
            }
          },
          "signed_data": {
            "$ref": "#/components/schemas/SignedData"
          },
          "total_cost": {
            "$ref": "#/components/schemas/Price"
          },
          "total_fixed_cost": {
            "$ref": "#/components/schemas/Price"
          },
          "total_energy": {
            "type": "number",
            "description": "Total energy charged, in kWh."
          },
          "total_energy_cost": {
            "$ref": "#/components/schemas/Price"
          },
          "total_time": {
            "type": "number",
            "description": "Total duration of the charging session (including the duration of charging and not charging), in hours."
          },
          "total_time_cost": {
            "$ref": "#/components/schemas/Price"
          },
          "total_parking_time": {
            "type": "number",
            "description": "Total duration of the charging session where the EV was not charging (no energy was transferred between EVSE and EV), in hours."
          },
          "total_parking_cost": {
            "$ref": "#/components/schemas/Price"
          },
          "total_reservation_cost": {
            "$ref": "#/components/schemas/Price"
          },
          "invoice_reference_id": {
            "maxLength": 39,
            "minLength": 0,
            "type": "string",
            "description": "This field can be used to reference an invoice, that will later be send for this CDR. Making it easier to link a CDR to a given invoice. Maybe even group CDRs that will be on the same invoice."
          },
          "credit_reference_id": {
            "maxLength": 39,
            "minLength": 0,
            "type": "string",
            "description": "Is required to be set for a Credit CDR. This SHALL contain the id of the CDR for which this is a Credit CDR.",
            "example": "11ctt8q0y5tq0li8671wz3a5p8oe436bcmefr55"
          },
          "home_charging_compensation": {
            "type": "boolean",
            "description": "When set to true, this CDR is for a charging session using the home charger of the EV Driver for which the energy cost needs to be financially compensated to the EV Driver."
          },
          "last_updated": {
            "type": "string",
            "description": "Timestamp when this CDR was last updated (or created).",
            "format": "date-time",
            "example": "2021-03-19T14:11:43Z"
          }
        },
        "description": "The CDR object describes the charging session and its costs, how these costs are composed, etc.<br>The CDR object is different from the Session object. The Session object is dynamic as it reflects the current state of the chargingsession. The information is meant to be viewed by the driver while the charging session is ongoing.<br>"
      },
      "CdrLocation": {
        "required": [
          "address",
          "city",
          "connector_format",
          "connector_id",
          "connector_power_type",
          "connector_standard",
          "coordinates",
          "country",
          "evse_id",
          "evse_uid",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 39,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the location within the CPO’s platform (and suboperator platforms). This field can never be changed, modified or renamed.",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Display name of the location.",
            "example": "Gent Zuid"
          },
          "address": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "Street/block name and house number if available.",
            "example": "F.Rooseveltlaan 3A"
          },
          "city": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "City or town.",
            "example": "Gent"
          },
          "state": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "State only to be used when relevant."
          },
          "country": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "ISO 3166-1 alpha-3 code for the country of this location.",
            "example": "BEL"
          },
          "coordinates": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "postal_code": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Postal code of the location.",
            "example": "9000"
          },
          "evse_uid": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the EVSE within the CPO’s platform (and suboperator platforms). For example a database unique ID or the actual EVSE ID. This field  can never be changed, modified or renamed. This is the technical identification of the EVSE, not to be used as human readable identification, use the field: evse_id for that.",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "evse_id": {
            "maxLength": 48,
            "minLength": 0,
            "type": "string",
            "description": "Compliant with the following specification for EVSE ID from eMI3 standard version V1.0 (http://emi3group.com/documents-links/) Part 2: business objects.",
            "example": "DE*ERG*E10001*1"
          },
          "connector_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Identifier of the connector within the EVSE.",
            "example": "BE*BEC*E041503003"
          },
          "connector_standard": {
            "type": "string",
            "description": "The standard of the installed connector.",
            "example": "TESLA_R",
            "enum": [
              "CHADEMO",
              "CHAOJI",
              "DOMESTIC_A",
              "DOMESTIC_B",
              "DOMESTIC_C",
              "DOMESTIC_D",
              "DOMESTIC_E",
              "DOMESTIC_F",
              "DOMESTIC_G",
              "DOMESTIC_H",
              "DOMESTIC_I",
              "DOMESTIC_J",
              "DOMESTIC_K",
              "DOMESTIC_L",
              "DOMESTIC_M",
              "DOMESTIC_N",
              "DOMESTIC_O",
              "GBT_AC",
              "GBT_DC",
              "IEC_60309_2_single_16",
              "IEC_60309_2_three_16",
              "IEC_60309_2_three_32",
              "IEC_60309_2_three_64",
              "IEC_62196_T1",
              "IEC_62196_T1_COMBO",
              "IEC_62196_T2",
              "IEC_62196_T2_COMBO",
              "IEC_62196_T3A",
              "IEC_62196_T3C",
              "NEMA_5_20",
              "NEMA_6_30",
              "NEMA_6_50",
              "NEMA_10_30",
              "NEMA_10_50",
              "NEMA_14_30",
              "NEMA_14_50",
              "PANTOGRAPH_BOTTOM_UP",
              "PANTOGRAPH_TOP_DOWN",
              "TESLA_R",
              "TESLA_S",
              "UNKNOWN"
            ]
          },
          "connector_format": {
            "type": "string",
            "description": "The format (socket/cable) of the installed connector.",
            "example": "CABLE",
            "enum": [
              "SOCKET",
              "CABLE"
            ]
          },
          "connector_power_type": {
            "type": "string",
            "description": "Connector power type",
            "example": "AC_2_PHASE_SPLIT",
            "enum": [
              "AC_1_PHASE",
              "AC_2_PHASE",
              "AC_2_PHASE_SPLIT",
              "AC_3_PHASE",
              "DC"
            ]
          }
        },
        "description": "The CdrLocation class contains only the relevant information from the Location object that is needed in a CDR."
      },
      "SignedData": {
        "required": [
          "encoding_method",
          "signed_values"
        ],
        "type": "object",
        "properties": {
          "url": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "URL that can be shown to an EV driver. This URL gives the EV driver the possibility to check the signed data from a charging session.",
            "example": "https://www.example.com/advertisement"
          },
          "encoding_method": {
            "type": "string",
            "description": "The name of the encoding used in the SignedData field. This is the name given to the encoding by a company or group of companies.",
            "example": "UTF-8"
          },
          "encoding_method_version": {
            "type": "integer",
            "description": "Version of the EncodingMethod (when applicable)",
            "format": "int32"
          },
          "public_key": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Public key used to sign the data, base64 encoded.",
            "example": "-----BEGIN RSA PUBLIC KEY-----\nMEgCQQCo9+BpMRYQ/dL3DS2CyJxRF+j6ctbT3/Qp84+KeFhnii7NT7fELilKUSnx\nS30WAvQCCo2yU1orfgqr41mM70MBAgMBAAE=\n-----END RSA PUBLIC KEY-----"
          },
          "signed_values": {
            "type": "array",
            "description": "One or more signed values.",
            "items": {
              "$ref": "#/components/schemas/SignedValue"
            }
          }
        },
        "description": "This class contains all the information of the signed data. Which encoding method is used, if needed, the public key and a list of signed values."
      },
      "SignedValue": {
        "required": [
          "plain_data",
          "signed_data"
        ],
        "type": "object",
        "properties": {
          "nature": {
            "type": "string",
            "description": "Nature of the value, in other words, the event this value belongs to.\nPossible values at moment of writing: \n- Start (value at the start of the Session)\n- End (signed value at the end of the Session)\n- Intermediate (signed values take during the Session, after Start, before End)\nOthers might be added later."
          },
          "plain_data": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "The unencoded string of data. The format of the content depends on the EncodingMethod field.",
            "example": "iu9daxlgjc1fn7l5qj8777t9qxduy1a93366psubpp3j9aeogh6p0quc8myofqaoqc7tibug9ivxza754qtzguq61tt8ugygqoxv3rzi7tfmms13jx50455h7z3c9tj11s2hh316ecrreqo9e6farf716vnhcs6wnoz7rn0umcktx2c2y8ggem1zkqa1tqlgtx7hd29qkyzu5izjlpyjyvj0a22lyerpljc9k32bexp1hfhpofnon3by09xnohrfxy9trraev0yihdelc53slaw4opz8jfi3pxqhksz3bkh2lcsvz7lon9hbuh4fty260qmo6f53vqfwco1ptwjqqby5gmzgqpq29knbfwg8qxkpmqwglyhu6zrtm5ghyn4ft4hqwhy444zhr2wjerg71ue8qa5tl2ur6k7hidp0wssta2d1coyl2nhfik3j75m2pho3yurirttasr2m977kcfr5h0vsxjlj0r02lxucu6hk9yfipwti4xeddymxni1p"
          },
          "signed_data": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Blob of signed data, base64 encoded. The format of the content depends on the EncodingMethod field.",
            "example": "}/x/j*}g9k^1axjfv{+91#w’dhuds’>”^`%{4>xw1!b7~!8w]awi:_0jv:`=^pf_q_7.f`<^9f^o$w.#qzmb(8$|!.mo^>_ixgea4{c{gfb:bu^f\\w}haj5(^djnbvy>z=!5o|m.\\”x0>|9p7*h~.1&;hl=z65)#o]q(x’/l^’/ne-vt<:a&#4y08]b.f@%te+85iw9dkvy@6ah$9[[;’ut:\\:y7p&;70l$s?[u)\\c9”]>k1{w~`ih*a;-1dv(=[?g!6!a/ma%”!*630_=^g’mf6e;<hy;k;^kny=#31c;>}’sh”’<^3!/’’$vw`u8{?4”akms+{egz<x>79{.7y%k.(x4@.*@t?|7e5kvt94/][p=qxl|_:z^]6&h$]m0dlx!^{>\\@@x@u.~ca?8^d{=vxr1#7gdt0`!qv0fwl9^::\\)]jv(n#?””z}$8_4#*fv!ld|n_r%u?>]=v(|i”e*blz//%h`\b!@d/0$+=izqi:$f(.dll.]ji@%2gq$1ds?"
          }
        },
        "description": "This class contains the signed and the plain/unsigned data. By decoding the data, the receiver can check if the content has not been altered."
      },
      "BillingInfoResponse": {
        "required": [
          "billingAddress",
          "companyName",
          "firstName",
          "lastName",
          "paymentCapabilities",
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "description": "The ID of the user",
            "example": "ZOsNHVu2TgI6PrWRb9"
          },
          "companyName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "The name of the company",
            "example": "EnergyStacks GmbH"
          },
          "firstName": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string",
            "description": "The first name of the user",
            "example": "John"
          },
          "lastName": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string",
            "description": "The last name of the user",
            "example": "Doe"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/BillingAddress"
          },
          "paymentCapabilities": {
            "type": "array",
            "description": "The payment capabilities of a user",
            "items": {
              "type": "string",
              "description": "The payment capabilities of a user",
              "enum": [
                "CHARGING_PROFILE_CAPABLE",
                "CHARGING_PREFERENCES_CAPABLE",
                "CHIP_CARD_SUPPORT",
                "CONTACTLESS_CARD_SUPPORT",
                "CREDIT_CARD_PAYABLE",
                "DEBIT_CARD_PAYABLE",
                "PED_TERMINAL",
                "REMOTE_START_STOP_CAPABLE",
                "RESERVABLE",
                "RFID_READER",
                "START_SESSION_CONNECTOR_REQUIRED",
                "TOKEN_GROUP_CAPABLE",
                "UNLOCK_CAPABLE"
              ]
            }
          }
        }
      }
    },
    "examples": {
      "IMAGE_ALREADY_UPLOADED": {
        "value": "{\n  \"message\" : \"The image was already uploaded\",\n  \"errorCode\" : \"IMAGE_ALREADY_UPLOADED\"\n}"
      },
      "IMAGE_ALREADY_REVIEWED": {
        "value": "{\n  \"message\" : \"The image was already reviewed\",\n  \"errorCode\" : \"IMAGE_ALREADY_REVIEWED\"\n}"
      },
      "MISSING_IMAGE_EXTENSION": {
        "value": "{\n  \"message\" : \"Image extension is missing\",\n  \"errorCode\" : \"MISSING_IMAGE_EXTENSION\"\n}"
      },
      "CAN_NOT_READ_IMAGE": {
        "value": "{\n  \"message\" : \"The image can't not be read\",\n  \"errorCode\" : \"CAN_NOT_READ_IMAGE\"\n}"
      },
      "UNPROCESSABLE_IMAGE_FORMAT": {
        "value": "{\n  \"message\" : \"The image could not be read\",\n  \"errorCode\" : \"UNPROCESSABLE_IMAGE_FORMAT\"\n}"
      },
      "CAN_NOT_PROCESS_IMAGE": {
        "value": "{\n  \"message\" : \"Can't process image\",\n  \"errorCode\" : \"CAN_NOT_PROCESS_IMAGE\"\n}"
      },
      "CAN_NOT_STORE_IMAGES": {
        "value": "{\n  \"message\" : \"The image could not be stored.\",\n  \"errorCode\" : \"CAN_NOT_STORE_IMAGES\"\n}"
      },
      "CAN_NOT_INITIALIZE_FOLDER": {
        "value": "{\n  \"message\" : \"The directory for location review service images can't be initialized\",\n  \"errorCode\" : \"CAN_NOT_INITIALIZE_FOLDER\"\n}"
      },
      "UNSORTABLE_COLUMN": {
        "value": "{\n  \"message\" : \"The entered sorting column is not sortable in ElasticSearch (Column is not a @Keyword).\",\n  \"errorCode\" : \"UNSORTABLE_COLUMN\"\n}"
      },
      "REST_STATUS_ELASTICSEARCH_RELATED": {
        "value": "{\n  \"message\" : \"RestStatusException related to ElasticSearch\",\n  \"errorCode\" : \"REST_STATUS_ELASTICSEARCH_RELATED\"\n}"
      },
      "WRONG_TIME_FRAME_FORMAT": {
        "value": "{\n  \"message\" : \"The provided timeframe has wrong format, value should be in 15 minutes intervals starting from 0\",\n  \"errorCode\" : \"WRONG_TIME_FRAME_FORMAT\"\n}"
      },
      "PROCESSING_ERROR": {
        "value": "{\n  \"message\" : \"Error while processing the data\",\n  \"errorCode\" : \"PROCESSING_ERROR\"\n}"
      },
      "ACCESS_DENIED": {
        "value": "{\n  \"message\" : \"Access to route has been denied.\",\n  \"errorCode\" : \"ACCESS_DENIED\"\n}"
      },
      "INTERNAL_SERVER_ERROR": {
        "value": "{\n  \"message\" : \"An error occurred\",\n  \"errorCode\" : \"INTERNAL_SERVER_ERROR\"\n}"
      },
      "BAD_REQUEST": {
        "value": "{\n  \"message\" : \"Bad request\",\n  \"errorCode\" : \"BAD_REQUEST\"\n}"
      },
      "NOT_FOUND": {
        "value": "{\n  \"message\" : \"User Settings not found\",\n  \"errorCode\" : \"NOT_FOUND\"\n}"
      },
      "UNAUTHORIZED": {
        "value": "{\n  \"message\" : \"Unauthorized\",\n  \"errorCode\" : \"UNAUTHORIZED\"\n}"
      },
      "FORBIDDEN": {
        "value": "{\n  \"message\" : \"Forbidden\",\n  \"errorCode\" : \"FORBIDDEN\"\n}"
      },
      "UNAUTHENTICATED": {
        "value": "{\n  \"message\" : \"Unauthenticated\",\n  \"errorCode\" : \"UNAUTHENTICATED\"\n}"
      },
      "METHOD_ARGUMENT_TYPE_MISMATCH": {
        "value": "{\n  \"message\" : \"Failed to convert value to required type\",\n  \"errorCode\" : \"METHOD_ARGUMENT_TYPE_MISMATCH\"\n}"
      },
      "MAXIMUM_UPLOAD_SIZE_EXCEEDED": {
        "value": "{\n  \"message\" : \"Maximum upload size exceeded\",\n  \"errorCode\" : \"MAXIMUM_UPLOAD_SIZE_EXCEEDED\"\n}"
      },
      "METHOD_NOT_ALLOWED": {
        "value": "{\n  \"message\" : \"Request method is not supported\",\n  \"errorCode\" : \"METHOD_NOT_ALLOWED\"\n}"
      },
      "MISSING_REQUEST_PARAMETER": {
        "value": "{\n  \"message\" : \"Required request parameter is not present\",\n  \"errorCode\" : \"MISSING_REQUEST_PARAMETER\"\n}"
      },
      "MISSING_REQUEST_PART": {
        "value": "{\n  \"message\" : \"Required request part is not present\",\n  \"errorCode\" : \"MISSING_REQUEST_PART\"\n}"
      },
      "UNSUPPORTED_MEDIA_TYPE": {
        "value": "{\n  \"message\" : \"Media type is not supported\",\n  \"errorCode\" : \"UNSUPPORTED_MEDIA_TYPE\"\n}"
      },
      "LIST_CONTAINS_NULL_VALUES": {
        "value": "{\n  \"message\" : \"List contains null values\",\n  \"errorCode\" : \"LIST_CONTAINS_NULL_VALUES\"\n}"
      },
      "REMOTE_CALL_FAILED": {
        "value": "{\n  \"message\" : \"Call to remote API returned an error response\",\n  \"errorCode\" : \"REMOTE_CALL_FAILED\"\n}"
      },
      "ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"Object already exists\",\n  \"errorCode\" : \"ALREADY_EXISTS\"\n}"
      },
      "SOFTLY_DELETED": {
        "value": "{\n  \"message\" : \"Object is softly deleted\",\n  \"errorCode\" : \"SOFTLY_DELETED\"\n}"
      },
      "WRONG_SORTING_COLUMN": {
        "value": "{\n  \"message\" : \"The entered sorting column name does not exist.\",\n  \"errorCode\" : \"WRONG_SORTING_COLUMN\"\n}"
      },
      "COULD_NOT_EXTRACT_ERROR_FROM_RESPONSE": {
        "value": "{\n  \"message\" : \"Could not extract error from the response.\",\n  \"errorCode\" : \"COULD_NOT_EXTRACT_ERROR_FROM_RESPONSE\"\n}"
      },
      "FAILED_TO_DELETE_TEMPORARY_FILE": {
        "value": "{\n  \"message\" : \"Failed to delete temporary file\",\n  \"errorCode\" : \"FAILED_TO_DELETE_TEMPORARY_FILE\"\n}"
      },
      "TENANT_ID_MUST_BE_SINGLETON": {
        "value": "{\n  \"message\" : \"Tenant ID must be a single value parameter\",\n  \"errorCode\" : \"TENANT_ID_MUST_BE_SINGLETON\"\n}"
      },
      "TENANT_ID_MUST_BE_INTEGER": {
        "value": "{\n  \"message\" : \"Tenant ID must be integer\",\n  \"errorCode\" : \"TENANT_ID_MUST_BE_INTEGER\"\n}"
      },
      "INVALID_PROPERTY": {
        "value": "{\n  \"message\" : \"Requested property is not valid.\",\n  \"errorCode\" : \"INVALID_PROPERTY\"\n}"
      },
      "INVALID_LOCATION": {
        "value": "{\n  \"message\" : \"Location does not exist\",\n  \"errorCode\" : \"INVALID_LOCATION\"\n}"
      },
      "START_CHARGING_SESSION_FAILED": {
        "value": "{\n  \"message\" : \"Failed to start a charging session.\",\n  \"errorCode\" : \"START_CHARGING_SESSION_FAILED\"\n}"
      },
      "INVALID_COMMAND": {
        "value": "{\n  \"message\" : \"The requested command doesn't exist.\",\n  \"errorCode\" : \"INVALID_COMMAND\"\n}"
      },
      "GATEWAY_ALREADY_ADDED": {
        "value": "{\n  \"message\" : \"Gateway with the specified name already added\",\n  \"errorCode\" : \"GATEWAY_ALREADY_ADDED\"\n}"
      },
      "GATEWAY_NOT_AVAILABLE": {
        "value": "{\n  \"message\" : \"Gateway with the specified name is not available in the Consul service catalog\",\n  \"errorCode\" : \"GATEWAY_NOT_AVAILABLE\"\n}"
      },
      "GATEWAY_NOT_FOUND": {
        "value": "{\n  \"message\" : \"Gateway with the specified UUID not found\",\n  \"errorCode\" : \"GATEWAY_NOT_FOUND\"\n}"
      },
      "EMPTY_GATEWAY_LIST": {
        "value": "{\n  \"message\" : \"Gateway order list empty\",\n  \"errorCode\" : \"EMPTY_GATEWAY_LIST\"\n}"
      },
      "FAILED_TO_START_CHARGING_SESSION": {
        "value": "{\n  \"message\" : \"Failed to start a charging session using known gateways\",\n  \"errorCode\" : \"FAILED_TO_START_CHARGING_SESSION\"\n}"
      },
      "FAILED_TO_STOP_CHARGING_SESSION": {
        "value": "{\n  \"message\" : \"Failed to stop a charging session\",\n  \"errorCode\" : \"FAILED_TO_STOP_CHARGING_SESSION\"\n}"
      },
      "CONSUL_METADATA_ENTRY_NOT_FOUND": {
        "value": "{\n  \"message\" : \"Failed to add the specified gateway due to missing Consul party-id metadata entry\",\n  \"errorCode\" : \"CONSUL_METADATA_ENTRY_NOT_FOUND\"\n}"
      },
      "GATEWAY_WITH_PARTY_ID_ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"Gateway with the Consul party-id metadata entry already exists\",\n  \"errorCode\" : \"GATEWAY_WITH_PARTY_ID_ALREADY_EXISTS\"\n}"
      },
      "EVSE_UID_IS_REQUIRED": {
        "value": "{\n  \"message\" : \"Evse UID is required when connector id is set\",\n  \"errorCode\" : \"EVSE_UID_IS_REQUIRED\"\n}"
      },
      "GATEWAY_WITH_PARTY_ID_NOT_FOUND": {
        "value": "{\n  \"message\" : \"Gateway with the specified party id not found\",\n  \"errorCode\" : \"GATEWAY_WITH_PARTY_ID_NOT_FOUND\"\n}"
      },
      "ERROR_STORING_LOCATIONS": {
        "value": "{\n  \"message\" : \"An error occurred while storing locations data from GZIP file\",\n  \"errorCode\" : \"ERROR_STORING_LOCATIONS\"\n}"
      },
      "INVALID_FILE_TYPE": {
        "value": "{\n  \"message\" : \"Provided file does not match the expected file type\",\n  \"errorCode\" : \"INVALID_FILE_TYPE\"\n}"
      },
      "ERROR_CREATING_AMENITY_TEMP_FILE": {
        "value": "{\n  \"message\" : \"An error occurred while trying to create amenity temp file\",\n  \"errorCode\" : \"ERROR_CREATING_AMENITY_TEMP_FILE\"\n}"
      },
      "SESSION_ID_ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"[TRANSACTION] A session with the same ID already exists.\",\n  \"errorCode\" : \"SESSION_ID_ALREADY_EXISTS\"\n}"
      },
      "SESSION_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[TRANSACTION] Session is not found.\",\n  \"errorCode\" : \"SESSION_NOT_FOUND\"\n}"
      },
      "SESSION_NOT_FOUND_WITH_SPECIFIED_STATUS": {
        "value": "{\n  \"message\" : \"[TRANSACTION] Session with the specified status(es) not found.\",\n  \"errorCode\" : \"SESSION_NOT_FOUND_WITH_SPECIFIED_STATUS\"\n}"
      },
      "CDR_ID_ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"[TRANSACTION] A CDR with the same ID already exists.\",\n  \"errorCode\" : \"CDR_ID_ALREADY_EXISTS\"\n}"
      },
      "CDR_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[TRANSACTION] A CDR with the specified ID is not found.\",\n  \"errorCode\" : \"CDR_NOT_FOUND\"\n}"
      },
      "PARTY_IDS_DO_NOT_MATCH": {
        "value": "{\n  \"message\" : \"[TRANSACTION] Inconsistent Party IDs are provided.\",\n  \"errorCode\" : \"PARTY_IDS_DO_NOT_MATCH\"\n}"
      },
      "COUNTRY_CODES_DO_NOT_MATCH": {
        "value": "{\n  \"message\" : \"[TRANSACTION] Inconsistent Country Codes are provided.\",\n  \"errorCode\" : \"COUNTRY_CODES_DO_NOT_MATCH\"\n}"
      },
      "SESSION_IDS_DO_NOT_MATCH": {
        "value": "{\n  \"message\" : \"[TRANSACTION] Inconsistent Session IDs are provided.\",\n  \"errorCode\" : \"SESSION_IDS_DO_NOT_MATCH\"\n}"
      },
      "AUTHORIZATION_REFERENCES_DO_NOT_MATCH": {
        "value": "{\n  \"message\" : \"[TRANSACTION] Inconsistent Authorization References are provided.\",\n  \"errorCode\" : \"AUTHORIZATION_REFERENCES_DO_NOT_MATCH\"\n}"
      },
      "CDR_LOCATION_ID_EXISTS": {
        "value": "{\n  \"message\" : \"[TRANSACTION] A CDR Location with the same id already exists.\",\n  \"errorCode\" : \"CDR_LOCATION_ID_EXISTS\"\n}"
      },
      "LOCATION_NOT_FOUND": {
        "value": "{\n  \"message\" : \"Location with given parameters could not be found\",\n  \"errorCode\" : \"LOCATION_NOT_FOUND\"\n}"
      },
      "EVSE_NOT_FOUND": {
        "value": "{\n  \"message\" : \"Specified location does not contain the EVSE with given id\",\n  \"errorCode\" : \"EVSE_NOT_FOUND\"\n}"
      },
      "CONNECTOR_NOT_FOUND": {
        "value": "{\n  \"message\" : \"Specified location and EVSE do not contain the connector with given id\",\n  \"errorCode\" : \"CONNECTOR_NOT_FOUND\"\n}"
      },
      "IDS_MUST_MATCH": {
        "value": "{\n  \"message\" : \"ID of object in the body and the ID passed through path variable must match\",\n  \"errorCode\" : \"IDS_MUST_MATCH\"\n}"
      },
      "ERROR_LOADING_OCPI": {
        "value": "{\n  \"message\" : \"Error while loading OCPI data\",\n  \"errorCode\" : \"ERROR_LOADING_OCPI\"\n}"
      },
      "CONNECTOR_TYPE_NEEDS_TO_BE_DEFINED": {
        "value": "{\n  \"message\" : \"The connector type(s) needs to be defined\",\n  \"errorCode\" : \"CONNECTOR_TYPE_NEEDS_TO_BE_DEFINED\"\n}"
      },
      "CHARGING_STATION_NOT_FOUND": {
        "value": "{\n  \"message\" : \"Charging station with the specified EVSE ID not found.\",\n  \"errorCode\" : \"CHARGING_STATION_NOT_FOUND\"\n}"
      },
      "INVALID_REQUEST_PARAMETERS": {
        "value": "{\n  \"message\" : \"The request must contain only one of the following parameters: name, EVSE ID\",\n  \"errorCode\" : \"INVALID_REQUEST_PARAMETERS\"\n}"
      },
      "CHARGING_STATION_REQUEST_RETURNED_EMPTY_RESULT": {
        "value": "{\n  \"message\" : \"Charging station request didn't return any data.\",\n  \"errorCode\" : \"CHARGING_STATION_REQUEST_RETURNED_EMPTY_RESULT\"\n}"
      },
      "DATASET_NOT_FOUND": {
        "value": "{\n  \"message\" : \"Dataset associated with the API key not found.\",\n  \"errorCode\" : \"DATASET_NOT_FOUND\"\n}"
      },
      "CAN_NOT_STORE_IMAGE": {
        "value": "{\n  \"message\" : \"Image can't be stored\",\n  \"errorCode\" : \"CAN_NOT_STORE_IMAGE\"\n}"
      },
      "PAYMENT_SERVICE_NOT_FOUND": {
        "value": "{\n  \"message\" : \"One or more payment services not found\",\n  \"errorCode\" : \"PAYMENT_SERVICE_NOT_FOUND\"\n}"
      },
      "PAYMENT_SERVICE_REQUEST_RETURNED_EMPTY_RESULT": {
        "value": "{\n  \"message\" : \"Payment services request didn't return any data.\",\n  \"errorCode\" : \"PAYMENT_SERVICE_REQUEST_RETURNED_EMPTY_RESULT\"\n}"
      },
      "CPO_GROUP_NOT_FOUND": {
        "value": "{\n  \"message\" : \"CPO group with the cpo id and country code combination not found\",\n  \"errorCode\" : \"CPO_GROUP_NOT_FOUND\"\n}"
      },
      "CPO_GROUP_ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"CPO group with the specified cpo id - country code combination already exists\",\n  \"errorCode\" : \"CPO_GROUP_ALREADY_EXISTS\"\n}"
      },
      "PAYMENT_SERVICE_ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"Payment service with the specified name - provider combination already exists\",\n  \"errorCode\" : \"PAYMENT_SERVICE_ALREADY_EXISTS\"\n}"
      },
      "FAILED_TO_EXPORT_LOCATIONS": {
        "value": "{\n  \"message\" : \"Failed to export locations to a gzip file\",\n  \"errorCode\" : \"FAILED_TO_EXPORT_LOCATIONS\"\n}"
      },
      "COUNTRY_CODES_MUST_MATCH": {
        "value": "{\n  \"message\" : \"Country code of the object in the body and the country code passed through path variable must match\",\n  \"errorCode\" : \"COUNTRY_CODES_MUST_MATCH\"\n}"
      },
      "PARTY_IDS_MUST_MATCH": {
        "value": "{\n  \"message\" : \"Party id of the object in the body and the party id passed through path variable must match\",\n  \"errorCode\" : \"PARTY_IDS_MUST_MATCH\"\n}"
      },
      "CAN_NOT_EXTRACT_LOCATIONS": {
        "value": "{\n  \"message\" : \"Failed to extract locations\",\n  \"errorCode\" : \"CAN_NOT_EXTRACT_LOCATIONS\"\n}"
      },
      "INVALID_POWER_LEVEL_RANGE": {
        "value": "{\n  \"message\" : \"Value representing the minimum power level value has to be greater than the maximum one\",\n  \"errorCode\" : \"INVALID_POWER_LEVEL_RANGE\"\n}"
      },
      "ERROR_CREATING_LOCATION_TEMP_FILE": {
        "value": "{\n  \"message\" : \"An error occurred while trying to create location temp file\",\n  \"errorCode\" : \"ERROR_CREATING_LOCATION_TEMP_FILE\"\n}"
      },
      "INVALID_LOCATION_PUBLISH_VALUE": {
        "value": "{\n  \"message\" : \"publish_allowed_to field not allowed to be set when publish field value is set to true\",\n  \"errorCode\" : \"INVALID_LOCATION_PUBLISH_VALUE\"\n}"
      },
      "LOCATION_FILE_CONTAINS_INVALID_ENTRIES": {
        "value": "{\n  \"message\" : \"Location file contains invalid entries\",\n  \"errorCode\" : \"LOCATION_FILE_CONTAINS_INVALID_ENTRIES\"\n}"
      },
      "USER_BILLING_INFORMATION_NOT_FOUND": {
        "value": "{\n  \"message\" : \"The user billing information was not found\",\n  \"errorCode\" : \"USER_BILLING_INFORMATION_NOT_FOUND\"\n}"
      },
      "USER_BILLING_INFORMATION_ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"A Billing Information for the same User Id already exists.\",\n  \"errorCode\" : \"USER_BILLING_INFORMATION_ALREADY_EXISTS\"\n}"
      },
      "USER_FAVORITE_ADDRESS_ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"Users favorite address for the provided user already exists\",\n  \"errorCode\" : \"USER_FAVORITE_ADDRESS_ALREADY_EXISTS\"\n}"
      },
      "USER_FAVORITE_ADDRESS_NOT_FOUND": {
        "value": "{\n  \"message\" : \"Users favorite address not found\",\n  \"errorCode\" : \"USER_FAVORITE_ADDRESS_NOT_FOUND\"\n}"
      },
      "USER_FAVORITE_ADDRESSES_NOT_FOUND": {
        "value": "{\n  \"message\" : \"Users Favorite addresses not found\",\n  \"errorCode\" : \"USER_FAVORITE_ADDRESSES_NOT_FOUND\"\n}"
      },
      "USER_HOME_STATIONS_NOT_FOUND": {
        "value": "{\n  \"message\" : \"User's home station(s) not found\",\n  \"errorCode\" : \"USER_HOME_STATIONS_NOT_FOUND\"\n}"
      },
      "USER_FAVORITE_CHARGING_STATION_ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"Users favorite charging station already exists\",\n  \"errorCode\" : \"USER_FAVORITE_CHARGING_STATION_ALREADY_EXISTS\"\n}"
      },
      "USER_FAVORITE_CHARGING_STATION_NOT_FOUND": {
        "value": "{\n  \"message\" : \"Users favorite charging station not found\",\n  \"errorCode\" : \"USER_FAVORITE_CHARGING_STATION_NOT_FOUND\"\n}"
      },
      "USER_NOT_FOUND": {
        "value": "{\n  \"message\" : \"The entered user does not exist.\",\n  \"errorCode\" : \"USER_NOT_FOUND\"\n}"
      },
      "USER_ALREADY_HAS_ACCESS": {
        "value": "{\n  \"message\" : \"The user already has access\",\n  \"errorCode\" : \"USER_ALREADY_HAS_ACCESS\"\n}"
      },
      "USER_ACCESS_REQUEST_NOT_FOUND": {
        "value": "{\n  \"message\" : \"The entered user access request does not exist.\",\n  \"errorCode\" : \"USER_ACCESS_REQUEST_NOT_FOUND\"\n}"
      },
      "USER_SETTINS_ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"The User Settings for the provided user id already exists\",\n  \"errorCode\" : \"USER_SETTINS_ALREADY_EXISTS\"\n}"
      },
      "NOT_A_DIRECTORY": {
        "value": "{\n  \"message\" : \"Not a directory\",\n  \"errorCode\" : \"NOT_A_DIRECTORY\"\n}"
      },
      "VEHICLE_IMAGE_DIR_NOT_FOUND": {
        "value": "{\n  \"message\" : \"Vehicle image directory not found\",\n  \"errorCode\" : \"VEHICLE_IMAGE_DIR_NOT_FOUND\"\n}"
      },
      "FAILED_TO_STORE_VEHICLE_IMAGE": {
        "value": "{\n  \"message\" : \"Failed to store vehicle image\",\n  \"errorCode\" : \"FAILED_TO_STORE_VEHICLE_IMAGE\"\n}"
      },
      "EMPTY_IMAGE": {
        "value": "{\n  \"message\" : \"Empty image\",\n  \"errorCode\" : \"EMPTY_IMAGE\"\n}"
      },
      "VEHICLE_NOT_FOUND": {
        "value": "{\n  \"message\" : \"The requested vehicle entry was not found\",\n  \"errorCode\" : \"VEHICLE_NOT_FOUND\"\n}"
      },
      "ELECTRIC_VEHICLE_NOT_FOUND": {
        "value": "{\n  \"message\" : \"The requested vehicle entry was not found or the vehicle is not an electric vehicle\",\n  \"errorCode\" : \"ELECTRIC_VEHICLE_NOT_FOUND\"\n}"
      },
      "VEHICLE_BRAND_NOT_FOUND": {
        "value": "{\n  \"message\" : \"Vehicle brand not found\",\n  \"errorCode\" : \"VEHICLE_BRAND_NOT_FOUND\"\n}"
      },
      "CHARGING_CURVE_NOT_FOUND": {
        "value": "{\n  \"message\" : \"Charging curve not found\",\n  \"errorCode\" : \"CHARGING_CURVE_NOT_FOUND\"\n}"
      },
      "INCORRECT_TENANT_ID": {
        "value": "{\n  \"message\" : \"Not allowed to add/update/fetch the resource with the provided tenant id\",\n  \"errorCode\" : \"INCORRECT_TENANT_ID\"\n}"
      },
      "BRAND_AND_VEHICLE_TENANTS_MISMATCH": {
        "value": "{\n  \"message\" : \"Vehicle and brand tenant ids don't match\",\n  \"errorCode\" : \"BRAND_AND_VEHICLE_TENANTS_MISMATCH\"\n}"
      },
      "IMAGE_NOT_FOUND": {
        "value": "{\n  \"message\" : \"Image not found\",\n  \"errorCode\" : \"IMAGE_NOT_FOUND\"\n}"
      },
      "FAILED_TO_READ_IMAGE": {
        "value": "{\n  \"message\" : \"Failed to read image\",\n  \"errorCode\" : \"FAILED_TO_READ_IMAGE\"\n}"
      },
      "INVALID_IMAGE_FILE_TYPE": {
        "value": "{\n  \"message\" : \"File has an invalid extension\",\n  \"errorCode\" : \"INVALID_IMAGE_FILE_TYPE\"\n}"
      },
      "VEHICLE_VARIANT_IMAGE_NOT_FOUND": {
        "value": "{\n  \"message\" : \"Vehicle doesn't have a variant image\",\n  \"errorCode\" : \"VEHICLE_VARIANT_IMAGE_NOT_FOUND\"\n}"
      },
      "FAILED_TO_DELETE_IMAGE": {
        "value": "{\n  \"message\" : \"Failed to delete the image\",\n  \"errorCode\" : \"FAILED_TO_DELETE_IMAGE\"\n}"
      },
      "UNSUPPORTED_IMAGE_FORMAT": {
        "value": "{\n  \"message\" : \"Image format is invalid or unsupported\",\n  \"errorCode\" : \"UNSUPPORTED_IMAGE_FORMAT\"\n}"
      },
      "IMAGE_FETCHING_ERROR": {
        "value": "{\n  \"message\" : \"Error occured during fetching the image\",\n  \"errorCode\" : \"IMAGE_FETCHING_ERROR\"\n}"
      },
      "INVALID_CUSTOMER_KEY": {
        "value": "{\n  \"message\" : \"Invalid customer key\",\n  \"errorCode\" : \"INVALID_CUSTOMER_KEY\"\n}"
      },
      "FILE_IS_NOT_IMAGE": {
        "value": "{\n  \"message\" : \"The file isn't image.\",\n  \"errorCode\" : \"FILE_IS_NOT_IMAGE\"\n}"
      },
      "FORMAT_NOT_SUPPORTED": {
        "value": "{\n  \"message\" : \"The logo format not supported\",\n  \"errorCode\" : \"FORMAT_NOT_SUPPORTED\"\n}"
      },
      "EXTENSION_MISSING": {
        "value": "{\n  \"message\" : \"The logo extension missing\",\n  \"errorCode\" : \"EXTENSION_MISSING\"\n}"
      }
    },
    "headers": {
      "api-category": {
        "description": "MSP Services",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "display-name": {
        "description": "MSP Web",
        "required": false,
        "schema": {
          "type": "string"
        }
      }
    }
  },
  "securitySchemes": {
    "Bearer Authentication": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}