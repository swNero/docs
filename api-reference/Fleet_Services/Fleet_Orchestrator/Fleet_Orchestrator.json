{
  "openapi": "3.0.1",
  "info": {
    "title": "fleet-orchestrator-service",
    "description": "",
    "contact": {
      "name": "P3 digital services GmbH",
      "email": "contact@energystacks.io"
    },
    "version": "v1"
  },
  "servers": [
    {
      "url": "https://p3-acc.fleet.energystacks.io/fleet-orchestrator/v1",
      "description": "Generated server url"
    }
  ],
  "tags": [
    {
      "name": "Fleet Jobs",
      "description": "Enables CRUD operations for Fleet Jobs while seamlessly retrieving necessary data from multiple microservices."
    },
    {
      "name": "Fleet Vehicle",
      "description": "Enables CRUD operations for Fleet Vehicles while seamlessly retrieving necessary data from multiple microservices."
    },
    {
      "name": "Tour Optimization",
      "description": "Calculates the fleet tours based on the criteria"
    },
    {
      "name": "Fleet Tours",
      "description": "Support for Tour operations (CRUDs)"
    }
  ],
  "paths": {
    "/vehicles/{vehicleIdentificationNumber}": {
      "get": {
        "tags": [
          "Fleet Vehicle"
        ],
        "summary": "Get fleet vehicle by vehicle identification number (VIN)",
        "description": "Returns a fleet vehicle, based on the provided VIN",
        "operationId": "getFleetVehicleByVIN",
        "parameters": [
          {
            "name": "vehicleIdentificationNumber",
            "in": "path",
            "description": "The vehicle identification number of the vehicle",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VehicleComposedResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Core Vehicle not found"
          }
        }
      },
      "put": {
        "tags": [
          "Fleet Vehicle"
        ],
        "summary": "Update Fleet Vehicle",
        "description": "Update Fleet Vehicle with the specific vehicle identification number (VIN)",
        "operationId": "updateFleetVehicleByVehicleIdentificationNumber",
        "parameters": [
          {
            "name": "vehicleIdentificationNumber",
            "in": "path",
            "description": "The vehicle identification number of the vehicle",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userIdentity",
            "in": "query",
            "description": "Identity information for auditing purposes.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FleetVehicleUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FleetVehicleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Core Vehicle not found"
          },
          "409": {
            "description": "Fleet Vehicle is assigned on a tour"
          }
        }
      },
      "delete": {
        "tags": [
          "Fleet Vehicle"
        ],
        "summary": "Delete a fleet vehicle",
        "description": "Delete a fleet vehicle with the specific vehicle identification number",
        "operationId": "deleteFleetVehicleByVehicleIdentificationNumber",
        "parameters": [
          {
            "name": "vehicleIdentificationNumber",
            "in": "path",
            "description": "The vehicle identification number of the vehicle",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userIdentity",
            "in": "query",
            "description": "Identity information for auditing purposes.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageDto"
                }
              }
            }
          },
          "404": {
            "description": "Core vehicle not found"
          }
        }
      }
    },
    "/tours/{tourUid}": {
      "put": {
        "tags": [
          "Fleet Tours"
        ],
        "summary": "Update a fleet tour by tour uid",
        "description": "Updates an existing Fleet Tour by tour UID, and all related jobs. Tour's vehicle is not updatable.",
        "operationId": "updateFleetTourByTourUid",
        "parameters": [
          {
            "name": "tourUid",
            "in": "path",
            "description": "Tour unique identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userIdentity",
            "in": "query",
            "description": "Identity information for auditing purposes.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FleetTourOrchestratorUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TourIdentifier"
                }
              }
            }
          },
          "400": {
            "description": "Invalid conditionally optional tour job fields in the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "404": {
            "description": "Fleet job(s) could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "409": {
            "description": "New fleet job(s) are already assigned to a tour",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "400 ": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorMessageDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Fleet Tours"
        ],
        "summary": "Delete a fleet tour",
        "description": "Deletes a fleet tour by tour UID, and unassign all of its fleet job(s).",
        "operationId": "deleteFleetTourByTourUid",
        "parameters": [
          {
            "name": "tourUid",
            "in": "path",
            "description": "Tour unique identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userIdentity",
            "in": "query",
            "description": "Identity information for auditing purposes.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Operation"
          },
          "404": {
            "description": "Fleet tour not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "409": {
            "description": "Fleet tour not in PLANNED state",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          }
        }
      }
    },
    "/routes/optimize/{tourUid}": {
      "put": {
        "tags": [
          "Tour Optimization"
        ],
        "summary": "Optimizes an existing fleet tour.",
        "description": "The optimized tour will rearrange your planned job(s) to minimize the total time spent on the road.",
        "operationId": "updateOptimizedTourByTourUID",
        "parameters": [
          {
            "name": "tourUid",
            "in": "path",
            "description": "Tour unique identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OptimizeTourOrchestratorUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OptimizeTourComposedResponse"
                }
              }
            }
          },
          "400": {
            "description": "A tour containing job(s) outside of global time window can't be optimized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "404": {
            "description": "Vehicle, job(s), or business account(s) were not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "409": {
            "description": "Retrieved tour has status not equal to 'PLANNED'.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "500": {
            "description": "Invalid pick up & drop off dates from jobs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          }
        }
      }
    },
    "/routes/optimize/{tourUid}/job-precedence": {
      "put": {
        "tags": [
          "Tour Optimization"
        ],
        "summary": "Optimizes an existing fleet tour, using a specific job precedence sequence.",
        "description": "### Optimizes an existing fleet tour, based on the requested job precedence sequence.\n#### Contamination rules do not apply.",
        "operationId": "updateOptimizedTourWithJobPrecedenceByTourUID",
        "parameters": [
          {
            "name": "tourUid",
            "in": "path",
            "description": "Tour unique identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrecedenceTourOrchestratorUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrecedenceTourComposedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    }
                  ]
                },
                "examples": {
                  "REQUEST_CONTAINS_DUPLICATE_JOB_UIDS": {
                    "description": "REQUEST_CONTAINS_DUPLICATE_JOB_UIDS",
                    "$ref": "#/components/examples/REQUEST_CONTAINS_DUPLICATE_JOB_UIDS"
                  },
                  "END_DATE_NOT_EQUAL_TO_START_DATE": {
                    "description": "END_DATE_NOT_EQUAL_TO_START_DATE",
                    "$ref": "#/components/examples/END_DATE_NOT_EQUAL_TO_START_DATE"
                  },
                  "END_DATETIME_IS_BEFORE_START_DATETIME": {
                    "description": "END_DATETIME_IS_BEFORE_START_DATETIME",
                    "$ref": "#/components/examples/END_DATETIME_IS_BEFORE_START_DATETIME"
                  },
                  "OPTIMIZE_TOUR_JOBS_OUTSIDE_OF_GLOBAL_TIME_WINDOW": {
                    "description": "OPTIMIZE_TOUR_JOBS_OUTSIDE_OF_GLOBAL_TIME_WINDOW",
                    "$ref": "#/components/examples/OPTIMIZE_TOUR_JOBS_OUTSIDE_OF_GLOBAL_TIME_WINDOW"
                  },
                  "INVALID_OPTIMIZE_TOUR_GLOBAL_TIME_WINDOW": {
                    "description": "INVALID_OPTIMIZE_TOUR_GLOBAL_TIME_WINDOW",
                    "$ref": "#/components/examples/INVALID_OPTIMIZE_TOUR_GLOBAL_TIME_WINDOW"
                  },
                  "INVALID_REQUEST_SEQUENCE": {
                    "description": "INVALID_REQUEST_SEQUENCE",
                    "$ref": "#/components/examples/INVALID_REQUEST_SEQUENCE"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    }
                  ]
                },
                "examples": {
                  "JOB_MISS_MATCH": {
                    "description": "JOB_MISS_MATCH",
                    "$ref": "#/components/examples/JOB_MISS_MATCH"
                  },
                  "VIN_MISS_MATCH": {
                    "description": "VIN_MISS_MATCH",
                    "$ref": "#/components/examples/VIN_MISS_MATCH"
                  },
                  "VEHICLES_CORE_NOT_FOUND": {
                    "description": "VEHICLES_CORE_NOT_FOUND",
                    "$ref": "#/components/examples/VEHICLES_CORE_NOT_FOUND"
                  },
                  "FLEET_VEHICLE_WITH_INVALID_VEHICLE_CORE": {
                    "description": "FLEET_VEHICLE_WITH_INVALID_VEHICLE_CORE",
                    "$ref": "#/components/examples/FLEET_VEHICLE_WITH_INVALID_VEHICLE_CORE"
                  },
                  "JOB_WITH_INVALID_BUSINESS_ACCOUNT": {
                    "description": "JOB_WITH_INVALID_BUSINESS_ACCOUNT",
                    "$ref": "#/components/examples/JOB_WITH_INVALID_BUSINESS_ACCOUNT"
                  },
                  "LOCATIONS_ASSOCIATED_WITH_JOBS_NOT_FOUND": {
                    "description": "LOCATIONS_ASSOCIATED_WITH_JOBS_NOT_FOUND",
                    "$ref": "#/components/examples/LOCATIONS_ASSOCIATED_WITH_JOBS_NOT_FOUND"
                  },
                  "GEO_LOCATION_NOT_ASSIGNED_TO_JOB": {
                    "description": "GEO_LOCATION_NOT_ASSIGNED_TO_JOB",
                    "$ref": "#/components/examples/GEO_LOCATION_NOT_ASSIGNED_TO_JOB"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "VEHICLE_NOT_AVAILABLE_FOR_TOUR_PLANNING": {
                    "description": "VEHICLE_NOT_AVAILABLE_FOR_TOUR_PLANNING",
                    "$ref": "#/components/examples/VEHICLE_NOT_AVAILABLE_FOR_TOUR_PLANNING"
                  },
                  "JOB_PRODUCT_NOT_ASSIGNED_TO_ORIGIN_LOCATION": {
                    "description": "JOB_PRODUCT_NOT_ASSIGNED_TO_ORIGIN_LOCATION",
                    "$ref": "#/components/examples/JOB_PRODUCT_NOT_ASSIGNED_TO_ORIGIN_LOCATION"
                  },
                  "ORIGIN_LOCATION_DOES_NOT_HAVE_ASSIGNED_PRODUCTS": {
                    "description": "ORIGIN_LOCATION_DOES_NOT_HAVE_ASSIGNED_PRODUCTS",
                    "$ref": "#/components/examples/ORIGIN_LOCATION_DOES_NOT_HAVE_ASSIGNED_PRODUCTS"
                  },
                  "TOUR_CANNOT_BE_OPTIMIZED": {
                    "description": "TOUR_CANNOT_BE_OPTIMIZED",
                    "$ref": "#/components/examples/TOUR_CANNOT_BE_OPTIMIZED"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/jobs/{jobUid}": {
      "put": {
        "tags": [
          "Fleet Jobs"
        ],
        "summary": "Update fleet job",
        "description": "Updates an existing fleet job by job UID, if it's not assigned to a tour.",
        "operationId": "updateFleetJobByJobUid",
        "parameters": [
          {
            "name": "jobUid",
            "in": "path",
            "description": "Job identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userIdentity",
            "in": "query",
            "description": "Identity information for auditing purposes.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FleetJobUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FleetJobResponse"
                }
              }
            }
          },
          "400": {
            "description": "Job origin and destination are the same location",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "404": {
            "description": "Specified origin/destination locations not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "409": {
            "description": "Product is not assigned to the origin location",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          }
        }
      }
    },
    "/vehicles": {
      "get": {
        "tags": [
          "Fleet Vehicle"
        ],
        "summary": "Get all fleet vehicles",
        "description": "Return a list of all fleet vehicles.",
        "operationId": "getAllFleetVehicles",
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VehicleComposedResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Vehicle(s) in core not found"
          }
        }
      },
      "post": {
        "tags": [
          "Fleet Vehicle"
        ],
        "summary": "Create fleet vehicle",
        "description": "Creates a new fleet vehicle",
        "operationId": "createFleetVehicle",
        "parameters": [
          {
            "name": "userIdentity",
            "in": "query",
            "description": "Identity information for auditing purposes.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FleetVehicleCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Operation",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "Bad request"
          },
          "409": {
            "description": "If a fleet vehicle with the same vehicle identification number (VIN) already exists."
          }
        }
      }
    },
    "/tours": {
      "get": {
        "tags": [
          "Fleet Tours"
        ],
        "summary": "Get all fleet tours",
        "description": "Returns a list of all fleet tours, along with their vehicle details. If there are no tours, list is empty.",
        "operationId": "getAllFleetTours",
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TourComposedResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Missing tour's fleet vehicle",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorMessageDto"
                  }
                }
              }
            }
          },
          "404 ": {
            "description": "Missing fleet vehicle's vehicle-core info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorMessageDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Fleet Tours"
        ],
        "summary": "Create multiple fleet tours",
        "description": "Creates a new Fleet Tour for each tour request in the provided list",
        "operationId": "createFleetTours",
        "parameters": [
          {
            "name": "userIdentity",
            "in": "query",
            "description": "Identity information for auditing purposes.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FleetTourOrchestratorCreateRequest"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TourIdentifier"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request contains duplicate fleet job UIDs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "404": {
            "description": " Tour(s) assigned to not existing fleet vehicle(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "409": {
            "description": "Fleet job(s) are already assigned to a tour",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "400 ": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorMessageDto"
                }
              }
            }
          }
        }
      }
    },
    "/routes/optimize": {
      "post": {
        "tags": [
          "Tour Optimization"
        ],
        "summary": "Creates optimized fleet tour(s)",
        "description": "The optimized tour(s) will rearrange your planned job(s) to minimize the total time spent on the road.",
        "operationId": "createOptimizedTours",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OptimizeTourOrchestratorCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OptimizeTourComposedResponse"
                }
              }
            }
          },
          "400": {
            "description": "A tour containing job(s) outside of global time window can't be optimized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "404": {
            "description": "Vehicle(s), job(s), or business account(s) were not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "500": {
            "description": "Invalid pick up & drop off dates from jobs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          }
        }
      }
    },
    "/routes/optimize/job-precedence": {
      "post": {
        "tags": [
          "Tour Optimization"
        ],
        "summary": "Create a new optimized fleet tour, using a specific job precedence sequence.",
        "description": "### Creates a new optimized fleet tour, based on the requested job precedence sequence.\n#### Contamination rules do not apply.",
        "operationId": "createOptimizedTourWithJobPrecedence",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrecedenceTourOrchestratorCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrecedenceTourComposedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    }
                  ]
                },
                "examples": {
                  "REQUEST_CONTAINS_DUPLICATE_JOB_UIDS": {
                    "description": "REQUEST_CONTAINS_DUPLICATE_JOB_UIDS",
                    "$ref": "#/components/examples/REQUEST_CONTAINS_DUPLICATE_JOB_UIDS"
                  },
                  "END_DATE_NOT_EQUAL_TO_START_DATE": {
                    "description": "END_DATE_NOT_EQUAL_TO_START_DATE",
                    "$ref": "#/components/examples/END_DATE_NOT_EQUAL_TO_START_DATE"
                  },
                  "END_DATETIME_IS_BEFORE_START_DATETIME": {
                    "description": "END_DATETIME_IS_BEFORE_START_DATETIME",
                    "$ref": "#/components/examples/END_DATETIME_IS_BEFORE_START_DATETIME"
                  },
                  "OPTIMIZE_TOUR_JOBS_OUTSIDE_OF_GLOBAL_TIME_WINDOW": {
                    "description": "OPTIMIZE_TOUR_JOBS_OUTSIDE_OF_GLOBAL_TIME_WINDOW",
                    "$ref": "#/components/examples/OPTIMIZE_TOUR_JOBS_OUTSIDE_OF_GLOBAL_TIME_WINDOW"
                  },
                  "INVALID_OPTIMIZE_TOUR_GLOBAL_TIME_WINDOW": {
                    "description": "INVALID_OPTIMIZE_TOUR_GLOBAL_TIME_WINDOW",
                    "$ref": "#/components/examples/INVALID_OPTIMIZE_TOUR_GLOBAL_TIME_WINDOW"
                  },
                  "INVALID_REQUEST_SEQUENCE": {
                    "description": "INVALID_REQUEST_SEQUENCE",
                    "$ref": "#/components/examples/INVALID_REQUEST_SEQUENCE"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    }
                  ]
                },
                "examples": {
                  "JOB_MISS_MATCH": {
                    "description": "JOB_MISS_MATCH",
                    "$ref": "#/components/examples/JOB_MISS_MATCH"
                  },
                  "VIN_MISS_MATCH": {
                    "description": "VIN_MISS_MATCH",
                    "$ref": "#/components/examples/VIN_MISS_MATCH"
                  },
                  "VEHICLES_CORE_NOT_FOUND": {
                    "description": "VEHICLES_CORE_NOT_FOUND",
                    "$ref": "#/components/examples/VEHICLES_CORE_NOT_FOUND"
                  },
                  "FLEET_VEHICLE_WITH_INVALID_VEHICLE_CORE": {
                    "description": "FLEET_VEHICLE_WITH_INVALID_VEHICLE_CORE",
                    "$ref": "#/components/examples/FLEET_VEHICLE_WITH_INVALID_VEHICLE_CORE"
                  },
                  "JOB_WITH_INVALID_BUSINESS_ACCOUNT": {
                    "description": "JOB_WITH_INVALID_BUSINESS_ACCOUNT",
                    "$ref": "#/components/examples/JOB_WITH_INVALID_BUSINESS_ACCOUNT"
                  },
                  "LOCATIONS_ASSOCIATED_WITH_JOBS_NOT_FOUND": {
                    "description": "LOCATIONS_ASSOCIATED_WITH_JOBS_NOT_FOUND",
                    "$ref": "#/components/examples/LOCATIONS_ASSOCIATED_WITH_JOBS_NOT_FOUND"
                  },
                  "GEO_LOCATION_NOT_ASSIGNED_TO_JOB": {
                    "description": "GEO_LOCATION_NOT_ASSIGNED_TO_JOB",
                    "$ref": "#/components/examples/GEO_LOCATION_NOT_ASSIGNED_TO_JOB"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "VEHICLE_NOT_AVAILABLE_FOR_TOUR_PLANNING": {
                    "description": "VEHICLE_NOT_AVAILABLE_FOR_TOUR_PLANNING",
                    "$ref": "#/components/examples/VEHICLE_NOT_AVAILABLE_FOR_TOUR_PLANNING"
                  },
                  "JOB_PRODUCT_NOT_ASSIGNED_TO_ORIGIN_LOCATION": {
                    "description": "JOB_PRODUCT_NOT_ASSIGNED_TO_ORIGIN_LOCATION",
                    "$ref": "#/components/examples/JOB_PRODUCT_NOT_ASSIGNED_TO_ORIGIN_LOCATION"
                  },
                  "ORIGIN_LOCATION_DOES_NOT_HAVE_ASSIGNED_PRODUCTS": {
                    "description": "ORIGIN_LOCATION_DOES_NOT_HAVE_ASSIGNED_PRODUCTS",
                    "$ref": "#/components/examples/ORIGIN_LOCATION_DOES_NOT_HAVE_ASSIGNED_PRODUCTS"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/jobs": {
      "get": {
        "tags": [
          "Fleet Jobs"
        ],
        "summary": "Get all fleet jobs",
        "description": "Returns a list of all fleet jobs, along with their business details. If there are no jobs, list is empty.",
        "operationId": "getAllFleetJobs",
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobComposedResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "JOB_WITH_INVALID_BUSINESS_ACCOUNT": {
                    "description": "JOB_WITH_INVALID_BUSINESS_ACCOUNT",
                    "$ref": "#/components/examples/JOB_WITH_INVALID_BUSINESS_ACCOUNT"
                  },
                  "LOCATIONS_ASSOCIATED_WITH_JOBS_NOT_FOUND": {
                    "description": "LOCATIONS_ASSOCIATED_WITH_JOBS_NOT_FOUND",
                    "$ref": "#/components/examples/LOCATIONS_ASSOCIATED_WITH_JOBS_NOT_FOUND"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Fleet Jobs"
        ],
        "summary": "Create fleet job",
        "description": "Creates a new fleet job",
        "operationId": "createFleetJob",
        "parameters": [
          {
            "name": "userIdentity",
            "in": "query",
            "description": "Identity information for auditing purposes.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FleetJobCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Operation"
          },
          "400": {
            "description": "Job origin and destination are the same location",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "404": {
            "description": "Product not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "409": {
            "description": "Product is not assigned to the origin location",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          }
        }
      }
    },
    "/tours/{tourUid}/details": {
      "get": {
        "tags": [
          "Fleet Tours"
        ],
        "summary": "Get fleet tour details such as jobs, breaks and related business account information",
        "description": "Returns a list of all fleet tour jobs, breaks and the corresponding business accounts, based on the provided tour uid",
        "operationId": "getFleetTourByTourUid",
        "parameters": [
          {
            "name": "tourUid",
            "in": "path",
            "description": "Tour unique identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TourDetailsComposedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Job(s) assigned to not existing business account(s) or tour to not existing fleet-vehicle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          }
        }
      }
    },
    "/tours/filtered": {
      "get": {
        "tags": [
          "Fleet Tours"
        ],
        "summary": "Get fleet tours at depot within optional time range.",
        "description": "Returns a list of all fleet tours at depot within the optional time range, along with their vehicle details. If there are no tours, list is empty.",
        "operationId": "getFleetToursFiltered",
        "parameters": [
          {
            "name": "depotId",
            "in": "query",
            "description": "Depot identifier.",
            "required": false,
            "schema": {
              "maxLength": 255,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "startDateFrom",
            "in": "query",
            "description": "Optional tour start date filter.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDateTo",
            "in": "query",
            "description": "Optional tour end date filter.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TourComposedResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Missing tour's fleet vehicle",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorMessageDto"
                  }
                }
              }
            }
          },
          "404 ": {
            "description": "Missing fleet vehicle's vehicle-core info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorMessageDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/jobs/search": {
      "get": {
        "tags": [
          "Fleet Jobs"
        ],
        "summary": "Get all fleet jobs while excluding specific of them",
        "description": "Returns a list of all fleet jobs, along with their business details. If there are no jobs, list is empty.",
        "operationId": "getFleetJobsByCriteriaFilter",
        "parameters": [
          {
            "name": "excludeJobUIDs",
            "in": "query",
            "description": "Job UIDs which will be excluded",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": "LKnPKAYKvf"
          },
          {
            "name": "depotId",
            "in": "query",
            "description": "Depot identifier",
            "required": false,
            "schema": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            },
            "example": "AvO78iot3x"
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Job status to search by",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string",
                "description": "Defines all possible statuses of a Job",
                "enum": [
                  "TO_DO",
                  "PENDING",
                  "PLANNED",
                  "ENROUTE",
                  "DELIVERED",
                  "FAILED",
                  "RETURNED",
                  "CANCELLED"
                ]
              }
            },
            "example": "TO_DO"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date for job search",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2024-11-15T23:59:59"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date for job search",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2024-11-15T23:59:59"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobComposedResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    }
                  ]
                },
                "examples": {
                  "END_DATETIME_IS_BEFORE_START_DATETIME": {
                    "description": "END_DATETIME_IS_BEFORE_START_DATETIME",
                    "$ref": "#/components/examples/END_DATETIME_IS_BEFORE_START_DATETIME"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "JOB_WITH_INVALID_BUSINESS_ACCOUNT": {
                    "description": "JOB_WITH_INVALID_BUSINESS_ACCOUNT",
                    "$ref": "#/components/examples/JOB_WITH_INVALID_BUSINESS_ACCOUNT"
                  },
                  "LOCATIONS_ASSOCIATED_WITH_JOBS_NOT_FOUND": {
                    "description": "LOCATIONS_ASSOCIATED_WITH_JOBS_NOT_FOUND",
                    "$ref": "#/components/examples/LOCATIONS_ASSOCIATED_WITH_JOBS_NOT_FOUND"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ExceptionalPeriod": {
        "type": "object",
        "properties": {
          "period_begin": {
            "type": "string",
            "description": "Begin of the exception. SecurityScheme.In UTC, time_zone field can be used to convert to local time.",
            "example": "2024-11-15T23:59:59"
          },
          "period_end": {
            "type": "string",
            "description": "End of the exception. In UTC, time_zone field can be used to convert to local time.",
            "example": "2024-11-15T23:59:59"
          }
        },
        "description": "Specifies one exceptional period for opening or access hours."
      },
      "FleetElectricVehicleData": {
        "type": "object",
        "properties": {
          "soc": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "description": "Current state of charge of EV's battery. Represents the current level of charge as a percentage (%).",
            "format": "int32",
            "example": 55
          },
          "moSoc": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "description": "Minimum operational state of charge of the EV's battery. Represents the minimum acceptable level of charge required for normal operation. Below this level, the vehicle may experience performance limitations or operational issues.",
            "format": "int32",
            "example": 80
          }
        },
        "description": "Data specific to electric vehicles. This field contains information relevant only if the vehicle is electric."
      },
      "FleetVehicleResponse": {
        "required": [
          "createdDate",
          "status",
          "timeZoneId",
          "vehicleIdentificationNumber",
          "workingHours"
        ],
        "type": "object",
        "properties": {
          "vehicleCoreUuid": {
            "type": "string",
            "description": "It's the vehicle UUID which is related to svc-vehicle-core microservice.",
            "format": "uuid",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "name": {
            "maxLength": 20,
            "type": "string",
            "description": "It's the name of the Vehicle.",
            "example": "HKN"
          },
          "employeeUid": {
            "maxLength": 50,
            "type": "string",
            "description": "It's the employee unique identifier(uid) which is related to svc-employee microservice.",
            "example": "epl11-33-2"
          },
          "depotId": {
            "maxLength": 255,
            "type": "string",
            "description": "Indicates the identification number of the depot in which the vehicle is stored.",
            "example": "12345"
          },
          "vehicleIdentificationNumber": {
            "maxLength": 30,
            "type": "string",
            "description": "Identifies the vehicle identification number (VIN) of the vehicle.",
            "example": "4Y1SL65848Z411444"
          },
          "licensePlateNumber": {
            "maxLength": 15,
            "type": "string",
            "description": "A numeric or alphanumeric id that uniquely identifies the vehicle within the issuing region's vehicle register.",
            "example": "EF87867"
          },
          "status": {
            "type": "string",
            "description": "Its the status of the vehicle.",
            "example": "AVAILABLE",
            "enum": [
              "AVAILABLE",
              "PLANNED",
              "ENROUTE",
              "OUT_OF_ORDER"
            ]
          },
          "lastServiceDate": {
            "type": "string",
            "description": "It's the date on which the vehicle performed the last service.",
            "example": "2024-11-15T23:59:59"
          },
          "nextServiceDate": {
            "type": "string",
            "description": "It's the date on which the vehicle has to perform the next service.",
            "example": "2024-11-15T23:59:59"
          },
          "inspectionExpirationDate": {
            "type": "string",
            "description": "The date where the inspection is expiring.",
            "example": "2024-11-15T23:59:59"
          },
          "coordinates": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "odometer": {
            "type": "number",
            "description": "Shows the distance traveled by the corresponding vehicle.",
            "format": "double",
            "example": 345789.98
          },
          "workingHours": {
            "$ref": "#/components/schemas/Hours"
          },
          "timeZoneId": {
            "maxLength": 80,
            "type": "string",
            "description": "Time Zone Id that applies to the vehicle.",
            "example": "Europe/Rome"
          },
          "electricVehicleData": {
            "$ref": "#/components/schemas/FleetElectricVehicleData"
          },
          "createdDate": {
            "type": "string",
            "description": "Shows the distance traveled by the corresponding vehicle.",
            "example": "2024-11-15T23:59:59"
          },
          "lastModifiedDate": {
            "type": "string",
            "description": "Shows the distance traveled by the corresponding vehicle.",
            "example": "2024-11-15T23:59:59"
          }
        },
        "description": "Defines the details of a fleet vehicle"
      },
      "GeoLocation": {
        "type": "object",
        "properties": {
          "latitude": {
            "type": "string",
            "description": "Latitude of the point in decimal degree. More decimal digits increase precision. Decimal separator: '.'",
            "example": "50.770774"
          },
          "longitude": {
            "type": "string",
            "description": "Longitude of the point in decimal degree.More decimal digits increase precision.Decimal separator: '.'",
            "example": "-126.104965"
          }
        },
        "description": "Defines the coordinates of a geolocation. The geodetic system to be used is WGS 84."
      },
      "Hours": {
        "required": [
          "twentyfourseven"
        ],
        "type": "object",
        "properties": {
          "twentyfourseven": {
            "type": "boolean",
            "description": "True to represent 24 hours a day and 7 days a week, except the given exceptions.",
            "example": false
          },
          "regular_hours": {
            "type": "array",
            "description": "Regular hours, weekday-based. Only to be used if twentyfourseven=false, then this field needs to contain at least one RegularHours object.",
            "items": {
              "$ref": "#/components/schemas/RegularHours"
            }
          },
          "exceptional_openings": {
            "type": "array",
            "description": "Exceptions for specified calendar dates, time-range based. Periods of exceptional accessibility. Additional to regular_hours. May overlap regular rules.",
            "items": {
              "$ref": "#/components/schemas/ExceptionalPeriod"
            }
          },
          "exceptional_closings": {
            "type": "array",
            "description": "Exceptions for specified calendar dates, time-range based. Periods of exceptional inaccessibility. Overwriting regular_hours and exceptional_openings. Should not overlap exceptional_openings.",
            "items": {
              "$ref": "#/components/schemas/ExceptionalPeriod"
            }
          }
        },
        "description": "Opening and access hours."
      },
      "RegularHours": {
        "required": [
          "period_begin",
          "period_end",
          "weekday"
        ],
        "type": "object",
        "properties": {
          "weekday": {
            "type": "string",
            "description": "Day of week",
            "enum": [
              "MONDAY",
              "TUESDAY",
              "WEDNESDAY",
              "THURSDAY",
              "FRIDAY",
              "SATURDAY",
              "SUNDAY"
            ]
          },
          "period_begin": {
            "maxLength": 5,
            "minLength": 0,
            "pattern": "([0-1][0-9]|2[0-3]):[0-5][0-9]",
            "type": "string",
            "description": "Begin of the regular period, in local time, given in hours and minutes. Must be in 24h format with leading zeros. Example: \"18:15\". Hour/Minute separator: \":\" Regex: ([0-1][0-9]|2[0-3]):[0-5][0-9].",
            "example": "07:00"
          },
          "period_end": {
            "maxLength": 5,
            "minLength": 0,
            "pattern": "([0-1][0-9]|2[0-3]):[0-5][0-9]",
            "type": "string",
            "description": "End of the regular period, in local time, syntax as for period_begin. Must be later than period_begin.",
            "example": "18:00"
          }
        },
        "description": "Regular recurring operation or access hours."
      },
      "FleetVehicleUpdateRequest": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "vehicleCoreUuid": {
            "type": "string",
            "description": "It's the vehicle UUID which is related to svc-vehicle-core microservice.",
            "format": "uuid",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "employeeUid": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "It's the employee unique identifier(uid) which is related to svc-employee microservice.",
            "example": "epl11-33-2"
          },
          "name": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "It's the name of the Vehicle.",
            "example": "HKN"
          },
          "depotId": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Indicates the identification number of the depot in which the vehicle is stored.",
            "example": "12345"
          },
          "licensePlateNumber": {
            "maxLength": 15,
            "minLength": 0,
            "type": "string",
            "description": "A numeric or alphanumeric id that uniquely identifies the vehicle within the issuing region's vehicle register.",
            "example": "EF87867"
          },
          "status": {
            "type": "string",
            "description": "Its the status of the vehicle.",
            "example": "AVAILABLE",
            "enum": [
              "AVAILABLE",
              "PLANNED",
              "ENROUTE",
              "OUT_OF_ORDER"
            ]
          },
          "lastServiceDate": {
            "type": "string",
            "description": "It's the date on which the vehicle performed the last service.",
            "example": "2024-11-15T23:59:59"
          },
          "nextServiceDate": {
            "type": "string",
            "description": "It's the date on which the vehicle has to perform the next service.",
            "example": "2024-11-15T23:59:59"
          },
          "inspectionExpirationDate": {
            "type": "string",
            "description": "The date where the inspection is expiring.",
            "example": "2024-11-15T23:59:59"
          },
          "coordinates": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "odometer": {
            "type": "number",
            "description": "Shows the distance traveled by the corresponding vehicle.",
            "format": "double",
            "example": 345789.98
          },
          "electricVehicleData": {
            "$ref": "#/components/schemas/FleetElectricVehicleData"
          }
        }
      },
      "TourIdentifier": {
        "required": [
          "tourUid"
        ],
        "type": "object",
        "properties": {
          "tourUid": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Tour unique identifier",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          }
        },
        "description": "Object containing the unique identifier of the requested/modified tour."
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "description": "Affected field"
          },
          "message": {
            "type": "string",
            "description": "Validation message"
          }
        },
        "description": "List of validation errors"
      },
      "ValidationErrorMessageDto": {
        "required": [
          "errorCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "The error message",
            "example": "Example error message"
          },
          "errorCode": {
            "type": "string",
            "description": "The error code",
            "example": "EXAMPLE_ERROR_CODE"
          },
          "validationErrors": {
            "type": "array",
            "description": "List of validation errors",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "ErrorMessageDto": {
        "required": [
          "errorCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "The error message",
            "example": "Example error message"
          },
          "errorCode": {
            "type": "string",
            "description": "The error code",
            "example": "EXAMPLE_ERROR_CODE"
          }
        }
      },
      "FleetTourJobOrchestratorRequest": {
        "required": [
          "endDate",
          "jobUid",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "jobUid": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Job unique identifier",
            "example": "08a8c5d2f13b9100"
          },
          "startDate": {
            "type": "string",
            "description": "Start date of this job",
            "example": "2024-11-15T23:59:59"
          },
          "endDate": {
            "type": "string",
            "description": "End date of this job",
            "example": "2024-11-15T23:59:59"
          },
          "violatedPenaltyRuleTypes": {
            "maxItems": 50,
            "minItems": 0,
            "uniqueItems": true,
            "type": "array",
            "description": "Violated job penalty rule types",
            "items": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string",
              "description": "Violated job penalty rule types"
            }
          }
        },
        "description": "Defines the orchestrator job request of a fleet tour"
      },
      "FleetTourOrchestratorUpdateRequest": {
        "required": [
          "endDate",
          "jobs",
          "polyline",
          "startDate",
          "totalDistance",
          "totalTime"
        ],
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "description": "Start date of this tour",
            "example": "2024-11-15T23:59:59"
          },
          "endDate": {
            "type": "string",
            "description": "End date of this tour",
            "example": "2024-11-15T23:59:59"
          },
          "jobs": {
            "type": "array",
            "description": "Defines fleet tour job information",
            "items": {
              "$ref": "#/components/schemas/FleetTourJobOrchestratorRequest"
            }
          },
          "vehicleBreak": {
            "$ref": "#/components/schemas/VehicleBreakRequest"
          },
          "totalTime": {
            "type": "integer",
            "description": "Total tour duration time in seconds",
            "format": "int64",
            "example": 155
          },
          "totalDistance": {
            "type": "number",
            "description": "Total tour distance",
            "format": "double",
            "example": 500.9
          },
          "polyline": {
            "$ref": "#/components/schemas/Polyline"
          },
          "transitions": {
            "type": "array",
            "description": "Tour transition details",
            "items": {
              "$ref": "#/components/schemas/Transition"
            }
          }
        },
        "description": "Defines the update request of a fleet tour"
      },
      "Polyline": {
        "required": [
          "points"
        ],
        "type": "object",
        "properties": {
          "points": {
            "type": "string",
            "description": "Multiple points of geo coordinates, encoded into a String"
          }
        },
        "description": "Tour polyline to be displayed on the map"
      },
      "Transition": {
        "required": [
          "distance",
          "endDate",
          "startDate",
          "vehicleIsEmpty"
        ],
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "description": "Transition start date time",
            "example": "2024-11-15T23:59:59"
          },
          "endDate": {
            "type": "string",
            "description": "Transition end date time",
            "example": "2024-11-15T23:59:59"
          },
          "distance": {
            "type": "number",
            "description": "Transition distance in meters",
            "format": "double",
            "example": 125.9
          },
          "waitDuration": {
            "type": "integer",
            "description": "Transition wait duration in seconds",
            "format": "int32",
            "example": 120
          },
          "vehicleIsEmpty": {
            "type": "boolean",
            "description": "Defines if the vehicle is empty during transition",
            "example": false
          }
        },
        "description": "Defines tour transition details.A transition during a tour occurs when a vehicle moves between locations to load and/or unload product(s)."
      },
      "VehicleBreakRequest": {
        "required": [
          "endDateTime",
          "startDateTime"
        ],
        "type": "object",
        "properties": {
          "startDateTime": {
            "type": "string",
            "description": "Vehicle start date time",
            "example": "2024-11-15T23:59:59"
          },
          "endDateTime": {
            "type": "string",
            "description": "Vehicle end date time",
            "example": "2024-11-15T23:59:59"
          },
          "jobUid": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Job identifier of the job which is before/after the break"
          }
        },
        "description": "Vehicle break request inside of a tour"
      },
      "AccountContactResponse": {
        "type": "object",
        "properties": {
          "firstName": {
            "maxLength": 255,
            "type": "string",
            "description": "First name",
            "example": "John"
          },
          "lastName": {
            "maxLength": 255,
            "type": "string",
            "description": "Last name",
            "example": "Doe"
          },
          "phoneNumber": {
            "maxLength": 80,
            "type": "string",
            "description": "Phone number",
            "example": "+498001122333"
          },
          "email": {
            "maxLength": 255,
            "type": "string",
            "description": "Email address",
            "example": "john.doe@energystacks.io"
          }
        },
        "description": "Defines the details of an account contact"
      },
      "BusinessAccountReduceResponse": {
        "required": [
          "type",
          "uid"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "maxLength": 50,
            "type": "string",
            "description": "Business account unique identifier",
            "example": "AvO78iot3x"
          },
          "depotId": {
            "maxLength": 255,
            "type": "string",
            "description": "Depot identifier",
            "example": "AvO78iot3x"
          },
          "companyName": {
            "maxLength": 255,
            "type": "string",
            "description": "Company name",
            "example": "P3"
          },
          "contact": {
            "$ref": "#/components/schemas/AccountContactResponse"
          },
          "type": {
            "maxLength": 255,
            "type": "string",
            "description": "Business account type name",
            "example": "Depot"
          }
        },
        "description": "Defines the details of a business account"
      },
      "BusinessAccountResponse": {
        "required": [
          "type",
          "uid"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "maxLength": 50,
            "type": "string",
            "description": "Business account unique identifier",
            "example": "AvO78iot3x"
          },
          "depotId": {
            "maxLength": 255,
            "type": "string",
            "description": "Depot identifier",
            "example": "AvO78iot3x"
          },
          "companyName": {
            "maxLength": 255,
            "type": "string",
            "description": "Company name",
            "example": "P3"
          },
          "contact": {
            "$ref": "#/components/schemas/AccountContactResponse"
          },
          "type": {
            "maxLength": 255,
            "type": "string",
            "description": "Business account type name",
            "example": "Depot"
          },
          "locations": {
            "type": "array",
            "description": "Business account locations",
            "items": {
              "$ref": "#/components/schemas/LocationResponse"
            }
          }
        },
        "description": "Defines the details of a business account"
      },
      "FleetJobTypeNameResponse": {
        "required": [
          "jobType"
        ],
        "type": "object",
        "properties": {
          "jobType": {
            "maxLength": 30,
            "type": "string",
            "description": "Job type name",
            "example": "INBOUND"
          }
        },
        "description": "Contains only the name field of a Job Type"
      },
      "FleetProductResponse": {
        "required": [
          "name",
          "quantity",
          "uid"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "maxLength": 50,
            "type": "string",
            "description": "Product identifier",
            "example": "AvO78iot3x"
          },
          "name": {
            "maxLength": 255,
            "type": "string",
            "description": "Product name",
            "example": "Organic Fertilizer"
          },
          "risk": {
            "maxLength": 20,
            "type": "string",
            "description": "Product risk",
            "example": "High"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity of the transferred product",
            "format": "double",
            "example": 10.5
          }
        },
        "description": "Defines the details of a product"
      },
      "FleetRouteJobDetailsResponse": {
        "required": [
          "businessAccountUid",
          "jobType",
          "jobUid",
          "jobVisitOrder",
          "products"
        ],
        "type": "object",
        "properties": {
          "jobUid": {
            "maxLength": 50,
            "type": "string",
            "description": "Job identifier",
            "example": "08a8c5d2f13b9100"
          },
          "depotId": {
            "maxLength": 255,
            "type": "string",
            "description": "Depot identifier",
            "example": "AvO78iot3x"
          },
          "businessAccountUid": {
            "maxLength": 255,
            "type": "string",
            "description": "Supplier identifier",
            "example": "LKnPKAYKvf"
          },
          "jobType": {
            "maxLength": 30,
            "type": "string",
            "description": "Job type name",
            "example": "INBOUND"
          },
          "jobVisitOrder": {
            "type": "integer",
            "description": "Defines the job order",
            "format": "int32",
            "example": 5
          },
          "startDate": {
            "type": "string",
            "description": "Start date of this job",
            "example": "2024-11-15T23:59:59"
          },
          "endDate": {
            "type": "string",
            "description": "End date of this job",
            "example": "2024-11-15T23:59:59"
          },
          "totalTime": {
            "type": "integer",
            "description": "Total job duration time in seconds",
            "format": "int64",
            "example": 155
          },
          "products": {
            "type": "array",
            "description": "Details of product(s)",
            "items": {
              "$ref": "#/components/schemas/FleetProductResponse"
            }
          },
          "destination": {
            "$ref": "#/components/schemas/RoutePointDetailed"
          },
          "origin": {
            "$ref": "#/components/schemas/RoutePointDetailed"
          }
        },
        "description": "Defines only the necessary details of a route job"
      },
      "LocationAddress": {
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 255,
            "type": "string",
            "description": "Address description."
          },
          "street": {
            "maxLength": 255,
            "type": "string",
            "description": "Street name.",
            "example": "Main street"
          },
          "zipCode": {
            "maxLength": 50,
            "type": "string",
            "description": "Zip code.",
            "example": "20535"
          },
          "city": {
            "maxLength": 255,
            "type": "string",
            "description": "City in which location is located in.",
            "example": "Stuttgart"
          },
          "country": {
            "maxLength": 50,
            "type": "string",
            "description": "Country in which location is located in.",
            "example": "Germany"
          },
          "geoLocation": {
            "$ref": "#/components/schemas/GeoLocation"
          }
        },
        "description": "Location address"
      },
      "LocationPenaltyAttributes": {
        "type": "object",
        "properties": {
          "productUid": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Product unique identifier",
            "example": "AvO78iot3x"
          },
          "locationTypeUid": {
            "type": "integer",
            "description": "Location type unique identifier",
            "format": "int64",
            "example": 2
          },
          "locationRiskUid": {
            "type": "integer",
            "description": "Location risk unique identifier",
            "format": "int64",
            "example": 1
          }
        },
        "description": "Defines the location penalty attributes. At least one field is non-null"
      },
      "LocationPenaltyRules": {
        "type": "object",
        "properties": {
          "penaltyAttributes": {
            "$ref": "#/components/schemas/LocationPenaltyAttributes"
          },
          "penaltyAttributeRules": {
            "type": "array",
            "description": "Location penalty attributes from the forbidden destinations based on previous jobs attribute, and the penalty info",
            "items": {
              "$ref": "#/components/schemas/PenaltyAttributeRule"
            }
          }
        },
        "description": "Defines the details of penalty rules"
      },
      "LocationResponse": {
        "required": [
          "addressType",
          "addressTypeUid",
          "locationRiskUid",
          "locationStatusUid",
          "locationTypeUid",
          "risk",
          "status",
          "type",
          "uid"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "maxLength": 50,
            "type": "string",
            "description": "Location uid",
            "example": "AvO78iot3x"
          },
          "locationName": {
            "maxLength": 255,
            "type": "string",
            "description": "Location name",
            "example": "P3"
          },
          "address": {
            "$ref": "#/components/schemas/LocationAddress"
          },
          "loadingValidFrom": {
            "$ref": "#/components/schemas/Hours"
          },
          "loadingValidTo": {
            "$ref": "#/components/schemas/Hours"
          },
          "unloadingValidFrom": {
            "$ref": "#/components/schemas/Hours"
          },
          "unloadingValidTo": {
            "$ref": "#/components/schemas/Hours"
          },
          "locationStatusUid": {
            "type": "integer",
            "description": "Business account location status identifier",
            "format": "int64",
            "example": 1
          },
          "status": {
            "maxLength": 255,
            "type": "string",
            "description": "Location status name"
          },
          "addressTypeUid": {
            "type": "integer",
            "description": "Business account location address type identifier",
            "format": "int64",
            "example": 1
          },
          "addressType": {
            "maxLength": 255,
            "type": "string",
            "description": "Business account location address type name",
            "example": "HOME"
          },
          "locationTypeUid": {
            "type": "integer",
            "description": "Business account location type identifier",
            "format": "int64",
            "example": 1
          },
          "type": {
            "maxLength": 255,
            "type": "string",
            "description": "Business account location type name",
            "example": "HEADQUARTERS"
          },
          "locationRiskUid": {
            "type": "integer",
            "description": "Business account location risk identifier",
            "format": "int64",
            "example": 1
          },
          "risk": {
            "maxLength": 255,
            "type": "string",
            "description": "Location risk name"
          },
          "processTime": {
            "minimum": 0,
            "type": "integer",
            "description": "Maximum process time allowed on a location in seconds",
            "format": "int64",
            "example": 600
          },
          "businessAccount": {
            "$ref": "#/components/schemas/BusinessAccountReduceResponse"
          }
        },
        "description": "Defines the details of a business account location"
      },
      "OptimizeTourComposedResponse": {
        "type": "object",
        "properties": {
          "optimizedTours": {
            "type": "array",
            "description": "Optimized tour(s), with their polylines, job & product details, to be confirmed",
            "items": {
              "$ref": "#/components/schemas/OptimizeTourResponse"
            }
          },
          "skippedJobs": {
            "uniqueItems": true,
            "type": "array",
            "description": "Specifies details of unperformed jobs in a Tour.",
            "items": {
              "$ref": "#/components/schemas/SkippedJob"
            }
          },
          "businessAccounts": {
            "type": "array",
            "description": "Details of the business account, associated with these tours",
            "items": {
              "$ref": "#/components/schemas/BusinessAccountResponse"
            }
          },
          "locationMap": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/LocationResponse"
            },
            "description": "Details of the business account locations, associated with these tours"
          },
          "penaltyRules": {
            "type": "array",
            "description": "Tour job penalty rules",
            "items": {
              "$ref": "#/components/schemas/LocationPenaltyRules"
            }
          }
        },
        "description": "Defines details of the optimized tour(s), to be confirmed. Also includes the business accounts associated with each of the jobs."
      },
      "OptimizeTourResponse": {
        "required": [
          "productQuantities",
          "routeJobDetails",
          "transitions",
          "vehicleIdentificationNumber"
        ],
        "type": "object",
        "properties": {
          "vehicleName": {
            "type": "string",
            "description": "It's the name of the Vehicle.",
            "example": "HKN"
          },
          "startDate": {
            "type": "string",
            "description": "Start date of this tour",
            "example": "2024-11-15T23:59:59"
          },
          "endDate": {
            "type": "string",
            "description": "End date of this tour",
            "example": "2024-11-15T23:59:59"
          },
          "totalTime": {
            "type": "integer",
            "description": "Total tour duration time in seconds",
            "format": "int64",
            "example": 155
          },
          "totalDistance": {
            "type": "number",
            "description": "Total tour distance in meters",
            "format": "double",
            "example": 500.9
          },
          "vehicleIdentificationNumber": {
            "maxLength": 30,
            "type": "string",
            "description": "Defines the vehicle identification number (VIN).",
            "example": "4Y1SL65848Z411444"
          },
          "totalJobs": {
            "type": "integer",
            "description": "Total Jobs (count)",
            "format": "int32",
            "example": 6
          },
          "routeJobDetails": {
            "type": "array",
            "description": "List with details for all route jobs",
            "items": {
              "$ref": "#/components/schemas/FleetRouteJobDetailsResponse"
            }
          },
          "vehicleBreak": {
            "$ref": "#/components/schemas/VehicleBreak"
          },
          "productQuantities": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "description": "Summary of all associated tour products. Contains information about their names, and their total quantity transferred.",
              "format": "double"
            },
            "description": "Summary of all associated tour products. Contains information about their names, and their total quantity transferred."
          },
          "polyline": {
            "$ref": "#/components/schemas/Polyline"
          },
          "transitions": {
            "type": "array",
            "description": "Tour transition details",
            "items": {
              "$ref": "#/components/schemas/Transition"
            }
          }
        },
        "description": "Optimized tour response, to be confirmed and stored as a fleet tour."
      },
      "PenaltyAttributeRule": {
        "required": [
          "penalty",
          "type"
        ],
        "type": "object",
        "properties": {
          "productUid": {
            "maxLength": 50,
            "type": "string",
            "description": "Product unique identifier",
            "example": "AvO78iot3x"
          },
          "locationTypeUid": {
            "type": "integer",
            "description": "Location type unique identifier",
            "format": "int64",
            "example": 2
          },
          "locationRiskUid": {
            "type": "integer",
            "description": "Location risk unique identifier",
            "format": "int64",
            "example": 1
          },
          "penalty": {
            "maxLength": 255,
            "type": "string",
            "description": "The penalty of the location attribute parameter combination",
            "example": "86400"
          },
          "type": {
            "maxLength": 255,
            "type": "string",
            "description": "Penalty rule type",
            "example": "1"
          }
        },
        "description": "Defines the response of the location penalty rule. At least one field is non-null (not including the penalty and type fields)"
      },
      "Reasons": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Refers to the skipped error code."
          }
        },
        "description": "A list of reasons that explain why the job was skipped."
      },
      "RoutePointDetailed": {
        "required": [
          "accountLocationUid",
          "geoLocation",
          "locationAddressType",
          "locationRisk",
          "locationType"
        ],
        "type": "object",
        "properties": {
          "accountLocationUid": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Identifier of the business account's location",
            "example": "AvO78iot3x"
          },
          "street": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Street of the route point",
            "example": "Main street"
          },
          "city": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "City of the route point",
            "example": "Munich"
          },
          "zipCode": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Zip code.",
            "example": "20535"
          },
          "geoLocation": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "locationAddressType": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Location address type information",
            "example": "Raw Tank"
          },
          "locationType": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Location type information",
            "example": "Cow"
          },
          "locationRisk": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Location risk information",
            "example": "High"
          },
          "processTime": {
            "minimum": 0,
            "type": "integer",
            "description": "Maximum process time allowed on a location in seconds",
            "format": "int64",
            "example": 600
          }
        },
        "description": "Defines the origin/destination job details."
      },
      "SkippedJob": {
        "type": "object",
        "properties": {
          "jobUid": {
            "type": "string",
            "description": "Job unique identifier."
          },
          "jobType": {
            "$ref": "#/components/schemas/FleetJobTypeNameResponse"
          },
          "reasons": {
            "type": "array",
            "description": "A list of reasons that explain why the job was skipped.",
            "items": {
              "$ref": "#/components/schemas/Reasons"
            }
          }
        },
        "description": "Specifies the details of a skipped job during tour optimization."
      },
      "VehicleBreak": {
        "required": [
          "endDateTime",
          "jobUid",
          "startDateTime"
        ],
        "type": "object",
        "properties": {
          "startDateTime": {
            "type": "string",
            "description": "Vehicle start date time",
            "example": "2024-11-15T23:59:59"
          },
          "endDateTime": {
            "type": "string",
            "description": "Vehicle end date time",
            "example": "2024-11-15T23:59:59"
          },
          "jobUid": {
            "maxLength": 50,
            "type": "string",
            "description": "Job identifier of the job which is before the break"
          }
        },
        "description": "Vehicle break inside of a tour"
      },
      "OptimizeTourOrchestratorUpdateRequest": {
        "required": [
          "endRouteTime",
          "jobUids",
          "startRouteTime"
        ],
        "type": "object",
        "properties": {
          "startRouteTime": {
            "type": "string",
            "description": "The start route date time.",
            "example": "2024-11-15T23:59:59"
          },
          "endRouteTime": {
            "type": "string",
            "description": "The end route date time.",
            "example": "2024-11-15T23:59:59"
          },
          "jobUids": {
            "uniqueItems": true,
            "type": "array",
            "description": "The Job UIDs.",
            "items": {
              "type": "string",
              "description": "The Job UIDs."
            }
          }
        },
        "description": "Single tour optimize update request"
      },
      "PrecedenceTourComposedResponse": {
        "type": "object",
        "properties": {
          "optimizedTour": {
            "$ref": "#/components/schemas/OptimizeTourResponse"
          },
          "skippedJobs": {
            "uniqueItems": true,
            "type": "array",
            "description": "Specifies details of unperformed jobs in a Tour.",
            "items": {
              "$ref": "#/components/schemas/SkippedJob"
            }
          },
          "businessAccounts": {
            "type": "array",
            "description": "Details of the business account, associated with these tours",
            "items": {
              "$ref": "#/components/schemas/BusinessAccountResponse"
            }
          }
        },
        "description": "Defines details of an optimized (based on job precedence sequence) tour, to be confirmed. Also includes the business accounts associated with each of the jobs."
      },
      "PrecedenceJobOrchestratorRequest": {
        "required": [
          "jobPrecedence",
          "jobUID"
        ],
        "type": "object",
        "properties": {
          "jobUID": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Job unique identifier"
          },
          "jobPrecedence": {
            "minimum": 0,
            "type": "integer",
            "description": "Job precedence sequence. Counting starts from 0 and increases by 1.",
            "format": "int32",
            "example": 0
          }
        },
        "description": "Job precedence optimization request, containing job UID along with the requested job precedence sequence"
      },
      "PrecedenceTourOrchestratorUpdateRequest": {
        "required": [
          "endRouteTime",
          "jobs",
          "startRouteTime"
        ],
        "type": "object",
        "properties": {
          "startRouteTime": {
            "type": "string",
            "description": "The start route date time.",
            "example": "2024-11-15T23:59:59"
          },
          "endRouteTime": {
            "type": "string",
            "description": "The end route date time.",
            "example": "2024-11-15T23:59:59"
          },
          "jobs": {
            "type": "array",
            "description": "List of unique job UIDs and their precedence sequence",
            "items": {
              "$ref": "#/components/schemas/PrecedenceJobOrchestratorRequest"
            }
          }
        },
        "description": "Single tour precedence optimize request for updating a tour based on job sequence."
      },
      "FleetJobResponse": {
        "required": [
          "businessAccountUid",
          "createdDate",
          "destinationLocationUid",
          "jobType",
          "jobUid",
          "lastModifiedDate",
          "originLocationUid",
          "products",
          "status"
        ],
        "type": "object",
        "properties": {
          "jobUid": {
            "maxLength": 50,
            "type": "string",
            "description": "Job identifier",
            "example": "08a8c5d2f13b9100"
          },
          "depotId": {
            "maxLength": 255,
            "type": "string",
            "description": "Depot identifier",
            "example": "AvO78iot3x"
          },
          "businessAccountUid": {
            "maxLength": 50,
            "type": "string",
            "description": "Supplier identifier",
            "example": "LKnPKAYKvf"
          },
          "startDate": {
            "type": "string",
            "description": "Start date of this job",
            "example": "2024-11-15T23:59:59"
          },
          "endDate": {
            "type": "string",
            "description": "End date of this job",
            "example": "2024-11-15T23:59:59"
          },
          "jobType": {
            "maxLength": 30,
            "type": "string",
            "description": "Job type name",
            "example": "INBOUND"
          },
          "products": {
            "type": "array",
            "description": "Details of product(s)",
            "items": {
              "$ref": "#/components/schemas/FleetProduct"
            }
          },
          "originLocationUid": {
            "maxLength": 50,
            "type": "string",
            "description": "Origin location identifier"
          },
          "destinationLocationUid": {
            "maxLength": 50,
            "type": "string",
            "description": "Destination location identifier"
          },
          "status": {
            "maxLength": 10,
            "type": "string",
            "description": "Defines all possible statuses of a Job",
            "enum": [
              "TO_DO",
              "PENDING",
              "PLANNED",
              "ENROUTE",
              "DELIVERED",
              "FAILED",
              "RETURNED",
              "CANCELLED"
            ]
          },
          "datePickUpFrom": {
            "type": "string",
            "description": "Earliest date this job can be picked up",
            "example": "2024-11-15T23:59:59"
          },
          "datePickUpTill": {
            "type": "string",
            "description": "Latest date this job can be picked up",
            "example": "2024-11-15T23:59:59"
          },
          "dateDropOffFrom": {
            "type": "string",
            "description": "Earliest date this job can be dropped off",
            "example": "2024-11-15T23:59:59"
          },
          "dateDropOffTill": {
            "type": "string",
            "description": "Latest date this job can be dropped off",
            "example": "2024-11-15T23:59:59"
          },
          "createdDate": {
            "type": "string",
            "description": "Date this job was created",
            "example": "2024-11-15T23:59:59"
          },
          "lastModifiedDate": {
            "type": "string",
            "description": "Date this job was last modified",
            "example": "2024-11-15T23:59:59"
          }
        },
        "description": "Defines the details of a job"
      },
      "FleetProduct": {
        "required": [
          "quantity",
          "uid"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "maxLength": 50,
            "type": "string",
            "description": "Product identifier",
            "example": "1"
          },
          "risk": {
            "maxLength": 20,
            "type": "string",
            "description": "Product risk",
            "example": "High"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity of the transferred product",
            "format": "double",
            "example": 10.5
          }
        },
        "description": "Details of product(s)"
      },
      "FleetJobUpdateRequest": {
        "required": [
          "businessAccountUid",
          "dateDropOffFrom",
          "dateDropOffTill",
          "datePickUpFrom",
          "datePickUpTill",
          "destinationLocationUid",
          "jobTypeUid",
          "originLocationUid",
          "products",
          "status"
        ],
        "type": "object",
        "properties": {
          "depotId": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Depot identifier",
            "example": "LKnPKAYKvf"
          },
          "businessAccountUid": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Supplier identifier",
            "example": "AvO78iot3x"
          },
          "jobTypeUid": {
            "type": "integer",
            "description": "Job type identifier",
            "format": "int64",
            "example": 15
          },
          "products": {
            "type": "array",
            "description": "Details of product(s)",
            "items": {
              "$ref": "#/components/schemas/FleetProductRequest"
            }
          },
          "originLocationUid": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Origin location identifier"
          },
          "destinationLocationUid": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Destination location identifier"
          },
          "status": {
            "type": "string",
            "description": "Defines all possible statuses of a Job",
            "enum": [
              "TO_DO",
              "PENDING",
              "PLANNED",
              "ENROUTE",
              "DELIVERED",
              "FAILED",
              "RETURNED",
              "CANCELLED"
            ]
          },
          "datePickUpFrom": {
            "type": "string",
            "description": "Earliest date this job can be picked up",
            "example": "2024-11-15T23:59:59"
          },
          "datePickUpTill": {
            "type": "string",
            "description": "Latest date this job can be picked up",
            "example": "2024-11-15T23:59:59"
          },
          "dateDropOffFrom": {
            "type": "string",
            "description": "Earliest date this job can be dropped off",
            "example": "2024-11-15T23:59:59"
          },
          "dateDropOffTill": {
            "type": "string",
            "description": "Latest date this job can be dropped off",
            "example": "2024-11-15T23:59:59"
          }
        },
        "description": "Defines the update request of a fleet job"
      },
      "FleetProductRequest": {
        "required": [
          "quantity",
          "uid"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Product identifier",
            "example": "1"
          },
          "risk": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "Product risk",
            "example": "High"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity of the transferred product",
            "format": "double",
            "example": 10.5
          }
        },
        "description": "Defines the fleet product request"
      },
      "FleetVehicleCreateRequest": {
        "required": [
          "status",
          "timeZoneId",
          "vehicleIdentificationNumber",
          "workingHours"
        ],
        "type": "object",
        "properties": {
          "vehicleCoreUuid": {
            "type": "string",
            "description": "It's the vehicle UUID which is related to svc-vehicle-core microservice.",
            "format": "uuid",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "name": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "It's the name of the Vehicle.",
            "example": "HKN"
          },
          "depotId": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Indicates the identification number of the depot in which the vehicle is stored.",
            "example": "12345"
          },
          "vehicleIdentificationNumber": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "Identifies the vehicle identification number (VIN) of the vehicle.",
            "example": "4Y1SL65848Z411444"
          },
          "licensePlateNumber": {
            "maxLength": 15,
            "minLength": 0,
            "type": "string",
            "description": "A numeric or alphanumeric id that uniquely identifies the vehicle within the issuing region's vehicle register.",
            "example": "EF87867"
          },
          "status": {
            "type": "string",
            "description": "Its the status of the vehicle.",
            "example": "AVAILABLE",
            "enum": [
              "AVAILABLE",
              "PLANNED",
              "ENROUTE",
              "OUT_OF_ORDER"
            ]
          },
          "lastServiceDate": {
            "type": "string",
            "description": "It's the date on which the vehicle performed the last service.",
            "example": "2024-11-15T23:59:59"
          },
          "nextServiceDate": {
            "type": "string",
            "description": "It's the date on which the vehicle has to perform the next service.",
            "example": "2024-11-15T23:59:59"
          },
          "inspectionExpirationDate": {
            "type": "string",
            "description": "The date where the inspection is expiring.",
            "example": "2024-11-15T23:59:59"
          },
          "coordinates": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "odometer": {
            "type": "number",
            "description": "Shows the distance traveled by the corresponding vehicle.",
            "format": "double",
            "example": 345789.98
          },
          "workingHours": {
            "$ref": "#/components/schemas/Hours"
          },
          "timeZoneId": {
            "maxLength": 80,
            "minLength": 0,
            "type": "string",
            "description": "Time Zone Id that applies to the vehicle.",
            "example": "Europe/Rome"
          },
          "electricVehicleData": {
            "$ref": "#/components/schemas/FleetElectricVehicleData"
          }
        }
      },
      "FleetTourOrchestratorCreateRequest": {
        "required": [
          "endDate",
          "jobs",
          "polyline",
          "startDate",
          "totalDistance",
          "totalTime",
          "vehicleIdentificationNumber"
        ],
        "type": "object",
        "properties": {
          "vehicleIdentificationNumber": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "Identifies the identification number (VIN) of the vehicle.",
            "example": "4Y1SL65848Z411444"
          },
          "startDate": {
            "type": "string",
            "description": "Start date of this tour",
            "example": "2024-11-15T23:59:59"
          },
          "endDate": {
            "type": "string",
            "description": "End date of this tour",
            "example": "2024-11-15T23:59:59"
          },
          "jobs": {
            "type": "array",
            "description": "Defines fleet tour job information",
            "items": {
              "$ref": "#/components/schemas/FleetTourJobOrchestratorRequest"
            }
          },
          "vehicleBreak": {
            "$ref": "#/components/schemas/VehicleBreakRequest"
          },
          "totalTime": {
            "type": "integer",
            "description": "Total tour duration time in seconds",
            "format": "int64",
            "example": 155
          },
          "totalDistance": {
            "type": "number",
            "description": "Total tour distance",
            "format": "double",
            "example": 500.9
          },
          "polyline": {
            "$ref": "#/components/schemas/Polyline"
          },
          "transitions": {
            "type": "array",
            "description": "Tour transition details",
            "items": {
              "$ref": "#/components/schemas/Transition"
            }
          }
        },
        "description": "Defines the create request of a fleet tour"
      },
      "OptimizeTourOrchestratorCreateRequest": {
        "required": [
          "endRouteTime",
          "jobUids",
          "startRouteTime",
          "vehicleIdentificationNumbers"
        ],
        "type": "object",
        "properties": {
          "startRouteTime": {
            "type": "string",
            "description": "The start route date time.",
            "example": "2024-11-15T23:59:59"
          },
          "endRouteTime": {
            "type": "string",
            "description": "The end route date time.",
            "example": "2024-11-15T23:59:59"
          },
          "vehicleIdentificationNumbers": {
            "uniqueItems": true,
            "type": "array",
            "description": "Vehicle identification numbers of the vehicles.",
            "items": {
              "type": "string",
              "description": "Vehicle identification numbers of the vehicles."
            }
          },
          "jobUids": {
            "uniqueItems": true,
            "type": "array",
            "description": "The Job UIDs.",
            "items": {
              "type": "string",
              "description": "The Job UIDs."
            }
          }
        },
        "description": "Tour(s) optimization create request(s)"
      },
      "PrecedenceTourOrchestratorCreateRequest": {
        "required": [
          "endRouteTime",
          "jobs",
          "startRouteTime",
          "vehicleIdentificationNumber"
        ],
        "type": "object",
        "properties": {
          "startRouteTime": {
            "type": "string",
            "description": "The start route date time.",
            "example": "2024-11-15T23:59:59"
          },
          "endRouteTime": {
            "type": "string",
            "description": "The end route date time.",
            "example": "2024-11-15T23:59:59"
          },
          "vehicleIdentificationNumber": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "Vehicle's identification number."
          },
          "jobs": {
            "type": "array",
            "description": "List of unique job UIDs and their precedence sequence",
            "items": {
              "$ref": "#/components/schemas/PrecedenceJobOrchestratorRequest"
            }
          }
        },
        "description": "Single tour precedence optimize request for creating a tour based on job precedence sequence."
      },
      "FleetJobCreateRequest": {
        "required": [
          "businessAccountUid",
          "dateDropOffFrom",
          "dateDropOffTill",
          "datePickUpFrom",
          "datePickUpTill",
          "destinationLocationUid",
          "jobTypeUid",
          "jobUid",
          "originLocationUid",
          "products"
        ],
        "type": "object",
        "properties": {
          "jobUid": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Job unique identifier",
            "example": "08a8c5d2f13b9100"
          },
          "depotId": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Depot identifier",
            "example": "AvO78iot3x"
          },
          "businessAccountUid": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Supplier identifier",
            "example": "LKnPKAYKvf"
          },
          "jobTypeUid": {
            "type": "integer",
            "description": "Job type identifier",
            "format": "int64",
            "example": 5
          },
          "products": {
            "type": "array",
            "description": "Details of product(s)",
            "items": {
              "$ref": "#/components/schemas/FleetProductRequest"
            }
          },
          "originLocationUid": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Origin location identifier"
          },
          "destinationLocationUid": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Destination location identifier"
          },
          "datePickUpFrom": {
            "type": "string",
            "description": "Earliest date this job can be picked up",
            "example": "2024-11-15T23:59:59"
          },
          "datePickUpTill": {
            "type": "string",
            "description": "Latest date this job can be picked up",
            "example": "2024-11-15T23:59:59"
          },
          "dateDropOffFrom": {
            "type": "string",
            "description": "Earliest date this job can be dropped off",
            "example": "2024-11-15T23:59:59"
          },
          "dateDropOffTill": {
            "type": "string",
            "description": "Latest date this job can be dropped off",
            "example": "2024-11-15T23:59:59"
          }
        },
        "description": "Defines the create request of a fleet job"
      },
      "CombustionEngineVehicleData": {
        "type": "object",
        "properties": {
          "co2Emissions": {
            "type": "number",
            "description": "Vehicle co2 emissions in grams.",
            "format": "double"
          }
        },
        "description": "Defines the information of a vehicle using internal combustion engine."
      },
      "FleetJobSnapshotShortResponse": {
        "required": [
          "businessAccountUid",
          "jobType",
          "jobUid",
          "products",
          "status"
        ],
        "type": "object",
        "properties": {
          "jobUid": {
            "maxLength": 50,
            "type": "string",
            "description": "Job identifier",
            "example": "08a8c5d2f13b9100"
          },
          "depotId": {
            "maxLength": 255,
            "type": "string",
            "description": "Depot identifier",
            "example": "AvO78iot3x"
          },
          "jobType": {
            "maxLength": 30,
            "type": "string",
            "description": "Type of job"
          },
          "status": {
            "maxLength": 10,
            "type": "string",
            "description": "Defines all possible statuses of a Job",
            "enum": [
              "TO_DO",
              "PENDING",
              "PLANNED",
              "ENROUTE",
              "DELIVERED",
              "FAILED",
              "RETURNED",
              "CANCELLED"
            ]
          },
          "products": {
            "type": "array",
            "description": "Details of product(s)",
            "items": {
              "$ref": "#/components/schemas/FleetProductResponse"
            }
          },
          "businessAccountUid": {
            "maxLength": 50,
            "type": "string",
            "description": "Supplier identifier",
            "example": "LKnPKAYKvf"
          }
        },
        "description": "Defines only the necessary details of a job snapshot"
      },
      "FleetTourResponse": {
        "required": [
          "createdDate",
          "endDate",
          "hasPenaltyRuleViolation",
          "jobs",
          "polyline",
          "startDate",
          "status",
          "totalDistance",
          "totalTime",
          "tourUid",
          "vehicleIdentificationNumber"
        ],
        "type": "object",
        "properties": {
          "tourUid": {
            "maxLength": 50,
            "type": "string",
            "description": "Tour identifier",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "vehicleIdentificationNumber": {
            "maxLength": 30,
            "type": "string",
            "description": "Identifies the identification number (VIN) of the vehicle.",
            "example": "4Y1SL65848Z411444"
          },
          "startDate": {
            "type": "string",
            "description": "Planned start date of this tour",
            "example": "2024-11-15T23:59:59"
          },
          "confirmedStartDate": {
            "type": "string",
            "description": "Confirmed start date of this tour",
            "example": "2024-11-15T23:59:59"
          },
          "endDate": {
            "type": "string",
            "description": "Planned end date of this tour",
            "example": "2024-11-15T23:59:59"
          },
          "confirmedEndDate": {
            "type": "string",
            "description": "Confirmed end date of this tour",
            "example": "2024-11-15T23:59:59"
          },
          "jobs": {
            "type": "array",
            "description": "List with details for all jobs of this tour",
            "items": {
              "$ref": "#/components/schemas/FleetJobSnapshotShortResponse"
            }
          },
          "vehicleBreak": {
            "$ref": "#/components/schemas/VehicleBreak"
          },
          "totalTime": {
            "type": "integer",
            "description": "Total tour duration time in seconds",
            "format": "int64",
            "example": 155
          },
          "totalDistance": {
            "type": "number",
            "description": "Total tour distance",
            "format": "double",
            "example": 500.9
          },
          "status": {
            "maxLength": 10,
            "type": "string",
            "description": "Defines all possible tour statuses",
            "enum": [
              "PLANNED",
              "ENROUTE",
              "DELAYED",
              "FAILED",
              "INCOMPLETE",
              "DONE"
            ]
          },
          "polyline": {
            "$ref": "#/components/schemas/Polyline"
          },
          "exported": {
            "type": "boolean",
            "description": "Indicates if this tour has been exported"
          },
          "lastExportedDate": {
            "type": "string",
            "description": "Date this job was created",
            "example": "2024-11-15T23:59:59"
          },
          "createdDate": {
            "type": "string",
            "description": "Date this job was created",
            "example": "2024-11-15T23:59:59"
          },
          "lastModifiedDate": {
            "type": "string",
            "description": "Date this job was last modified",
            "example": "2024-11-15T23:59:59"
          },
          "hasPenaltyRuleViolation": {
            "type": "boolean",
            "description": "Indicates if the tour has at least one penalty rule violation",
            "example": false
          },
          "transitions": {
            "type": "array",
            "description": "Tour transition details",
            "items": {
              "$ref": "#/components/schemas/Transition"
            }
          },
          "notes": {
            "maxLength": 100,
            "type": "string",
            "description": "Optional notes for the tour.",
            "example": "Tour completed on time."
          }
        },
        "description": "Defines the details of a tour"
      },
      "VehicleAndBrandResponse": {
        "required": [
          "uuid"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "The UUID of the vehicle.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "maxLoadingVolume": {
            "type": "number",
            "description": "Vehicles max loading volume.",
            "format": "double",
            "example": 3.5
          },
          "maxGrossWeight": {
            "type": "number",
            "description": "Vehicles max loading weight.",
            "format": "double",
            "example": 10.5
          },
          "vehicleWeightEmpty": {
            "type": "number",
            "description": "Weight of an empty vehicle.",
            "format": "double",
            "example": 1760
          },
          "model": {
            "type": "string",
            "description": "The model name.",
            "example": "Taycan"
          },
          "variant": {
            "type": "string",
            "description": "The model variant",
            "example": "Turbo"
          },
          "combustionEngineVehicleData": {
            "$ref": "#/components/schemas/CombustionEngineVehicleData"
          },
          "brand": {
            "$ref": "#/components/schemas/VehicleBrand"
          }
        },
        "description": "Defines the vehicle core details, including associated information for vehicle brand"
      },
      "VehicleBrand": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "The brand UUID",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The vehicle brand name",
            "example": "Porsche"
          }
        },
        "description": "Defines the details of a vehicle brand"
      },
      "VehicleComposedResponse": {
        "required": [
          "fleetVehicleResponse",
          "vehicleAndBrandResponse"
        ],
        "type": "object",
        "properties": {
          "fleetVehicleResponse": {
            "$ref": "#/components/schemas/FleetVehicleResponse"
          },
          "fleetTourResponses": {
            "type": "array",
            "description": "Summary of all associated tours",
            "items": {
              "$ref": "#/components/schemas/FleetTourResponse"
            }
          },
          "vehicleAndBrandResponse": {
            "$ref": "#/components/schemas/VehicleAndBrandResponse"
          }
        },
        "description": "Defines the fleet vehicle details, including associated information for its assigned tours and vehicle core."
      },
      "FleetAndCoreVehicle": {
        "required": [
          "fleetVehicle",
          "vehicleCoreAndBrand"
        ],
        "type": "object",
        "properties": {
          "fleetVehicle": {
            "$ref": "#/components/schemas/FleetVehicleResponse"
          },
          "vehicleCoreAndBrand": {
            "$ref": "#/components/schemas/VehicleAndBrandResponse"
          }
        },
        "description": "Defines the fleet vehicle details, including associated information for its vehicle core."
      },
      "FleetJobCriteriaFilterResponse": {
        "required": [
          "businessAccountUid",
          "destination",
          "endDate",
          "jobUid",
          "origin",
          "products",
          "startDate",
          "status"
        ],
        "type": "object",
        "properties": {
          "jobUid": {
            "maxLength": 50,
            "type": "string",
            "description": "Job identifier",
            "example": "AvO78iot3x"
          },
          "startDate": {
            "type": "string",
            "description": "Start date of this job",
            "example": "2024-11-15T23:59:59"
          },
          "jobType": {
            "type": "string"
          },
          "endDate": {
            "type": "string",
            "description": "End date of this job",
            "example": "2024-11-15T23:59:59"
          },
          "depotId": {
            "maxLength": 255,
            "type": "string",
            "description": "Depot identifier",
            "example": "AvO78iot3x"
          },
          "businessAccountUid": {
            "maxLength": 50,
            "type": "string",
            "description": "Supplier identifier",
            "example": "LKnPKAYKvf"
          },
          "products": {
            "type": "array",
            "description": "Details of product(s)",
            "items": {
              "$ref": "#/components/schemas/FleetProductResponse"
            }
          },
          "status": {
            "maxLength": 10,
            "type": "string",
            "description": "Defines all possible statuses of a Job",
            "enum": [
              "TO_DO",
              "PENDING",
              "PLANNED",
              "ENROUTE",
              "DELIVERED",
              "FAILED",
              "RETURNED",
              "CANCELLED"
            ]
          },
          "origin": {
            "$ref": "#/components/schemas/RoutePointCriteriaFilterResponse"
          },
          "destination": {
            "$ref": "#/components/schemas/RoutePointCriteriaFilterResponse"
          }
        },
        "description": "Defines the response of tour jobs based on criteria filters"
      },
      "FleetTourCriteriaFilterResponse": {
        "required": [
          "endDate",
          "hasPenaltyRuleViolation",
          "jobs",
          "polyline",
          "startDate",
          "status",
          "tourUid",
          "vehicleIdentificationNumber"
        ],
        "type": "object",
        "properties": {
          "tourUid": {
            "maxLength": 50,
            "type": "string",
            "description": "Tour identifier",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "vehicleIdentificationNumber": {
            "maxLength": 30,
            "type": "string",
            "description": "Identifies the identification number (VIN) of the vehicle.",
            "example": "4Y1SL65848Z411444"
          },
          "startDate": {
            "type": "string",
            "description": "Start date of this tour.",
            "example": "2024-11-15T23:59:59"
          },
          "confirmedStartDate": {
            "type": "string",
            "description": "Confirmed start date of this tour",
            "example": "2024-11-15T23:59:59"
          },
          "endDate": {
            "type": "string",
            "description": "End date of this tour.",
            "example": "2024-11-15T23:59:59"
          },
          "confirmedEndDate": {
            "type": "string",
            "description": "Confirmed end date of this tour",
            "example": "2024-11-15T23:59:59"
          },
          "jobs": {
            "type": "array",
            "description": "Vehicle fleet jobs.",
            "items": {
              "$ref": "#/components/schemas/FleetJobCriteriaFilterResponse"
            }
          },
          "status": {
            "maxLength": 10,
            "type": "string",
            "description": "Defines all possible tour statuses",
            "enum": [
              "PLANNED",
              "ENROUTE",
              "DELAYED",
              "FAILED",
              "INCOMPLETE",
              "DONE"
            ]
          },
          "totalTime": {
            "type": "integer",
            "description": "Total tour duration time in seconds",
            "format": "int64",
            "example": 155
          },
          "totalDistance": {
            "type": "number",
            "description": "Total tour distance",
            "format": "double",
            "example": 500.9
          },
          "polyline": {
            "$ref": "#/components/schemas/Polyline"
          },
          "transitions": {
            "type": "array",
            "description": "Tour transition details",
            "items": {
              "$ref": "#/components/schemas/Transition"
            }
          },
          "hasPenaltyRuleViolation": {
            "type": "boolean",
            "description": "Indicates if the tour has at least one penalty rule violation",
            "example": false
          },
          "notes": {
            "maxLength": 100,
            "type": "string",
            "description": "Optional notes for the tour.",
            "example": "Tour completed on time."
          }
        },
        "description": "Defines the response of a tour based on criteria filters"
      },
      "RoutePointCriteriaFilterResponse": {
        "required": [
          "accountLocationUid",
          "locationAddressType"
        ],
        "type": "object",
        "properties": {
          "accountLocationUid": {
            "maxLength": 50,
            "type": "string",
            "description": "Identifier of the business account's location",
            "example": "AvO78iot3x"
          },
          "locationAddressType": {
            "maxLength": 255,
            "type": "string",
            "description": "Location address type information",
            "example": "Raw Tank"
          }
        },
        "description": "Defines the response of criteria filter fleet job route point"
      },
      "TourComposedResponse": {
        "required": [
          "fleetAndCoreVehicle",
          "fleetTour",
          "productQuantities"
        ],
        "type": "object",
        "properties": {
          "fleetTour": {
            "$ref": "#/components/schemas/FleetTourCriteriaFilterResponse"
          },
          "fleetAndCoreVehicle": {
            "$ref": "#/components/schemas/FleetAndCoreVehicle"
          },
          "productQuantities": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "description": "Summary of all associated tour products. Contains information about their names, and their total quantity transferred.",
              "format": "double"
            },
            "description": "Summary of all associated tour products. Contains information about their names, and their total quantity transferred."
          }
        },
        "description": "Defines the Tour details, including associated information for fleet vehicles, vehicles core and products."
      },
      "FleetJobSnapshotResponse": {
        "required": [
          "createdDate",
          "dateDropOffFrom",
          "dateDropOffTill",
          "datePickUpFrom",
          "datePickUpTill",
          "destination",
          "jobType",
          "jobUid",
          "lastModifiedDate",
          "origin",
          "products",
          "status"
        ],
        "type": "object",
        "properties": {
          "jobUid": {
            "maxLength": 50,
            "type": "string",
            "description": "Job identifier",
            "example": "08a8c5d2f13b9100"
          },
          "depotId": {
            "maxLength": 255,
            "type": "string",
            "description": "Depot identifier",
            "example": "AvO78iot3x"
          },
          "businessAccountUid": {
            "maxLength": 50,
            "type": "string",
            "description": "Supplier identifier",
            "example": "LKnPKAYKvf"
          },
          "startDate": {
            "type": "string",
            "description": "Planned start date of this job",
            "example": "2024-11-15T23:59:59"
          },
          "confirmedStartDate": {
            "type": "string",
            "description": "Confirmed start date of this job",
            "example": "2024-11-15T23:59:59"
          },
          "endDate": {
            "type": "string",
            "description": "Planned end date of this job",
            "example": "2024-11-15T23:59:59"
          },
          "confirmedEndDate": {
            "type": "string",
            "description": "Confirmed end date of this job",
            "example": "2024-11-15T23:59:59"
          },
          "jobType": {
            "maxLength": 30,
            "type": "string",
            "description": "Type of job"
          },
          "products": {
            "type": "array",
            "description": "Details of product(s)",
            "items": {
              "$ref": "#/components/schemas/FleetProductResponse"
            }
          },
          "origin": {
            "$ref": "#/components/schemas/RoutePointDetailed"
          },
          "destination": {
            "$ref": "#/components/schemas/RoutePointDetailed"
          },
          "status": {
            "maxLength": 10,
            "type": "string",
            "description": "Defines all possible statuses of a Job",
            "enum": [
              "TO_DO",
              "PENDING",
              "PLANNED",
              "ENROUTE",
              "DELIVERED",
              "FAILED",
              "RETURNED",
              "CANCELLED"
            ]
          },
          "datePickUpFrom": {
            "type": "string",
            "description": "Earliest date this job can be picked up",
            "example": "2024-11-15T23:59:59"
          },
          "datePickUpTill": {
            "type": "string",
            "description": "Latest date this job can be picked up",
            "example": "2024-11-15T23:59:59"
          },
          "dateDropOffFrom": {
            "type": "string",
            "description": "Earliest date this job can be dropped off",
            "example": "2024-11-15T23:59:59"
          },
          "dateDropOffTill": {
            "type": "string",
            "description": "Latest date this job can be dropped off",
            "example": "2024-11-15T23:59:59"
          },
          "createdDate": {
            "type": "string",
            "description": "Date this job was created",
            "example": "2024-11-15T23:59:59"
          },
          "lastModifiedDate": {
            "type": "string",
            "description": "Date this job was last modified",
            "example": "2024-11-15T23:59:59"
          }
        },
        "description": "Defines the details of a job snapshot"
      },
      "JobSnapshotComposedResponse": {
        "required": [
          "fleetJob"
        ],
        "type": "object",
        "properties": {
          "fleetJob": {
            "$ref": "#/components/schemas/FleetJobSnapshotResponse"
          },
          "supplierBusinessAccount": {
            "$ref": "#/components/schemas/BusinessAccountResponse"
          },
          "originProducts": {
            "type": "array",
            "description": "List of job snapshot origin products",
            "items": {
              "$ref": "#/components/schemas/LocationProductResponse"
            }
          },
          "destinationProducts": {
            "type": "array",
            "description": "List of job snapshot destination products",
            "items": {
              "$ref": "#/components/schemas/LocationProductResponse"
            }
          }
        },
        "description": "Defines the Job snapshot details, including associated Business Account information and the origin/destination products"
      },
      "LocationProductResponse": {
        "required": [
          "name",
          "productUid",
          "unitOfMeasureResponse"
        ],
        "type": "object",
        "properties": {
          "productUid": {
            "maxLength": 50,
            "type": "string",
            "description": "Product identifier",
            "example": "1"
          },
          "name": {
            "maxLength": 255,
            "type": "string",
            "description": "Product name",
            "example": "Degassed biomass"
          },
          "unitOfMeasureResponse": {
            "$ref": "#/components/schemas/UnitOfMeasureResponse"
          },
          "capacity": {
            "type": "number",
            "description": "Location capacity for the corresponding product",
            "format": "double",
            "example": 500.5
          }
        },
        "description": "Defines the details of a business account location product"
      },
      "TourDetailsComposedResponse": {
        "required": [
          "fleetVehicle",
          "hasPenaltyRuleViolation",
          "jobs",
          "status",
          "totalDistance",
          "totalTime",
          "tourUid"
        ],
        "type": "object",
        "properties": {
          "tourUid": {
            "maxLength": 50,
            "type": "string",
            "description": "Tour identifier",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "status": {
            "maxLength": 10,
            "type": "string",
            "description": "Defines all possible tour statuses",
            "enum": [
              "PLANNED",
              "ENROUTE",
              "DELAYED",
              "FAILED",
              "INCOMPLETE",
              "DONE"
            ]
          },
          "fleetVehicle": {
            "$ref": "#/components/schemas/FleetVehicleResponse"
          },
          "startDate": {
            "type": "string",
            "description": "Planned start date of this tour",
            "example": "2024-11-15T23:59:59"
          },
          "confirmedStartDate": {
            "type": "string",
            "description": "Confirmed start date of this tour",
            "example": "2024-11-15T23:59:59"
          },
          "endDate": {
            "type": "string",
            "description": "Planned end date of this tour",
            "example": "2024-11-15T23:59:59"
          },
          "confirmedEndDate": {
            "type": "string",
            "description": "Confirmed end date of this tour",
            "example": "2024-11-15T23:59:59"
          },
          "vehicleBreak": {
            "$ref": "#/components/schemas/VehicleBreak"
          },
          "totalTime": {
            "type": "integer",
            "description": "Total tour duration time in seconds",
            "format": "int64",
            "example": 155
          },
          "totalDistance": {
            "type": "number",
            "description": "Total tour distance",
            "format": "double",
            "example": 500.9
          },
          "jobs": {
            "type": "array",
            "description": "Defines the job snapshot details, including associated Business Account information and the origin/destination products",
            "items": {
              "$ref": "#/components/schemas/JobSnapshotComposedResponse"
            }
          },
          "transitions": {
            "type": "array",
            "description": "Tour transition details",
            "items": {
              "$ref": "#/components/schemas/Transition"
            }
          },
          "hasPenaltyRuleViolation": {
            "type": "boolean",
            "description": "Indicates if the tour has at least one penalty rule violation",
            "example": false
          },
          "polyline": {
            "$ref": "#/components/schemas/Polyline"
          }
        },
        "description": "Defines only the necessary Tour details"
      },
      "UnitOfMeasureResponse": {
        "required": [
          "name",
          "unitOfMeasureUid"
        ],
        "type": "object",
        "properties": {
          "unitOfMeasureUid": {
            "type": "integer",
            "description": "Unit of measure identifier",
            "format": "int64",
            "example": 1
          },
          "name": {
            "maxLength": 255,
            "type": "string",
            "description": "Unit of measure name",
            "example": "KG"
          }
        },
        "description": "Defines the details of an unit of measure"
      },
      "FleetJobDetailed": {
        "required": [
          "createdDate",
          "destination",
          "jobType",
          "jobUid",
          "lastModifiedDate",
          "origin",
          "products",
          "status"
        ],
        "type": "object",
        "properties": {
          "jobUid": {
            "maxLength": 50,
            "type": "string",
            "description": "Job identifier",
            "example": "08a8c5d2f13b9100"
          },
          "depotId": {
            "maxLength": 255,
            "type": "string",
            "description": "Depot identifier",
            "example": "AvO78iot3x"
          },
          "businessAccountUid": {
            "maxLength": 50,
            "type": "string",
            "description": "Supplier identifier",
            "example": "LKnPKAYKvf"
          },
          "startDate": {
            "type": "string",
            "description": "Start date of this job",
            "example": "2024-11-15T23:59:59"
          },
          "endDate": {
            "type": "string",
            "description": "End date of this job",
            "example": "2024-11-15T23:59:59"
          },
          "jobType": {
            "maxLength": 30,
            "type": "string",
            "description": "Job type name",
            "example": "INBOUND"
          },
          "products": {
            "type": "array",
            "description": "Details of product(s)",
            "items": {
              "$ref": "#/components/schemas/FleetProductResponse"
            }
          },
          "origin": {
            "$ref": "#/components/schemas/RoutePointDetailed"
          },
          "destination": {
            "$ref": "#/components/schemas/RoutePointDetailed"
          },
          "status": {
            "maxLength": 10,
            "type": "string",
            "description": "Defines all possible statuses of a Job",
            "enum": [
              "TO_DO",
              "PENDING",
              "PLANNED",
              "ENROUTE",
              "DELIVERED",
              "FAILED",
              "RETURNED",
              "CANCELLED"
            ]
          },
          "datePickUpFrom": {
            "type": "string",
            "description": "Earliest date this job can be picked up",
            "example": "2024-11-15T23:59:59"
          },
          "datePickUpTill": {
            "type": "string",
            "description": "Latest date this job can be picked up",
            "example": "2024-11-15T23:59:59"
          },
          "dateDropOffFrom": {
            "type": "string",
            "description": "Earliest date this job can be dropped off",
            "example": "2024-11-15T23:59:59"
          },
          "dateDropOffTill": {
            "type": "string",
            "description": "Latest date this job can be dropped off",
            "example": "2024-11-15T23:59:59"
          },
          "createdDate": {
            "type": "string",
            "description": "Date this job was created",
            "example": "2024-11-15T23:59:59"
          },
          "lastModifiedDate": {
            "type": "string",
            "description": "Date this job was last modified",
            "example": "2024-11-15T23:59:59"
          }
        },
        "description": "Job details"
      },
      "JobComposedResponse": {
        "required": [
          "fleetJob"
        ],
        "type": "object",
        "properties": {
          "fleetJob": {
            "$ref": "#/components/schemas/FleetJobDetailed"
          },
          "supplierBusinessAccount": {
            "$ref": "#/components/schemas/BusinessAccountResponse"
          },
          "originProducts": {
            "type": "array",
            "description": "List of job origin products",
            "items": {
              "$ref": "#/components/schemas/LocationProductResponse"
            }
          },
          "destinationProducts": {
            "type": "array",
            "description": "List of job destination products",
            "items": {
              "$ref": "#/components/schemas/LocationProductResponse"
            }
          }
        },
        "description": "Defines the Job details, including associated Business Account information and the origin/destination products"
      },
      "SuccessMessageDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          }
        }
      }
    },
    "examples": {
      "FLEET_JOB_UID_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Job with the provided job UID does not exist.\",\n  \"errorCode\" : \"FLEET_JOB_UID_NOT_FOUND\"\n}"
      },
      "FLEET_JOB_UIDS_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] One or more job UIDs do not exist.\",\n  \"errorCode\" : \"FLEET_JOB_UIDS_NOT_FOUND\"\n}"
      },
      "FLEET_JOB_UID_ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Job with same Job UID already exists.\",\n  \"errorCode\" : \"FLEET_JOB_UID_ALREADY_EXISTS\"\n}"
      },
      "FLEET_JOB_NOT_ASSIGNED_TO_TOUR": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Fleet job not assigned to a fleet tour.\",\n  \"errorCode\" : \"FLEET_JOB_NOT_ASSIGNED_TO_TOUR\"\n}"
      },
      "FLEET_JOB_ALREADY_ASSIGNED_TO_TOUR": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Requested Job is already assigned to a tour.\",\n  \"errorCode\" : \"FLEET_JOB_ALREADY_ASSIGNED_TO_TOUR\"\n}"
      },
      "CANNOT_MODIFY_ASSIGNED_FLEET_JOB": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Job cannot be modified, while it is assigned to a tour.\",\n  \"errorCode\" : \"CANNOT_MODIFY_ASSIGNED_FLEET_JOB\"\n}"
      },
      "FLEET_JOB_TYPE_UID_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Job type with the provided job type UID does not exist.\",\n  \"errorCode\" : \"FLEET_JOB_TYPE_UID_NOT_FOUND\"\n}"
      },
      "FLEET_JOB_TYPE_NAME_ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Job type with same name already exists.\",\n  \"errorCode\" : \"FLEET_JOB_TYPE_NAME_ALREADY_EXISTS\"\n}"
      },
      "CANNOT_DELETE_ASSIGNED_FLEET_JOB_TYPE": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Job Type cannot be deleted, while it is assigned to Job(s).\",\n  \"errorCode\" : \"CANNOT_DELETE_ASSIGNED_FLEET_JOB_TYPE\"\n}"
      },
      "FLEET_TOUR_UID_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Tour with the provided tour UID does not exist.\",\n  \"errorCode\" : \"FLEET_TOUR_UID_NOT_FOUND\"\n}"
      },
      "FLEET_TOUR_UIDS_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] One or more tour UIDs do not exist.\",\n  \"errorCode\" : \"FLEET_TOUR_UIDS_NOT_FOUND\"\n}"
      },
      "CANNOT_DELETE_STARTED_FLEET_TOUR": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Tour cannot be deleted, when its status is not 'PLANNED'\",\n  \"errorCode\" : \"CANNOT_DELETE_STARTED_FLEET_TOUR\"\n}"
      },
      "CANNOT_MODIFY_FINISHED_FLEET_TOUR": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Tour can be updated only if it's in status 'PLANNED' or 'ENROUTE'\",\n  \"errorCode\" : \"CANNOT_MODIFY_FINISHED_FLEET_TOUR\"\n}"
      },
      "CANNOT_PATCH_DETAILS_OF_FINISHED_FLEET_TOUR": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Tour details (except notes) can be modified only if it's in status 'PLANNED' or 'ENROUTE'\",\n  \"errorCode\" : \"CANNOT_PATCH_DETAILS_OF_FINISHED_FLEET_TOUR\"\n}"
      },
      "REQUEST_CONTAINS_DUPLICATE_JOB_UIDS": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Request must not contain duplicate job UIDs\",\n  \"errorCode\" : \"REQUEST_CONTAINS_DUPLICATE_JOB_UIDS\"\n}"
      },
      "REQUEST_CONTAINS_DUPLICATE_TOUR_UIDS": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Request must not contain duplicate tour UIDs\",\n  \"errorCode\" : \"REQUEST_CONTAINS_DUPLICATE_TOUR_UIDS\"\n}"
      },
      "VEHICLE_NOT_AVAILABLE_FOR_TOUR_PLANNING": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Specified vehicle(s) are not available for tour planning within the given tour timespan\",\n  \"errorCode\" : \"VEHICLE_NOT_AVAILABLE_FOR_TOUR_PLANNING\"\n}"
      },
      "UNSUITABLE_JOB_STATUS": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Failed to delete the job due to unsuitable job status\",\n  \"errorCode\" : \"UNSUITABLE_JOB_STATUS\"\n}"
      },
      "INVALID_JOB_STATUS": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Job status can't be updated considering the current job status\",\n  \"errorCode\" : \"INVALID_JOB_STATUS\"\n}"
      },
      "INVALID_OPTIMIZE_TOUR_GLOBAL_TIME_WINDOW": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Tour(s) can't be optimized more than 7 days in advance\",\n  \"errorCode\" : \"INVALID_OPTIMIZE_TOUR_GLOBAL_TIME_WINDOW\"\n}"
      },
      "OPTIMIZE_TOUR_JOBS_OUTSIDE_OF_GLOBAL_TIME_WINDOW": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] A tour containing job(s) outside of global time window can not be optimized\",\n  \"errorCode\" : \"OPTIMIZE_TOUR_JOBS_OUTSIDE_OF_GLOBAL_TIME_WINDOW\"\n}"
      },
      "END_DATETIME_IS_BEFORE_START_DATETIME": {
        "value": "{\n  \"message\" : \"[FLEET-ORCHESTRATOR] End-datetime can't be before start-datetime.\",\n  \"errorCode\" : \"END_DATETIME_IS_BEFORE_START_DATETIME\"\n}"
      },
      "DROP_OFF_FROM_DATE_IS_BEFORE_PICK_UP_FROM": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Drop-off-from date can't be before pick-up-from date.\",\n  \"errorCode\" : \"DROP_OFF_FROM_DATE_IS_BEFORE_PICK_UP_FROM\"\n}"
      },
      "DROP_OFF_TILL_DATE_IS_BEFORE_PICK_UP_TILL": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Drop-off-till date can't be before pick-up-till date.\",\n  \"errorCode\" : \"DROP_OFF_TILL_DATE_IS_BEFORE_PICK_UP_TILL\"\n}"
      },
      "PICK_UP_TILL_DATE_IS_BEFORE_OR_EQUAL_TO_PICK_UP_FROM": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Pick-up-till date can't be before or equal to pick-up-from date.\",\n  \"errorCode\" : \"PICK_UP_TILL_DATE_IS_BEFORE_OR_EQUAL_TO_PICK_UP_FROM\"\n}"
      },
      "DROP_OFF_TILL_DATE_IS_BEFORE_OR_EQUAL_TO_DROP_OFF_FROM": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Drop-off-till date can't be before or equal to drop-off-from date.\",\n  \"errorCode\" : \"DROP_OFF_TILL_DATE_IS_BEFORE_OR_EQUAL_TO_DROP_OFF_FROM\"\n}"
      },
      "INVALID_ROUTE_DATES": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Earliest route date must be before latest one, and both not null.\",\n  \"errorCode\" : \"INVALID_ROUTE_DATES\"\n}"
      },
      "END_DATE_NOT_EQUAL_TO_START_DATE": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] End-date must be equal to start-date\",\n  \"errorCode\" : \"END_DATE_NOT_EQUAL_TO_START_DATE\"\n}"
      },
      "INVALID_REQUEST_SEQUENCE": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Precedence counting must start from 0 and increase by 1.\",\n  \"errorCode\" : \"INVALID_REQUEST_SEQUENCE\"\n}"
      },
      "JOB_SNAPSHOT_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Fleet Job Snapshot with the specified job uid not found\",\n  \"errorCode\" : \"JOB_SNAPSHOT_NOT_FOUND\"\n}"
      },
      "INVALID_TOUR_STATUS": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Tour status can't be updated considering the current tour status\",\n  \"errorCode\" : \"INVALID_TOUR_STATUS\"\n}"
      },
      "UNSORTABLE_COLUMN": {
        "value": "{\n  \"message\" : \"The entered sorting column is not sortable in ElasticSearch (Column is not a @Keyword).\",\n  \"errorCode\" : \"UNSORTABLE_COLUMN\"\n}"
      },
      "REST_STATUS_ELASTICSEARCH_RELATED": {
        "value": "{\n  \"message\" : \"RestStatusException related to ElasticSearch\",\n  \"errorCode\" : \"REST_STATUS_ELASTICSEARCH_RELATED\"\n}"
      },
      "JOB_WITH_INVALID_BUSINESS_ACCOUNT": {
        "value": "{\n  \"message\" : \"[FLEET-ORCHESTRATOR] Job(s) assigned to not existing business account(s).\",\n  \"errorCode\" : \"JOB_WITH_INVALID_BUSINESS_ACCOUNT\"\n}"
      },
      "TOUR_WITH_INVALID_FLEET_VEHICLE": {
        "value": "{\n  \"message\" : \"[FLEET-ORCHESTRATOR] Tour(s) assigned to not existing fleet vehicle(s).\",\n  \"errorCode\" : \"TOUR_WITH_INVALID_FLEET_VEHICLE\"\n}"
      },
      "TOUR_CANNOT_BE_OPTIMIZED": {
        "value": "{\n  \"message\" : \"[FLEET-ORCHESTRATOR] Existing tour can be optimized, only when its status is 'PLANNED' or 'ENROUTE'.\",\n  \"errorCode\" : \"TOUR_CANNOT_BE_OPTIMIZED\"\n}"
      },
      "FLEET_VEHICLE_WITH_INVALID_VEHICLE_CORE": {
        "value": "{\n  \"message\" : \"[FLEET-ORCHESTRATOR] Fleet vehicle(s) assigned to not existing core vehicles(s).\",\n  \"errorCode\" : \"FLEET_VEHICLE_WITH_INVALID_VEHICLE_CORE\"\n}"
      },
      "VIN_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-ORCHESTRATOR] Vehicle identification number not found.\",\n  \"errorCode\" : \"VIN_NOT_FOUND\"\n}"
      },
      "VEHICLE_CORE_UUID_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-ORCHESTRATOR] Vehicle core UUID not found.\",\n  \"errorCode\" : \"VEHICLE_CORE_UUID_NOT_FOUND\"\n}"
      },
      "VEHICLES_CORE_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-ORCHESTRATOR] Vehicle(s) in core not found.\",\n  \"errorCode\" : \"VEHICLES_CORE_NOT_FOUND\"\n}"
      },
      "VIN_MISS_MATCH": {
        "value": "{\n  \"message\" : \"[FLEET-ORCHESTRATOR] The number of requested vehicles and the number of retrieved ones is not the same, based on their VINs.\",\n  \"errorCode\" : \"VIN_MISS_MATCH\"\n}"
      },
      "JOB_MISS_MATCH": {
        "value": "{\n  \"message\" : \"[FLEET-ORCHESTRATOR] The number of requested jobs and the number of retrieved ones is not the same, based on their job UIDs.\",\n  \"errorCode\" : \"JOB_MISS_MATCH\"\n}"
      },
      "VEHICLE_IS_ASSIGNED_TO_A_TOUR": {
        "value": "{\n  \"message\" : \"[FLEET-ORCHESTRATOR] The fleet vehicle cannot be modified/deleted since it is part of a tour.\",\n  \"errorCode\" : \"VEHICLE_IS_ASSIGNED_TO_A_TOUR\"\n}"
      },
      "JOB_PRODUCT_NOT_ASSIGNED_TO_ORIGIN_LOCATION": {
        "value": "{\n  \"message\" : \"[FLEET-ORCHESTRATOR] Product is not assigned to origin location\",\n  \"errorCode\" : \"JOB_PRODUCT_NOT_ASSIGNED_TO_ORIGIN_LOCATION\"\n}"
      },
      "ORIGIN_LOCATION_DOES_NOT_HAVE_ASSIGNED_PRODUCTS": {
        "value": "{\n  \"message\" : \"[FLEET-ORCHESTRATOR] The origin location doesn't have products assigned to it\",\n  \"errorCode\" : \"ORIGIN_LOCATION_DOES_NOT_HAVE_ASSIGNED_PRODUCTS\"\n}"
      },
      "LOCATIONS_ASSOCIATED_WITH_JOBS_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-ORCHESTRATOR] One or more locations associated with fleet job(s) not found\",\n  \"errorCode\" : \"LOCATIONS_ASSOCIATED_WITH_JOBS_NOT_FOUND\"\n}"
      },
      "PRODUCTS_ASSOCIATED_WITH_JOBS_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-ORCHESTRATOR] One or more products associated with fleet job(s) not found\",\n  \"errorCode\" : \"PRODUCTS_ASSOCIATED_WITH_JOBS_NOT_FOUND\"\n}"
      },
      "LOCATIONS_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-ORCHESTRATOR] Specified origin/destination location(s) not found\",\n  \"errorCode\" : \"LOCATIONS_NOT_FOUND\"\n}"
      },
      "INVALID_JOB_LOCATIONS": {
        "value": "{\n  \"message\" : \"[FLEET-ORCHESTRATOR] Job origin and destination need to contain different account location UIDs\",\n  \"errorCode\" : \"INVALID_JOB_LOCATIONS\"\n}"
      },
      "AT_LEAST_ONE_PRODUCT_NOT_ASSIGNED_TO_LOCATION": {
        "value": "{\n  \"message\" : \"[FLEET-ORCHESTRATOR] At least one product is not assigned to the origin location\",\n  \"errorCode\" : \"AT_LEAST_ONE_PRODUCT_NOT_ASSIGNED_TO_LOCATION\"\n}"
      },
      "GEO_LOCATION_NOT_ASSIGNED_TO_JOB": {
        "value": "{\n  \"message\" : \"[FLEET-ORCHESTRATOR] Specified Job has not assigned GeoLocations(Latitude-Longitude)\",\n  \"errorCode\" : \"GEO_LOCATION_NOT_ASSIGNED_TO_JOB\"\n}"
      },
      "AT_LEAST_ONE_PRODUCT_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-ORCHESTRATOR] At least one product not found\",\n  \"errorCode\" : \"AT_LEAST_ONE_PRODUCT_NOT_FOUND\"\n}"
      },
      "PROCESSING_ERROR": {
        "value": "{\n  \"message\" : \"Error while processing the data\",\n  \"errorCode\" : \"PROCESSING_ERROR\"\n}"
      },
      "ACCESS_DENIED": {
        "value": "{\n  \"message\" : \"Access to route has been denied.\",\n  \"errorCode\" : \"ACCESS_DENIED\"\n}"
      },
      "INTERNAL_SERVER_ERROR": {
        "value": "{\n  \"message\" : \"An error occurred\",\n  \"errorCode\" : \"INTERNAL_SERVER_ERROR\"\n}"
      },
      "BAD_REQUEST": {
        "value": "{\n  \"message\" : \"Bad request\",\n  \"errorCode\" : \"BAD_REQUEST\"\n}"
      },
      "NOT_FOUND": {
        "value": "{\n  \"message\" : \"Requested object not found\",\n  \"errorCode\" : \"NOT_FOUND\"\n}"
      },
      "UNAUTHORIZED": {
        "value": "{\n  \"message\" : \"Unauthorized\",\n  \"errorCode\" : \"UNAUTHORIZED\"\n}"
      },
      "FORBIDDEN": {
        "value": "{\n  \"message\" : \"Forbidden\",\n  \"errorCode\" : \"FORBIDDEN\"\n}"
      },
      "UNAUTHENTICATED": {
        "value": "{\n  \"message\" : \"Unauthenticated\",\n  \"errorCode\" : \"UNAUTHENTICATED\"\n}"
      },
      "METHOD_ARGUMENT_TYPE_MISMATCH": {
        "value": "{\n  \"message\" : \"Failed to convert value to required type\",\n  \"errorCode\" : \"METHOD_ARGUMENT_TYPE_MISMATCH\"\n}"
      },
      "MAXIMUM_UPLOAD_SIZE_EXCEEDED": {
        "value": "{\n  \"message\" : \"Maximum upload size exceeded\",\n  \"errorCode\" : \"MAXIMUM_UPLOAD_SIZE_EXCEEDED\"\n}"
      },
      "METHOD_NOT_ALLOWED": {
        "value": "{\n  \"message\" : \"Request method is not supported\",\n  \"errorCode\" : \"METHOD_NOT_ALLOWED\"\n}"
      },
      "MISSING_REQUEST_PARAMETER": {
        "value": "{\n  \"message\" : \"Required request parameter is not present\",\n  \"errorCode\" : \"MISSING_REQUEST_PARAMETER\"\n}"
      },
      "MISSING_REQUEST_PART": {
        "value": "{\n  \"message\" : \"Required request part is not present\",\n  \"errorCode\" : \"MISSING_REQUEST_PART\"\n}"
      },
      "UNSUPPORTED_MEDIA_TYPE": {
        "value": "{\n  \"message\" : \"Media type is not supported\",\n  \"errorCode\" : \"UNSUPPORTED_MEDIA_TYPE\"\n}"
      },
      "LIST_CONTAINS_NULL_VALUES": {
        "value": "{\n  \"message\" : \"List contains null values\",\n  \"errorCode\" : \"LIST_CONTAINS_NULL_VALUES\"\n}"
      },
      "REMOTE_CALL_FAILED": {
        "value": "{\n  \"message\" : \"Call to remote API returned an error response\",\n  \"errorCode\" : \"REMOTE_CALL_FAILED\"\n}"
      },
      "ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"Object already exists\",\n  \"errorCode\" : \"ALREADY_EXISTS\"\n}"
      },
      "SOFTLY_DELETED": {
        "value": "{\n  \"message\" : \"Object is softly deleted\",\n  \"errorCode\" : \"SOFTLY_DELETED\"\n}"
      },
      "WRONG_SORTING_COLUMN": {
        "value": "{\n  \"message\" : \"The entered sorting column name does not exist.\",\n  \"errorCode\" : \"WRONG_SORTING_COLUMN\"\n}"
      },
      "COULD_NOT_EXTRACT_ERROR_FROM_RESPONSE": {
        "value": "{\n  \"message\" : \"Could not extract error from the response.\",\n  \"errorCode\" : \"COULD_NOT_EXTRACT_ERROR_FROM_RESPONSE\"\n}"
      },
      "FAILED_TO_DELETE_TEMPORARY_FILE": {
        "value": "{\n  \"message\" : \"Failed to delete temporary file\",\n  \"errorCode\" : \"FAILED_TO_DELETE_TEMPORARY_FILE\"\n}"
      },
      "TENANT_ID_MUST_BE_SINGLETON": {
        "value": "{\n  \"message\" : \"Tenant ID must be a single value parameter\",\n  \"errorCode\" : \"TENANT_ID_MUST_BE_SINGLETON\"\n}"
      },
      "TENANT_ID_MUST_BE_INTEGER": {
        "value": "{\n  \"message\" : \"Tenant ID must be integer\",\n  \"errorCode\" : \"TENANT_ID_MUST_BE_INTEGER\"\n}"
      },
      "INVALID_PROPERTY": {
        "value": "{\n  \"message\" : \"Requested property is not valid.\",\n  \"errorCode\" : \"INVALID_PROPERTY\"\n}"
      },
      "DUPLICATE_LOCATION_RISK": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Specified location risk already exists\",\n  \"errorCode\" : \"DUPLICATE_LOCATION_RISK\"\n}"
      },
      "DUPLICATE_PRODUCT_NAME": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Specified product already exists\",\n  \"errorCode\" : \"DUPLICATE_PRODUCT_NAME\"\n}"
      },
      "DUPLICATE_UNIT_OF_MEASURE": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Specified unit of measure already exists\",\n  \"errorCode\" : \"DUPLICATE_UNIT_OF_MEASURE\"\n}"
      },
      "DUPLICATE_LOCATION_STATUS": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Specified location status already exists\",\n  \"errorCode\" : \"DUPLICATE_LOCATION_STATUS\"\n}"
      },
      "DUPLICATE_LOCATION_TYPE": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Specified location type already exists\",\n  \"errorCode\" : \"DUPLICATE_LOCATION_TYPE\"\n}"
      },
      "DUPLICATE_BUSINESS_ACCOUNT_TYPE": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Specified business account type already exists\",\n  \"errorCode\" : \"DUPLICATE_BUSINESS_ACCOUNT_TYPE\"\n}"
      },
      "DUPLICATE_LOCATION_ADDRESS_TYPE": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Specified location address type already exists\",\n  \"errorCode\" : \"DUPLICATE_LOCATION_ADDRESS_TYPE\"\n}"
      },
      "LOCATION_RISK_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Location risk with the specified uid not found\",\n  \"errorCode\" : \"LOCATION_RISK_NOT_FOUND\"\n}"
      },
      "BUSINESS_ACCOUNT_TYPE_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Business account type with the specified uid not found\",\n  \"errorCode\" : \"BUSINESS_ACCOUNT_TYPE_NOT_FOUND\"\n}"
      },
      "BUSINESS_ACCOUNT_TYPE_ASSIGNED_TO_BUSINESS_ACCOUNT": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Business account type is assigned to at least one business account\",\n  \"errorCode\" : \"BUSINESS_ACCOUNT_TYPE_ASSIGNED_TO_BUSINESS_ACCOUNT\"\n}"
      },
      "LOCATION_ADDRESS_TYPE_ASSIGNED_TO_LOCATION": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Location address type is assigned to at least one location\",\n  \"errorCode\" : \"LOCATION_ADDRESS_TYPE_ASSIGNED_TO_LOCATION\"\n}"
      },
      "LOCATION_RISK_ASSIGNED_TO_LOCATION": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Location risk is assigned to at least one location\",\n  \"errorCode\" : \"LOCATION_RISK_ASSIGNED_TO_LOCATION\"\n}"
      },
      "LOCATION_STATUS_ASSIGNED_TO_LOCATION": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Location status is assigned to at least one location\",\n  \"errorCode\" : \"LOCATION_STATUS_ASSIGNED_TO_LOCATION\"\n}"
      },
      "LOCATION_TYPE_ASSIGNED_TO_LOCATION": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Location type is assigned to at least one location\",\n  \"errorCode\" : \"LOCATION_TYPE_ASSIGNED_TO_LOCATION\"\n}"
      },
      "PRODUCT_ASSIGNED_TO_LOCATION": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Product is assigned to at least one location\",\n  \"errorCode\" : \"PRODUCT_ASSIGNED_TO_LOCATION\"\n}"
      },
      "UNIT_OF_MEASURE_ASSIGNED_TO_PRODUCT": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Unit of measure is assigned to at least one location-product relation\",\n  \"errorCode\" : \"UNIT_OF_MEASURE_ASSIGNED_TO_PRODUCT\"\n}"
      },
      "BUSINESS_ACCOUNT_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Business account with the specified uid not found\",\n  \"errorCode\" : \"BUSINESS_ACCOUNT_NOT_FOUND\"\n}"
      },
      "BUSINESS_ACCOUNT_ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Business account with the specified uid already exists\",\n  \"errorCode\" : \"BUSINESS_ACCOUNT_ALREADY_EXISTS\"\n}"
      },
      "LOCATION_STATUS_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Location status with the specified uid not found\",\n  \"errorCode\" : \"LOCATION_STATUS_NOT_FOUND\"\n}"
      },
      "LOCATION_ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Business account location with the specified uid already exists\",\n  \"errorCode\" : \"LOCATION_ALREADY_EXISTS\"\n}"
      },
      "LOCATION_TYPE_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Location type with the specified uid not found\",\n  \"errorCode\" : \"LOCATION_TYPE_NOT_FOUND\"\n}"
      },
      "PRODUCT_NOT_ASSIGNED_TO_LOCATION": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Product with the specified unit of measure is not assigned to a location\",\n  \"errorCode\" : \"PRODUCT_NOT_ASSIGNED_TO_LOCATION\"\n}"
      },
      "LOCATION_ADDRESS_TYPE_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Location address type with the specified uid not found\",\n  \"errorCode\" : \"LOCATION_ADDRESS_TYPE_NOT_FOUND\"\n}"
      },
      "UNIT_OF_MEASURE_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Unit of measure with the specified uid not found\",\n  \"errorCode\" : \"UNIT_OF_MEASURE_NOT_FOUND\"\n}"
      },
      "PRODUCT_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Product with the specified uid not found\",\n  \"errorCode\" : \"PRODUCT_NOT_FOUND\"\n}"
      },
      "LOCATION_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Business account location with the specified uid not found\",\n  \"errorCode\" : \"LOCATION_NOT_FOUND\"\n}"
      },
      "PRODUCT_ALREADY_ASSIGNED_TO_LOCATION": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Product with the specified unit of measure already assigned to a location\",\n  \"errorCode\" : \"PRODUCT_ALREADY_ASSIGNED_TO_LOCATION\"\n}"
      },
      "INVALID_PENALTY_RULES_REQUEST": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Penalty rules request needs to contain at least one non-null field\",\n  \"errorCode\" : \"INVALID_PENALTY_RULES_REQUEST\"\n}"
      },
      "FLEET_VEHICLE_IDENTIFICATION_NUMBER_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-VEHICLE] Vehicle with the provided vehicle identification number (VIN) does not exist.\",\n  \"errorCode\" : \"FLEET_VEHICLE_IDENTIFICATION_NUMBER_NOT_FOUND\"\n}"
      },
      "FLEET_VEHICLE_IDENTIFICATION_NUMBER_ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"[FLEET-VEHICLE] Vehicle with the same vehicle identification number (VIN) already exists.\",\n  \"errorCode\" : \"FLEET_VEHICLE_IDENTIFICATION_NUMBER_ALREADY_EXISTS\"\n}"
      },
      "TIME_ZONE_REQUIRED_WHEN_UPDATING_VEHICLE_HOURS": {
        "value": "{\n  \"message\" : \"[FLEET-VEHICLE] Time zone information is mandatory when updating vehicle working hours.\",\n  \"errorCode\" : \"TIME_ZONE_REQUIRED_WHEN_UPDATING_VEHICLE_HOURS\"\n}"
      },
      "USER_NOT_FOUND": {
        "value": "{\n  \"message\" : \"The entered user does not exist.\",\n  \"errorCode\" : \"USER_NOT_FOUND\"\n}"
      },
      "USER_ALREADY_HAS_ACCESS": {
        "value": "{\n  \"message\" : \"The user already has access\",\n  \"errorCode\" : \"USER_ALREADY_HAS_ACCESS\"\n}"
      },
      "USER_ACCESS_REQUEST_NOT_FOUND": {
        "value": "{\n  \"message\" : \"The entered user access request does not exist.\",\n  \"errorCode\" : \"USER_ACCESS_REQUEST_NOT_FOUND\"\n}"
      },
      "INVALID_BEGIN_END_TIME": {
        "value": "{\n  \"message\" : \"period_end cannot be equal to period_begin, or before this.\",\n  \"errorCode\" : \"INVALID_BEGIN_END_TIME\"\n}"
      },
      "INVALID_HOURS": {
        "value": "{\n  \"message\" : \"regularHours field must not be empty when twentyFourSeven=false (and vice versa).\",\n  \"errorCode\" : \"INVALID_HOURS\"\n}"
      },
      "DUPLICATE_WEEKDAYS": {
        "value": "{\n  \"message\" : \"list of regular hours cannot contain duplicate weekdays.\",\n  \"errorCode\" : \"DUPLICATE_WEEKDAYS\"\n}"
      },
      "INVALID_EXCEPTIONAL_PERIOD_BEGIN_END_DATE": {
        "value": "{\n  \"message\" : \"Date of the period_begin needs to be equal to the date of period_end.\",\n  \"errorCode\" : \"INVALID_EXCEPTIONAL_PERIOD_BEGIN_END_DATE\"\n}"
      },
      "EXCEPTIONAL_PERIOD_DATES_OVERLAP": {
        "value": "{\n  \"message\" : \"Exceptional period dates cannot overlap.\",\n  \"errorCode\" : \"EXCEPTIONAL_PERIOD_DATES_OVERLAP\"\n}"
      },
      "MORE_THAN_ONE_EXCEPTIONAL_PERIOD_WITHIN_SINGLE_DATE": {
        "value": "{\n  \"message\" : \"Single date cannot contain more than one exceptional period.\",\n  \"errorCode\" : \"MORE_THAN_ONE_EXCEPTIONAL_PERIOD_WITHIN_SINGLE_DATE\"\n}"
      },
      "UNKNOWN_TIME_ZONE_ID": {
        "value": "{\n  \"message\" : \"Unknown time zone id\",\n  \"errorCode\" : \"UNKNOWN_TIME_ZONE_ID\"\n}"
      },
      "NOT_A_DIRECTORY": {
        "value": "{\n  \"message\" : \"Not a directory\",\n  \"errorCode\" : \"NOT_A_DIRECTORY\"\n}"
      },
      "VEHICLE_IMAGE_DIR_NOT_FOUND": {
        "value": "{\n  \"message\" : \"Vehicle image directory not found\",\n  \"errorCode\" : \"VEHICLE_IMAGE_DIR_NOT_FOUND\"\n}"
      },
      "FAILED_TO_STORE_VEHICLE_IMAGE": {
        "value": "{\n  \"message\" : \"Failed to store vehicle image\",\n  \"errorCode\" : \"FAILED_TO_STORE_VEHICLE_IMAGE\"\n}"
      },
      "EMPTY_IMAGE": {
        "value": "{\n  \"message\" : \"Empty image\",\n  \"errorCode\" : \"EMPTY_IMAGE\"\n}"
      },
      "CAN_NOT_PROCESS_IMAGE": {
        "value": "{\n  \"message\" : \"Can't process image\",\n  \"errorCode\" : \"CAN_NOT_PROCESS_IMAGE\"\n}"
      },
      "VEHICLE_NOT_FOUND": {
        "value": "{\n  \"message\" : \"The requested vehicle entry was not found\",\n  \"errorCode\" : \"VEHICLE_NOT_FOUND\"\n}"
      },
      "ELECTRIC_VEHICLE_NOT_FOUND": {
        "value": "{\n  \"message\" : \"The requested vehicle entry was not found or the vehicle is not an electric vehicle\",\n  \"errorCode\" : \"ELECTRIC_VEHICLE_NOT_FOUND\"\n}"
      },
      "VEHICLE_BRAND_NOT_FOUND": {
        "value": "{\n  \"message\" : \"Vehicle brand not found\",\n  \"errorCode\" : \"VEHICLE_BRAND_NOT_FOUND\"\n}"
      },
      "CHARGING_CURVE_NOT_FOUND": {
        "value": "{\n  \"message\" : \"Charging curve not found\",\n  \"errorCode\" : \"CHARGING_CURVE_NOT_FOUND\"\n}"
      },
      "INCORRECT_TENANT_ID": {
        "value": "{\n  \"message\" : \"Not allowed to add/update/fetch the resource with the provided tenant id\",\n  \"errorCode\" : \"INCORRECT_TENANT_ID\"\n}"
      },
      "BRAND_AND_VEHICLE_TENANTS_MISMATCH": {
        "value": "{\n  \"message\" : \"Vehicle and brand tenant ids don't match\",\n  \"errorCode\" : \"BRAND_AND_VEHICLE_TENANTS_MISMATCH\"\n}"
      },
      "IMAGE_NOT_FOUND": {
        "value": "{\n  \"message\" : \"Image not found\",\n  \"errorCode\" : \"IMAGE_NOT_FOUND\"\n}"
      },
      "FAILED_TO_READ_IMAGE": {
        "value": "{\n  \"message\" : \"Failed to read image\",\n  \"errorCode\" : \"FAILED_TO_READ_IMAGE\"\n}"
      },
      "INVALID_IMAGE_FILE_TYPE": {
        "value": "{\n  \"message\" : \"File has an invalid extension\",\n  \"errorCode\" : \"INVALID_IMAGE_FILE_TYPE\"\n}"
      },
      "VEHICLE_VARIANT_IMAGE_NOT_FOUND": {
        "value": "{\n  \"message\" : \"Vehicle doesn't have a variant image\",\n  \"errorCode\" : \"VEHICLE_VARIANT_IMAGE_NOT_FOUND\"\n}"
      },
      "FAILED_TO_DELETE_IMAGE": {
        "value": "{\n  \"message\" : \"Failed to delete the image\",\n  \"errorCode\" : \"FAILED_TO_DELETE_IMAGE\"\n}"
      },
      "UNSUPPORTED_IMAGE_FORMAT": {
        "value": "{\n  \"message\" : \"Image format is invalid or unsupported\",\n  \"errorCode\" : \"UNSUPPORTED_IMAGE_FORMAT\"\n}"
      },
      "IMAGE_FETCHING_ERROR": {
        "value": "{\n  \"message\" : \"Error occured during fetching the image\",\n  \"errorCode\" : \"IMAGE_FETCHING_ERROR\"\n}"
      },
      "INVALID_CUSTOMER_KEY": {
        "value": "{\n  \"message\" : \"Invalid customer key\",\n  \"errorCode\" : \"INVALID_CUSTOMER_KEY\"\n}"
      },
      "FILE_IS_NOT_IMAGE": {
        "value": "{\n  \"message\" : \"The file isn't image.\",\n  \"errorCode\" : \"FILE_IS_NOT_IMAGE\"\n}"
      },
      "FORMAT_NOT_SUPPORTED": {
        "value": "{\n  \"message\" : \"The logo format not supported\",\n  \"errorCode\" : \"FORMAT_NOT_SUPPORTED\"\n}"
      },
      "EXTENSION_MISSING": {
        "value": "{\n  \"message\" : \"The logo extension missing\",\n  \"errorCode\" : \"EXTENSION_MISSING\"\n}"
      }
    },
    "headers": {
      "api-category": {
        "description": "Fleet Services",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "display-name": {
        "description": "Fleet Orchestrator",
        "required": false,
        "schema": {
          "type": "string"
        }
      }
    }
  }
}