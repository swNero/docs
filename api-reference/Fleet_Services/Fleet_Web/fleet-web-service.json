{
  "openapi": "3.0.1",
  "info": {
    "title": "fleet-web-service",
    "version": "v1"
  },
  "servers": [
    {
      "url": "https://p3-acc.fleet.energystacks.io/fleet-web/v1",
      "description": "Generated server url"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "Fleet Tour",
      "description": "Support for Tour operations"
    },
    {
      "name": "Fleet/Core Vehicle",
      "description": "Support for Core/Fleet Vehicle operations (CRUDs)"
    },
    {
      "name": "Business Accounts",
      "description": "Business Accounts Controller"
    },
    {
      "name": "Fleet Job",
      "description": "Support for Fleet Job operations (CRUDs)"
    },
    {
      "name": "Tour Optimization",
      "description": "Calculates the fleet tours based on the criteria"
    },
    {
      "name": "Dashboard Fleet Tour",
      "description": "Support dashboard feature for fleet tours."
    },
    {
      "name": "User",
      "description": "Support for User operations"
    },
    {
      "name": "Matrix",
      "description": "Matrix Controller"
    },
    {
      "name": "Contamination Rules",
      "description": "Contamination Rules Controller"
    }
  ],
  "paths": {
    "/vehicles/{vehicleIdentificationNumber}": {
      "get": {
        "tags": [
          "Fleet/Core Vehicle"
        ],
        "summary": "Get fleet vehicle by vehicle identification number (VIN)",
        "description": "Returns a fleet vehicle, based on the provided VIN",
        "operationId": "getFleetVehicleByVIN",
        "parameters": [
          {
            "name": "vehicleIdentificationNumber",
            "in": "path",
            "description": "The vehicle identification number of the vehicle",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VehicleByVinWebResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "FLEET_VEHICLE_IDENTIFICATION_NUMBER_NOT_FOUND": {
                    "description": "FLEET_VEHICLE_IDENTIFICATION_NUMBER_NOT_FOUND",
                    "$ref": "#/components/examples/FLEET_VEHICLE_IDENTIFICATION_NUMBER_NOT_FOUND"
                  },
                  "VEHICLE_CORE_UUID_NOT_FOUND": {
                    "description": "VEHICLE_CORE_UUID_NOT_FOUND",
                    "$ref": "#/components/examples/VEHICLE_CORE_UUID_NOT_FOUND"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Fleet/Core Vehicle"
        ],
        "summary": "Update Fleet Vehicle",
        "description": "Update Fleet Vehicle with the specific vehicle identification number (VIN).\n#### Vehicle coordinates are inherited from one of the locations, of the related business account (depotId)",
        "operationId": "updateFleetVehicleByVehicleIdentificationNumber",
        "parameters": [
          {
            "name": "vehicleIdentificationNumber",
            "in": "path",
            "description": "The vehicle identification number of the vehicle",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FleetVehicleWebUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorMessageDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "VEHICLES_CORE_NOT_FOUND": {
                    "description": "VEHICLES_CORE_NOT_FOUND",
                    "$ref": "#/components/examples/VEHICLES_CORE_NOT_FOUND"
                  },
                  "FLEET_VEHICLE_IDENTIFICATION_NUMBER_NOT_FOUND": {
                    "description": "FLEET_VEHICLE_IDENTIFICATION_NUMBER_NOT_FOUND",
                    "$ref": "#/components/examples/FLEET_VEHICLE_IDENTIFICATION_NUMBER_NOT_FOUND"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "VEHICLE_IS_ASSIGNED_TO_A_TOUR": {
                    "description": "VEHICLE_IS_ASSIGNED_TO_A_TOUR",
                    "$ref": "#/components/examples/VEHICLE_IS_ASSIGNED_TO_A_TOUR"
                  }
                }
              }
            }
          },
          "424": {
            "description": "Failed Dependency",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "INVALID_VEHICLE_BUSINESS_ACCOUNT": {
                    "description": "INVALID_VEHICLE_BUSINESS_ACCOUNT",
                    "$ref": "#/components/examples/INVALID_VEHICLE_BUSINESS_ACCOUNT"
                  },
                  "BUSINESS_ACCOUNT_WITHOUT_LOCATIONS": {
                    "description": "BUSINESS_ACCOUNT_WITHOUT_LOCATIONS",
                    "$ref": "#/components/examples/BUSINESS_ACCOUNT_WITHOUT_LOCATIONS"
                  },
                  "BUSINESS_ACCOUNT_LOCATIONS_WITHOUT_GEOLOCATION": {
                    "description": "BUSINESS_ACCOUNT_LOCATIONS_WITHOUT_GEOLOCATION",
                    "$ref": "#/components/examples/BUSINESS_ACCOUNT_LOCATIONS_WITHOUT_GEOLOCATION"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Fleet/Core Vehicle"
        ],
        "summary": "Delete a fleet vehicle",
        "description": "Delete a fleet vehicle with the specific vehicle identification number",
        "operationId": "deleteFleetVehicleByVehicleIdentificationNumber",
        "parameters": [
          {
            "name": "vehicleIdentificationNumber",
            "in": "path",
            "description": "The vehicle identification number of the vehicle",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Operation"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "FLEET_VEHICLE_IDENTIFICATION_NUMBER_NOT_FOUND": {
                    "description": "FLEET_VEHICLE_IDENTIFICATION_NUMBER_NOT_FOUND",
                    "$ref": "#/components/examples/FLEET_VEHICLE_IDENTIFICATION_NUMBER_NOT_FOUND"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "VEHICLE_IS_ASSIGNED_TO_A_TOUR": {
                    "description": "VEHICLE_IS_ASSIGNED_TO_A_TOUR",
                    "$ref": "#/components/examples/VEHICLE_IS_ASSIGNED_TO_A_TOUR"
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Fleet/Core Vehicle"
        ],
        "summary": "Patch Fleet Vehicle",
        "description": "Update Fleet Vehicle with the specific vehicle identification number (VIN).\n#### Vehicle coordinates are inherited from one of the locations, of the related business account (depotId)",
        "operationId": "patchFleetVehicleByVehicleIdentificationNumber",
        "parameters": [
          {
            "name": "vehicleIdentificationNumber",
            "in": "path",
            "description": "The vehicle identification number of the vehicle",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FleetVehicleWebPatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful Operation"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorMessageDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "VEHICLES_CORE_NOT_FOUND": {
                    "description": "VEHICLES_CORE_NOT_FOUND",
                    "$ref": "#/components/examples/VEHICLES_CORE_NOT_FOUND"
                  },
                  "FLEET_VEHICLE_IDENTIFICATION_NUMBER_NOT_FOUND": {
                    "description": "FLEET_VEHICLE_IDENTIFICATION_NUMBER_NOT_FOUND",
                    "$ref": "#/components/examples/FLEET_VEHICLE_IDENTIFICATION_NUMBER_NOT_FOUND"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "CANNOT_PATCH_DETAILS_OF_PLANNED_VEHICLE": {
                    "description": "CANNOT_PATCH_DETAILS_OF_PLANNED_VEHICLE",
                    "$ref": "#/components/examples/CANNOT_PATCH_DETAILS_OF_PLANNED_VEHICLE"
                  }
                }
              }
            }
          },
          "424": {
            "description": "Failed Dependency",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "INVALID_VEHICLE_BUSINESS_ACCOUNT": {
                    "description": "INVALID_VEHICLE_BUSINESS_ACCOUNT",
                    "$ref": "#/components/examples/INVALID_VEHICLE_BUSINESS_ACCOUNT"
                  },
                  "BUSINESS_ACCOUNT_WITHOUT_LOCATIONS": {
                    "description": "BUSINESS_ACCOUNT_WITHOUT_LOCATIONS",
                    "$ref": "#/components/examples/BUSINESS_ACCOUNT_WITHOUT_LOCATIONS"
                  },
                  "BUSINESS_ACCOUNT_LOCATIONS_WITHOUT_GEOLOCATION": {
                    "description": "BUSINESS_ACCOUNT_LOCATIONS_WITHOUT_GEOLOCATION",
                    "$ref": "#/components/examples/BUSINESS_ACCOUNT_LOCATIONS_WITHOUT_GEOLOCATION"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/vehicles/{vehicleIdentificationNumber}/regular-working-hours/": {
      "put": {
        "tags": [
          "Fleet/Core Vehicle"
        ],
        "summary": "Update fleet vehicle's regular working hours.",
        "description": "Update fleet vehicle's regular working hours, by the vehicle identification number.\nIf there are active tours (= ENROUTE or PLANNED) for the requested vehicle, it is being validated if\nthey can be performed, and if new custom exceptional openings should be created (under specific circumstances).\n",
        "operationId": "updateFleetVehicleWorkingRegularHoursByVehicleIdentificationNumber",
        "parameters": [
          {
            "name": "vehicleIdentificationNumber",
            "in": "path",
            "description": "The vehicle identification number of the vehicle",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegularWorkingHours"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    }
                  ]
                },
                "examples": {
                  "INVALID_HOURS": {
                    "description": "INVALID_HOURS",
                    "$ref": "#/components/examples/INVALID_HOURS"
                  },
                  "DUPLICATE_WEEKDAYS": {
                    "description": "DUPLICATE_WEEKDAYS",
                    "$ref": "#/components/examples/DUPLICATE_WEEKDAYS"
                  },
                  "INVALID_BEGIN_END_TIME": {
                    "description": "INVALID_BEGIN_END_TIME",
                    "$ref": "#/components/examples/INVALID_BEGIN_END_TIME"
                  },
                  "UNKNOWN_TIME_ZONE_ID": {
                    "description": "UNKNOWN_TIME_ZONE_ID",
                    "$ref": "#/components/examples/UNKNOWN_TIME_ZONE_ID"
                  },
                  "TIME_ZONE_REQUIRED_WHEN_UPDATING_VEHICLE_HOURS": {
                    "description": "TIME_ZONE_REQUIRED_WHEN_UPDATING_VEHICLE_HOURS",
                    "$ref": "#/components/examples/TIME_ZONE_REQUIRED_WHEN_UPDATING_VEHICLE_HOURS"
                  },
                  "INVALID_EXCEPTIONAL_PERIOD_BEGIN_END_DATE": {
                    "description": "INVALID_EXCEPTIONAL_PERIOD_BEGIN_END_DATE",
                    "$ref": "#/components/examples/INVALID_EXCEPTIONAL_PERIOD_BEGIN_END_DATE"
                  },
                  "MORE_THAN_ONE_EXCEPTIONAL_PERIOD_WITHIN_SINGLE_DATE": {
                    "description": "MORE_THAN_ONE_EXCEPTIONAL_PERIOD_WITHIN_SINGLE_DATE",
                    "$ref": "#/components/examples/MORE_THAN_ONE_EXCEPTIONAL_PERIOD_WITHIN_SINGLE_DATE"
                  },
                  "EXCEPTIONAL_PERIOD_DATES_OVERLAP": {
                    "description": "EXCEPTIONAL_PERIOD_DATES_OVERLAP",
                    "$ref": "#/components/examples/EXCEPTIONAL_PERIOD_DATES_OVERLAP"
                  },
                  "NEW_REGULAR_HOURS_MUST_NOT_BLOCK_ACTIVE_TOURS": {
                    "description": "NEW_REGULAR_HOURS_MUST_NOT_BLOCK_ACTIVE_TOURS",
                    "$ref": "#/components/examples/NEW_REGULAR_HOURS_MUST_NOT_BLOCK_ACTIVE_TOURS"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "FLEET_VEHICLE_IDENTIFICATION_NUMBER_NOT_FOUND": {
                    "description": "FLEET_VEHICLE_IDENTIFICATION_NUMBER_NOT_FOUND",
                    "$ref": "#/components/examples/FLEET_VEHICLE_IDENTIFICATION_NUMBER_NOT_FOUND"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/vehicles/{vehicleIdentificationNumber}/exceptional-working-hours/": {
      "put": {
        "tags": [
          "Fleet/Core Vehicle"
        ],
        "summary": "Update fleet vehicle's exceptional working hours.",
        "description": "Update fleet vehicle's exceptional working hours, by the vehicle identification number.\nIf there are active tours (= ENROUTE or PLANNED) for the requested vehicle, it is being validated if\nthey can be performed also with the new exceptional periods.\n",
        "operationId": "updateFleetVehicleWorkingExceptionalHoursByVehicleIdentificationNumber",
        "parameters": [
          {
            "name": "vehicleIdentificationNumber",
            "in": "path",
            "description": "The vehicle identification number of the vehicle",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExceptionalWorkingHours"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    }
                  ]
                },
                "examples": {
                  "INVALID_HOURS": {
                    "description": "INVALID_HOURS",
                    "$ref": "#/components/examples/INVALID_HOURS"
                  },
                  "DUPLICATE_WEEKDAYS": {
                    "description": "DUPLICATE_WEEKDAYS",
                    "$ref": "#/components/examples/DUPLICATE_WEEKDAYS"
                  },
                  "INVALID_BEGIN_END_TIME": {
                    "description": "INVALID_BEGIN_END_TIME",
                    "$ref": "#/components/examples/INVALID_BEGIN_END_TIME"
                  },
                  "UNKNOWN_TIME_ZONE_ID": {
                    "description": "UNKNOWN_TIME_ZONE_ID",
                    "$ref": "#/components/examples/UNKNOWN_TIME_ZONE_ID"
                  },
                  "TIME_ZONE_REQUIRED_WHEN_UPDATING_VEHICLE_HOURS": {
                    "description": "TIME_ZONE_REQUIRED_WHEN_UPDATING_VEHICLE_HOURS",
                    "$ref": "#/components/examples/TIME_ZONE_REQUIRED_WHEN_UPDATING_VEHICLE_HOURS"
                  },
                  "INVALID_EXCEPTIONAL_PERIOD_BEGIN_END_DATE": {
                    "description": "INVALID_EXCEPTIONAL_PERIOD_BEGIN_END_DATE",
                    "$ref": "#/components/examples/INVALID_EXCEPTIONAL_PERIOD_BEGIN_END_DATE"
                  },
                  "MORE_THAN_ONE_EXCEPTIONAL_PERIOD_WITHIN_SINGLE_DATE": {
                    "description": "MORE_THAN_ONE_EXCEPTIONAL_PERIOD_WITHIN_SINGLE_DATE",
                    "$ref": "#/components/examples/MORE_THAN_ONE_EXCEPTIONAL_PERIOD_WITHIN_SINGLE_DATE"
                  },
                  "EXCEPTIONAL_PERIOD_DATES_OVERLAP": {
                    "description": "EXCEPTIONAL_PERIOD_DATES_OVERLAP",
                    "$ref": "#/components/examples/EXCEPTIONAL_PERIOD_DATES_OVERLAP"
                  },
                  "NEW_EXCEPTIONAL_CLOSING_CANNOT_BLOCK_ACTIVE_TOURS": {
                    "description": "NEW_EXCEPTIONAL_CLOSING_CANNOT_BLOCK_ACTIVE_TOURS",
                    "$ref": "#/components/examples/NEW_EXCEPTIONAL_CLOSING_CANNOT_BLOCK_ACTIVE_TOURS"
                  },
                  "NEW_EXCEPTIONAL_OPENING_NOT_EQUAL_TO_OR_EXTENDING_EXISTING": {
                    "description": "NEW_EXCEPTIONAL_OPENING_NOT_EQUAL_TO_OR_EXTENDING_EXISTING",
                    "$ref": "#/components/examples/NEW_EXCEPTIONAL_OPENING_NOT_EQUAL_TO_OR_EXTENDING_EXISTING"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "FLEET_VEHICLE_IDENTIFICATION_NUMBER_NOT_FOUND": {
                    "description": "FLEET_VEHICLE_IDENTIFICATION_NUMBER_NOT_FOUND",
                    "$ref": "#/components/examples/FLEET_VEHICLE_IDENTIFICATION_NUMBER_NOT_FOUND"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tours/{tourUid}": {
      "put": {
        "tags": [
          "Fleet Tour"
        ],
        "summary": "Update a fleet tour by tour uid",
        "description": "Updates an existing Fleet Tour by tour UID, and all related jobs. Tour's vehicle is not updatable.",
        "operationId": "updateFleetTourByTourUid",
        "parameters": [
          {
            "name": "tourUid",
            "in": "path",
            "description": "Tour unique identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FleetTourWebUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TourIdentifier"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    }
                  ]
                },
                "examples": {
                  "REQUEST_CONTAINS_DUPLICATE_JOB_UIDS": {
                    "description": "REQUEST_CONTAINS_DUPLICATE_JOB_UIDS",
                    "$ref": "#/components/examples/REQUEST_CONTAINS_DUPLICATE_JOB_UIDS"
                  },
                  "JOBS_AND_VEHICLES_NOT_COMMON_DEPOT": {
                    "description": "JOBS_AND_VEHICLES_NOT_COMMON_DEPOT",
                    "$ref": "#/components/examples/JOBS_AND_VEHICLES_NOT_COMMON_DEPOT"
                  },
                  "FLEET_VEHICLES_NOT_COMMON_DEPOT": {
                    "description": "FLEET_VEHICLES_NOT_COMMON_DEPOT",
                    "$ref": "#/components/examples/FLEET_VEHICLES_NOT_COMMON_DEPOT"
                  },
                  "FLEET_JOBS_NOT_COMMON_DEPOT": {
                    "description": "FLEET_JOBS_NOT_COMMON_DEPOT",
                    "$ref": "#/components/examples/FLEET_JOBS_NOT_COMMON_DEPOT"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "FLEET_TOUR_UID_NOT_FOUND": {
                    "description": "FLEET_TOUR_UID_NOT_FOUND",
                    "$ref": "#/components/examples/FLEET_TOUR_UID_NOT_FOUND"
                  },
                  "VEHICLES_CORE_NOT_FOUND": {
                    "description": "VEHICLES_CORE_NOT_FOUND",
                    "$ref": "#/components/examples/VEHICLES_CORE_NOT_FOUND"
                  },
                  "FLEET_JOB_UIDS_NOT_FOUND": {
                    "description": "FLEET_JOB_UIDS_NOT_FOUND",
                    "$ref": "#/components/examples/FLEET_JOB_UIDS_NOT_FOUND"
                  },
                  "VIN_MISS_MATCH": {
                    "description": "VIN_MISS_MATCH",
                    "$ref": "#/components/examples/VIN_MISS_MATCH"
                  },
                  "JOB_MISS_MATCH": {
                    "description": "JOB_MISS_MATCH",
                    "$ref": "#/components/examples/JOB_MISS_MATCH"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "CANNOT_MODIFY_FINISHED_FLEET_TOUR": {
                    "description": "CANNOT_MODIFY_FINISHED_FLEET_TOUR",
                    "$ref": "#/components/examples/CANNOT_MODIFY_FINISHED_FLEET_TOUR"
                  },
                  "FLEET_JOB_ALREADY_ASSIGNED_TO_TOUR": {
                    "description": "FLEET_JOB_ALREADY_ASSIGNED_TO_TOUR",
                    "$ref": "#/components/examples/FLEET_JOB_ALREADY_ASSIGNED_TO_TOUR"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "ERROR_WHILE_PUSHING_MODIFIED_TOUR_TO_NAVISION": {
                    "description": "ERROR_WHILE_PUSHING_MODIFIED_TOUR_TO_NAVISION",
                    "$ref": "#/components/examples/ERROR_WHILE_PUSHING_MODIFIED_TOUR_TO_NAVISION"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Fleet Tour"
        ],
        "summary": "Delete a fleet tour",
        "description": "Deletes a fleet tour by tour UID, and unassign all of its fleet job(s).",
        "operationId": "deleteFleetTourByTourUid",
        "parameters": [
          {
            "name": "tourUid",
            "in": "path",
            "description": "Tour unique identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Operation"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "FLEET_TOUR_UID_NOT_FOUND": {
                    "description": "FLEET_TOUR_UID_NOT_FOUND",
                    "$ref": "#/components/examples/FLEET_TOUR_UID_NOT_FOUND"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "CANNOT_DELETE_STARTED_FLEET_TOUR": {
                    "description": "CANNOT_DELETE_STARTED_FLEET_TOUR",
                    "$ref": "#/components/examples/CANNOT_DELETE_STARTED_FLEET_TOUR"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "ERROR_WHILE_PUSHING_DELETED_TOUR_TO_NAVISION": {
                    "description": "ERROR_WHILE_PUSHING_DELETED_TOUR_TO_NAVISION",
                    "$ref": "#/components/examples/ERROR_WHILE_PUSHING_DELETED_TOUR_TO_NAVISION"
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Fleet Tour"
        ],
        "summary": "Patch an existing fleet tour by tour uid.",
        "description": "Patches an existing Fleet Tour, and its related fleet Jobs. Whether a tour field is updatable depends\non the current status of the tour.\nFields with null values in the patch request are ignored, indicating no changes for those fields.",
        "operationId": "patchFleetTourByTourUid",
        "parameters": [
          {
            "name": "tourUid",
            "in": "path",
            "description": "Tour unique identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FleetTourWebPatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TourIdentifier"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "FLEET_TOUR_UID_NOT_FOUND": {
                    "description": "FLEET_TOUR_UID_NOT_FOUND",
                    "$ref": "#/components/examples/FLEET_TOUR_UID_NOT_FOUND"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "CANNOT_PATCH_DETAILS_OF_FINISHED_FLEET_TOUR": {
                    "description": "CANNOT_PATCH_DETAILS_OF_FINISHED_FLEET_TOUR",
                    "$ref": "#/components/examples/CANNOT_PATCH_DETAILS_OF_FINISHED_FLEET_TOUR"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/routes/optimize/{tourUid}": {
      "put": {
        "tags": [
          "Tour Optimization"
        ],
        "summary": "Optimizes an existing fleet tour.",
        "description": "The optimized tour will rearrange your planned job(s) to minimize the total time spent on the road.",
        "operationId": "updateOptimizedTourByTourUID",
        "parameters": [
          {
            "name": "tourUid",
            "in": "path",
            "description": "Tour unique identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OptimizeTourWebUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OptimizeTourWebResponseWrapper"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    }
                  ]
                },
                "examples": {
                  "INVALID_ROUTE_DATES": {
                    "description": "INVALID_ROUTE_DATES",
                    "$ref": "#/components/examples/INVALID_ROUTE_DATES"
                  },
                  "JOBS_AND_VEHICLES_NOT_COMMON_DEPOT": {
                    "description": "JOBS_AND_VEHICLES_NOT_COMMON_DEPOT",
                    "$ref": "#/components/examples/JOBS_AND_VEHICLES_NOT_COMMON_DEPOT"
                  },
                  "FLEET_VEHICLES_NOT_COMMON_DEPOT": {
                    "description": "FLEET_VEHICLES_NOT_COMMON_DEPOT",
                    "$ref": "#/components/examples/FLEET_VEHICLES_NOT_COMMON_DEPOT"
                  },
                  "FLEET_JOBS_NOT_COMMON_DEPOT": {
                    "description": "FLEET_JOBS_NOT_COMMON_DEPOT",
                    "$ref": "#/components/examples/FLEET_JOBS_NOT_COMMON_DEPOT"
                  },
                  "OPTIMIZE_TOUR_JOBS_OUTSIDE_OF_GLOBAL_TIME_WINDOW": {
                    "description": "OPTIMIZE_TOUR_JOBS_OUTSIDE_OF_GLOBAL_TIME_WINDOW",
                    "$ref": "#/components/examples/OPTIMIZE_TOUR_JOBS_OUTSIDE_OF_GLOBAL_TIME_WINDOW"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "FLEET_TOUR_UID_NOT_FOUND": {
                    "description": "FLEET_TOUR_UID_NOT_FOUND",
                    "$ref": "#/components/examples/FLEET_TOUR_UID_NOT_FOUND"
                  },
                  "JOB_MISS_MATCH": {
                    "description": "JOB_MISS_MATCH",
                    "$ref": "#/components/examples/JOB_MISS_MATCH"
                  },
                  "JOB_WITH_INVALID_BUSINESS_ACCOUNT": {
                    "description": "JOB_WITH_INVALID_BUSINESS_ACCOUNT",
                    "$ref": "#/components/examples/JOB_WITH_INVALID_BUSINESS_ACCOUNT"
                  },
                  "LOCATIONS_ASSOCIATED_WITH_JOBS_NOT_FOUND": {
                    "description": "LOCATIONS_ASSOCIATED_WITH_JOBS_NOT_FOUND",
                    "$ref": "#/components/examples/LOCATIONS_ASSOCIATED_WITH_JOBS_NOT_FOUND"
                  },
                  "VIN_MISS_MATCH": {
                    "description": "VIN_MISS_MATCH",
                    "$ref": "#/components/examples/VIN_MISS_MATCH"
                  },
                  "FLEET_VEHICLE_WITH_INVALID_VEHICLE_CORE": {
                    "description": "FLEET_VEHICLE_WITH_INVALID_VEHICLE_CORE",
                    "$ref": "#/components/examples/FLEET_VEHICLE_WITH_INVALID_VEHICLE_CORE"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "TOUR_CANNOT_BE_OPTIMIZED": {
                    "description": "TOUR_CANNOT_BE_OPTIMIZED",
                    "$ref": "#/components/examples/TOUR_CANNOT_BE_OPTIMIZED"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "FAILED_TO_FETCH_VEHICLE_TOURS": {
                    "description": "FAILED_TO_FETCH_VEHICLE_TOURS",
                    "$ref": "#/components/examples/FAILED_TO_FETCH_VEHICLE_TOURS"
                  }
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/routes/optimize/{tourUid}/job-precedence": {
      "put": {
        "tags": [
          "Tour Optimization"
        ],
        "summary": "Optimizes an existing fleet tour, using a specific job precedence sequence.",
        "description": "### Optimizes an existing fleet tour, based on the requested job precedence sequence.\n#### Contamination rules do not apply.",
        "operationId": "updateOptimizedTourWithJobPrecedenceByTourUID",
        "parameters": [
          {
            "name": "tourUid",
            "in": "path",
            "description": "Tour unique identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrecedenceTourWebUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OptimizeTourWebResponseWrapper"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    }
                  ]
                },
                "examples": {
                  "REQUEST_CONTAINS_DUPLICATE_JOB_UIDS": {
                    "description": "REQUEST_CONTAINS_DUPLICATE_JOB_UIDS",
                    "$ref": "#/components/examples/REQUEST_CONTAINS_DUPLICATE_JOB_UIDS"
                  },
                  "END_DATE_NOT_EQUAL_TO_START_DATE": {
                    "description": "END_DATE_NOT_EQUAL_TO_START_DATE",
                    "$ref": "#/components/examples/END_DATE_NOT_EQUAL_TO_START_DATE"
                  },
                  "END_DATETIME_IS_BEFORE_START_DATETIME": {
                    "description": "END_DATETIME_IS_BEFORE_START_DATETIME",
                    "$ref": "#/components/examples/END_DATETIME_IS_BEFORE_START_DATETIME"
                  },
                  "OPTIMIZE_TOUR_JOBS_OUTSIDE_OF_GLOBAL_TIME_WINDOW": {
                    "description": "OPTIMIZE_TOUR_JOBS_OUTSIDE_OF_GLOBAL_TIME_WINDOW",
                    "$ref": "#/components/examples/OPTIMIZE_TOUR_JOBS_OUTSIDE_OF_GLOBAL_TIME_WINDOW"
                  },
                  "INVALID_OPTIMIZE_TOUR_GLOBAL_TIME_WINDOW": {
                    "description": "INVALID_OPTIMIZE_TOUR_GLOBAL_TIME_WINDOW",
                    "$ref": "#/components/examples/INVALID_OPTIMIZE_TOUR_GLOBAL_TIME_WINDOW"
                  },
                  "INVALID_JOB_ORDER_SEQUENCE": {
                    "description": "INVALID_JOB_ORDER_SEQUENCE",
                    "$ref": "#/components/examples/INVALID_JOB_ORDER_SEQUENCE"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    }
                  ]
                },
                "examples": {
                  "FLEET_TOUR_UID_NOT_FOUND": {
                    "description": "FLEET_TOUR_UID_NOT_FOUND",
                    "$ref": "#/components/examples/FLEET_TOUR_UID_NOT_FOUND"
                  },
                  "JOB_MISS_MATCH": {
                    "description": "JOB_MISS_MATCH",
                    "$ref": "#/components/examples/JOB_MISS_MATCH"
                  },
                  "VIN_MISS_MATCH": {
                    "description": "VIN_MISS_MATCH",
                    "$ref": "#/components/examples/VIN_MISS_MATCH"
                  },
                  "FLEET_JOBS_NOT_COMMON_DEPOT": {
                    "description": "FLEET_JOBS_NOT_COMMON_DEPOT",
                    "$ref": "#/components/examples/FLEET_JOBS_NOT_COMMON_DEPOT"
                  },
                  "FLEET_VEHICLES_NOT_COMMON_DEPOT": {
                    "description": "FLEET_VEHICLES_NOT_COMMON_DEPOT",
                    "$ref": "#/components/examples/FLEET_VEHICLES_NOT_COMMON_DEPOT"
                  },
                  "JOBS_AND_VEHICLES_NOT_COMMON_DEPOT": {
                    "description": "JOBS_AND_VEHICLES_NOT_COMMON_DEPOT",
                    "$ref": "#/components/examples/JOBS_AND_VEHICLES_NOT_COMMON_DEPOT"
                  },
                  "VEHICLES_CORE_NOT_FOUND": {
                    "description": "VEHICLES_CORE_NOT_FOUND",
                    "$ref": "#/components/examples/VEHICLES_CORE_NOT_FOUND"
                  },
                  "FLEET_VEHICLE_WITH_INVALID_VEHICLE_CORE": {
                    "description": "FLEET_VEHICLE_WITH_INVALID_VEHICLE_CORE",
                    "$ref": "#/components/examples/FLEET_VEHICLE_WITH_INVALID_VEHICLE_CORE"
                  },
                  "JOB_WITH_INVALID_BUSINESS_ACCOUNT": {
                    "description": "JOB_WITH_INVALID_BUSINESS_ACCOUNT",
                    "$ref": "#/components/examples/JOB_WITH_INVALID_BUSINESS_ACCOUNT"
                  },
                  "LOCATIONS_ASSOCIATED_WITH_JOBS_NOT_FOUND": {
                    "description": "LOCATIONS_ASSOCIATED_WITH_JOBS_NOT_FOUND",
                    "$ref": "#/components/examples/LOCATIONS_ASSOCIATED_WITH_JOBS_NOT_FOUND"
                  },
                  "GEO_LOCATION_NOT_ASSIGNED_TO_JOB": {
                    "description": "GEO_LOCATION_NOT_ASSIGNED_TO_JOB",
                    "$ref": "#/components/examples/GEO_LOCATION_NOT_ASSIGNED_TO_JOB"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "VEHICLE_NOT_AVAILABLE_FOR_TOUR_PLANNING": {
                    "description": "VEHICLE_NOT_AVAILABLE_FOR_TOUR_PLANNING",
                    "$ref": "#/components/examples/VEHICLE_NOT_AVAILABLE_FOR_TOUR_PLANNING"
                  },
                  "JOB_PRODUCT_NOT_ASSIGNED_TO_ORIGIN_LOCATION": {
                    "description": "JOB_PRODUCT_NOT_ASSIGNED_TO_ORIGIN_LOCATION",
                    "$ref": "#/components/examples/JOB_PRODUCT_NOT_ASSIGNED_TO_ORIGIN_LOCATION"
                  },
                  "ORIGIN_LOCATION_DOES_NOT_HAVE_ASSIGNED_PRODUCTS": {
                    "description": "ORIGIN_LOCATION_DOES_NOT_HAVE_ASSIGNED_PRODUCTS",
                    "$ref": "#/components/examples/ORIGIN_LOCATION_DOES_NOT_HAVE_ASSIGNED_PRODUCTS"
                  },
                  "TOUR_CANNOT_BE_OPTIMIZED": {
                    "description": "TOUR_CANNOT_BE_OPTIMIZED",
                    "$ref": "#/components/examples/TOUR_CANNOT_BE_OPTIMIZED"
                  },
                  "INVALID_UPDATED_TOUR_JOB_VISIT_ORDER": {
                    "description": "INVALID_UPDATED_TOUR_JOB_VISIT_ORDER",
                    "$ref": "#/components/examples/INVALID_UPDATED_TOUR_JOB_VISIT_ORDER"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/vehicles": {
      "get": {
        "tags": [
          "Fleet/Core Vehicle"
        ],
        "summary": "Get all fleet vehicles for a specific depot.",
        "description": "Return a list of all fleet vehicles for the requested depotId.",
        "operationId": "getAllVehicles",
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Beginning of the time period",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2024-11-15T23:59:59"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "End of the time period",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2024-11-15T23:59:59"
          },
          {
            "name": "depotId",
            "in": "query",
            "description": "Depot identifier.",
            "required": true,
            "schema": {
              "maxLength": 255,
              "minLength": 0,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VehicleWebResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "END_DATE_IS_EARLIER_THAN_START_DATE": {
                    "description": "END_DATE_IS_EARLIER_THAN_START_DATE",
                    "$ref": "#/components/examples/END_DATE_IS_EARLIER_THAN_START_DATE"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "VIN_NOT_FOUND": {
                    "description": "VIN_NOT_FOUND",
                    "$ref": "#/components/examples/VIN_NOT_FOUND"
                  },
                  "VEHICLE_CORE_UUID_NOT_FOUND": {
                    "description": "VEHICLE_CORE_UUID_NOT_FOUND",
                    "$ref": "#/components/examples/VEHICLE_CORE_UUID_NOT_FOUND"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Fleet/Core Vehicle"
        ],
        "summary": "Create fleet vehicle",
        "description": "Creates a new fleet vehicle.\n#### Vehicle coordinates are inherited from one of the locations, of the related business account (depotId)",
        "operationId": "createFleetVehicle",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FleetVehicleWebCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Operation"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    }
                  ]
                },
                "examples": {
                  "INVALID_HOURS": {
                    "description": "INVALID_HOURS",
                    "$ref": "#/components/examples/INVALID_HOURS"
                  },
                  "DUPLICATE_WEEKDAYS": {
                    "description": "DUPLICATE_WEEKDAYS",
                    "$ref": "#/components/examples/DUPLICATE_WEEKDAYS"
                  },
                  "INVALID_BEGIN_END_TIME": {
                    "description": "INVALID_BEGIN_END_TIME",
                    "$ref": "#/components/examples/INVALID_BEGIN_END_TIME"
                  },
                  "UNKNOWN_TIME_ZONE_ID": {
                    "description": "UNKNOWN_TIME_ZONE_ID",
                    "$ref": "#/components/examples/UNKNOWN_TIME_ZONE_ID"
                  },
                  "INVALID_EXCEPTIONAL_PERIOD_BEGIN_END_DATE": {
                    "description": "INVALID_EXCEPTIONAL_PERIOD_BEGIN_END_DATE",
                    "$ref": "#/components/examples/INVALID_EXCEPTIONAL_PERIOD_BEGIN_END_DATE"
                  },
                  "MORE_THAN_ONE_EXCEPTIONAL_PERIOD_WITHIN_SINGLE_DATE": {
                    "description": "MORE_THAN_ONE_EXCEPTIONAL_PERIOD_WITHIN_SINGLE_DATE",
                    "$ref": "#/components/examples/MORE_THAN_ONE_EXCEPTIONAL_PERIOD_WITHIN_SINGLE_DATE"
                  },
                  "EXCEPTIONAL_PERIOD_DATES_OVERLAP": {
                    "description": "EXCEPTIONAL_PERIOD_DATES_OVERLAP",
                    "$ref": "#/components/examples/EXCEPTIONAL_PERIOD_DATES_OVERLAP"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "VEHICLES_CORE_NOT_FOUND": {
                    "description": "VEHICLES_CORE_NOT_FOUND",
                    "$ref": "#/components/examples/VEHICLES_CORE_NOT_FOUND"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "FLEET_VEHICLE_IDENTIFICATION_NUMBER_ALREADY_EXISTS": {
                    "description": "FLEET_VEHICLE_IDENTIFICATION_NUMBER_ALREADY_EXISTS",
                    "$ref": "#/components/examples/FLEET_VEHICLE_IDENTIFICATION_NUMBER_ALREADY_EXISTS"
                  }
                }
              }
            }
          },
          "424": {
            "description": "Failed Dependency",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "BUSINESS_ACCOUNT_WITHOUT_LOCATIONS": {
                    "description": "BUSINESS_ACCOUNT_WITHOUT_LOCATIONS",
                    "$ref": "#/components/examples/BUSINESS_ACCOUNT_WITHOUT_LOCATIONS"
                  },
                  "BUSINESS_ACCOUNT_LOCATIONS_WITHOUT_GEOLOCATION": {
                    "description": "BUSINESS_ACCOUNT_LOCATIONS_WITHOUT_GEOLOCATION",
                    "$ref": "#/components/examples/BUSINESS_ACCOUNT_LOCATIONS_WITHOUT_GEOLOCATION"
                  },
                  "INVALID_VEHICLE_BUSINESS_ACCOUNT": {
                    "description": "INVALID_VEHICLE_BUSINESS_ACCOUNT",
                    "$ref": "#/components/examples/INVALID_VEHICLE_BUSINESS_ACCOUNT"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tours": {
      "get": {
        "tags": [
          "Fleet Tour"
        ],
        "summary": "Get fleet tours at depot within optional time range.",
        "description": "Returns a list of all fleet tours at depot within the optional time range, along with their vehicle details. If there are no tours, list is empty.",
        "operationId": "getFleetToursFiltered",
        "parameters": [
          {
            "name": "depotId",
            "in": "query",
            "description": "Depot identifier.",
            "required": true,
            "schema": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "startDateFrom",
            "in": "query",
            "description": "Optional tour start date filter.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDateTo",
            "in": "query",
            "description": "Optional tour end date filter.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TourWebResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "JOB_WITH_INVALID_BUSINESS_ACCOUNT": {
                    "description": "JOB_WITH_INVALID_BUSINESS_ACCOUNT",
                    "$ref": "#/components/examples/JOB_WITH_INVALID_BUSINESS_ACCOUNT"
                  },
                  "TOUR_WITH_INVALID_FLEET_VEHICLE": {
                    "description": "TOUR_WITH_INVALID_FLEET_VEHICLE",
                    "$ref": "#/components/examples/TOUR_WITH_INVALID_FLEET_VEHICLE"
                  },
                  "VEHICLES_CORE_NOT_FOUND": {
                    "description": "VEHICLES_CORE_NOT_FOUND",
                    "$ref": "#/components/examples/VEHICLES_CORE_NOT_FOUND"
                  }
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "Fleet Tour"
        ],
        "summary": "Create multiple fleet tours",
        "description": "Creates a new Fleet Tour for each tour request in the provided list",
        "operationId": "createFleetTours",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FleetTourWebCreateRequest"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Operation"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    }
                  ]
                },
                "examples": {
                  "REQUEST_CONTAINS_DUPLICATE_JOB_UIDS": {
                    "description": "REQUEST_CONTAINS_DUPLICATE_JOB_UIDS",
                    "$ref": "#/components/examples/REQUEST_CONTAINS_DUPLICATE_JOB_UIDS"
                  },
                  "JOBS_AND_VEHICLES_NOT_COMMON_DEPOT": {
                    "description": "JOBS_AND_VEHICLES_NOT_COMMON_DEPOT",
                    "$ref": "#/components/examples/JOBS_AND_VEHICLES_NOT_COMMON_DEPOT"
                  },
                  "FLEET_VEHICLES_NOT_COMMON_DEPOT": {
                    "description": "FLEET_VEHICLES_NOT_COMMON_DEPOT",
                    "$ref": "#/components/examples/FLEET_VEHICLES_NOT_COMMON_DEPOT"
                  },
                  "FLEET_JOBS_NOT_COMMON_DEPOT": {
                    "description": "FLEET_JOBS_NOT_COMMON_DEPOT",
                    "$ref": "#/components/examples/FLEET_JOBS_NOT_COMMON_DEPOT"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "FLEET_JOB_UIDS_NOT_FOUND": {
                    "description": "FLEET_JOB_UIDS_NOT_FOUND",
                    "$ref": "#/components/examples/FLEET_JOB_UIDS_NOT_FOUND"
                  },
                  "TOUR_WITH_INVALID_FLEET_VEHICLE": {
                    "description": "TOUR_WITH_INVALID_FLEET_VEHICLE",
                    "$ref": "#/components/examples/TOUR_WITH_INVALID_FLEET_VEHICLE"
                  },
                  "VIN_MISS_MATCH": {
                    "description": "VIN_MISS_MATCH",
                    "$ref": "#/components/examples/VIN_MISS_MATCH"
                  },
                  "JOB_MISS_MATCH": {
                    "description": "JOB_MISS_MATCH",
                    "$ref": "#/components/examples/JOB_MISS_MATCH"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "FLEET_JOB_ALREADY_ASSIGNED_TO_TOUR": {
                    "description": "FLEET_JOB_ALREADY_ASSIGNED_TO_TOUR",
                    "$ref": "#/components/examples/FLEET_JOB_ALREADY_ASSIGNED_TO_TOUR"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while pushing new tour(s) to Navision.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "ERROR_WHILE_PUSHING_NEW_TOURS_TO_NAVISION": {
                    "description": "ERROR_WHILE_PUSHING_NEW_TOURS_TO_NAVISION",
                    "$ref": "#/components/examples/ERROR_WHILE_PUSHING_NEW_TOURS_TO_NAVISION"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/routes/optimize": {
      "post": {
        "tags": [
          "Tour Optimization"
        ],
        "summary": "Creates optimized fleet tour(s).",
        "description": "The optimized tour(s) will rearrange your planned job(s) to minimize the total time spent on the road.",
        "operationId": "createOptimizedTours",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OptimizeTourOrchestratorCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OptimizeTourWebCreateResponseWrapper"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    }
                  ]
                },
                "examples": {
                  "INVALID_ROUTE_DATES": {
                    "description": "INVALID_ROUTE_DATES",
                    "$ref": "#/components/examples/INVALID_ROUTE_DATES"
                  },
                  "JOBS_AND_VEHICLES_NOT_COMMON_DEPOT": {
                    "description": "JOBS_AND_VEHICLES_NOT_COMMON_DEPOT",
                    "$ref": "#/components/examples/JOBS_AND_VEHICLES_NOT_COMMON_DEPOT"
                  },
                  "FLEET_VEHICLES_NOT_COMMON_DEPOT": {
                    "description": "FLEET_VEHICLES_NOT_COMMON_DEPOT",
                    "$ref": "#/components/examples/FLEET_VEHICLES_NOT_COMMON_DEPOT"
                  },
                  "FLEET_JOBS_NOT_COMMON_DEPOT": {
                    "description": "FLEET_JOBS_NOT_COMMON_DEPOT",
                    "$ref": "#/components/examples/FLEET_JOBS_NOT_COMMON_DEPOT"
                  },
                  "INVALID_OPTIMIZE_TOUR_GLOBAL_TIME_WINDOW": {
                    "description": "INVALID_OPTIMIZE_TOUR_GLOBAL_TIME_WINDOW",
                    "$ref": "#/components/examples/INVALID_OPTIMIZE_TOUR_GLOBAL_TIME_WINDOW"
                  },
                  "OPTIMIZE_TOUR_JOBS_OUTSIDE_OF_GLOBAL_TIME_WINDOW": {
                    "description": "OPTIMIZE_TOUR_JOBS_OUTSIDE_OF_GLOBAL_TIME_WINDOW",
                    "$ref": "#/components/examples/OPTIMIZE_TOUR_JOBS_OUTSIDE_OF_GLOBAL_TIME_WINDOW"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "JOB_MISS_MATCH": {
                    "description": "JOB_MISS_MATCH",
                    "$ref": "#/components/examples/JOB_MISS_MATCH"
                  },
                  "JOB_WITH_INVALID_BUSINESS_ACCOUNT": {
                    "description": "JOB_WITH_INVALID_BUSINESS_ACCOUNT",
                    "$ref": "#/components/examples/JOB_WITH_INVALID_BUSINESS_ACCOUNT"
                  },
                  "LOCATIONS_ASSOCIATED_WITH_JOBS_NOT_FOUND": {
                    "description": "LOCATIONS_ASSOCIATED_WITH_JOBS_NOT_FOUND",
                    "$ref": "#/components/examples/LOCATIONS_ASSOCIATED_WITH_JOBS_NOT_FOUND"
                  },
                  "VIN_MISS_MATCH": {
                    "description": "VIN_MISS_MATCH",
                    "$ref": "#/components/examples/VIN_MISS_MATCH"
                  },
                  "FLEET_VEHICLE_WITH_INVALID_VEHICLE_CORE": {
                    "description": "FLEET_VEHICLE_WITH_INVALID_VEHICLE_CORE",
                    "$ref": "#/components/examples/FLEET_VEHICLE_WITH_INVALID_VEHICLE_CORE"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "FAILED_TO_FETCH_VEHICLE_TOURS": {
                    "description": "FAILED_TO_FETCH_VEHICLE_TOURS",
                    "$ref": "#/components/examples/FAILED_TO_FETCH_VEHICLE_TOURS"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/routes/optimize/job-precedence": {
      "post": {
        "tags": [
          "Tour Optimization"
        ],
        "summary": "Create a new optimized fleet tour, using a specific job precedence sequence.",
        "description": "### Creates a new optimized fleet tour, based on the requested job precedence sequence.\n#### Contamination rules do not apply.",
        "operationId": "createOptimizedTourWithJobPrecedence",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrecedenceTourWebCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OptimizeTourWebResponseWrapper"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    }
                  ]
                },
                "examples": {
                  "REQUEST_CONTAINS_DUPLICATE_JOB_UIDS": {
                    "description": "REQUEST_CONTAINS_DUPLICATE_JOB_UIDS",
                    "$ref": "#/components/examples/REQUEST_CONTAINS_DUPLICATE_JOB_UIDS"
                  },
                  "END_DATE_NOT_EQUAL_TO_START_DATE": {
                    "description": "END_DATE_NOT_EQUAL_TO_START_DATE",
                    "$ref": "#/components/examples/END_DATE_NOT_EQUAL_TO_START_DATE"
                  },
                  "END_DATETIME_IS_BEFORE_START_DATETIME": {
                    "description": "END_DATETIME_IS_BEFORE_START_DATETIME",
                    "$ref": "#/components/examples/END_DATETIME_IS_BEFORE_START_DATETIME"
                  },
                  "OPTIMIZE_TOUR_JOBS_OUTSIDE_OF_GLOBAL_TIME_WINDOW": {
                    "description": "OPTIMIZE_TOUR_JOBS_OUTSIDE_OF_GLOBAL_TIME_WINDOW",
                    "$ref": "#/components/examples/OPTIMIZE_TOUR_JOBS_OUTSIDE_OF_GLOBAL_TIME_WINDOW"
                  },
                  "INVALID_OPTIMIZE_TOUR_GLOBAL_TIME_WINDOW": {
                    "description": "INVALID_OPTIMIZE_TOUR_GLOBAL_TIME_WINDOW",
                    "$ref": "#/components/examples/INVALID_OPTIMIZE_TOUR_GLOBAL_TIME_WINDOW"
                  },
                  "INVALID_JOB_ORDER_SEQUENCE": {
                    "description": "INVALID_JOB_ORDER_SEQUENCE",
                    "$ref": "#/components/examples/INVALID_JOB_ORDER_SEQUENCE"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    }
                  ]
                },
                "examples": {
                  "JOB_MISS_MATCH": {
                    "description": "JOB_MISS_MATCH",
                    "$ref": "#/components/examples/JOB_MISS_MATCH"
                  },
                  "VIN_MISS_MATCH": {
                    "description": "VIN_MISS_MATCH",
                    "$ref": "#/components/examples/VIN_MISS_MATCH"
                  },
                  "FLEET_JOBS_NOT_COMMON_DEPOT": {
                    "description": "FLEET_JOBS_NOT_COMMON_DEPOT",
                    "$ref": "#/components/examples/FLEET_JOBS_NOT_COMMON_DEPOT"
                  },
                  "FLEET_VEHICLES_NOT_COMMON_DEPOT": {
                    "description": "FLEET_VEHICLES_NOT_COMMON_DEPOT",
                    "$ref": "#/components/examples/FLEET_VEHICLES_NOT_COMMON_DEPOT"
                  },
                  "JOBS_AND_VEHICLES_NOT_COMMON_DEPOT": {
                    "description": "JOBS_AND_VEHICLES_NOT_COMMON_DEPOT",
                    "$ref": "#/components/examples/JOBS_AND_VEHICLES_NOT_COMMON_DEPOT"
                  },
                  "VEHICLES_CORE_NOT_FOUND": {
                    "description": "VEHICLES_CORE_NOT_FOUND",
                    "$ref": "#/components/examples/VEHICLES_CORE_NOT_FOUND"
                  },
                  "FLEET_VEHICLE_WITH_INVALID_VEHICLE_CORE": {
                    "description": "FLEET_VEHICLE_WITH_INVALID_VEHICLE_CORE",
                    "$ref": "#/components/examples/FLEET_VEHICLE_WITH_INVALID_VEHICLE_CORE"
                  },
                  "JOB_WITH_INVALID_BUSINESS_ACCOUNT": {
                    "description": "JOB_WITH_INVALID_BUSINESS_ACCOUNT",
                    "$ref": "#/components/examples/JOB_WITH_INVALID_BUSINESS_ACCOUNT"
                  },
                  "LOCATIONS_ASSOCIATED_WITH_JOBS_NOT_FOUND": {
                    "description": "LOCATIONS_ASSOCIATED_WITH_JOBS_NOT_FOUND",
                    "$ref": "#/components/examples/LOCATIONS_ASSOCIATED_WITH_JOBS_NOT_FOUND"
                  },
                  "GEO_LOCATION_NOT_ASSIGNED_TO_JOB": {
                    "description": "GEO_LOCATION_NOT_ASSIGNED_TO_JOB",
                    "$ref": "#/components/examples/GEO_LOCATION_NOT_ASSIGNED_TO_JOB"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "VEHICLE_NOT_AVAILABLE_FOR_TOUR_PLANNING": {
                    "description": "VEHICLE_NOT_AVAILABLE_FOR_TOUR_PLANNING",
                    "$ref": "#/components/examples/VEHICLE_NOT_AVAILABLE_FOR_TOUR_PLANNING"
                  },
                  "JOB_PRODUCT_NOT_ASSIGNED_TO_ORIGIN_LOCATION": {
                    "description": "JOB_PRODUCT_NOT_ASSIGNED_TO_ORIGIN_LOCATION",
                    "$ref": "#/components/examples/JOB_PRODUCT_NOT_ASSIGNED_TO_ORIGIN_LOCATION"
                  },
                  "ORIGIN_LOCATION_DOES_NOT_HAVE_ASSIGNED_PRODUCTS": {
                    "description": "ORIGIN_LOCATION_DOES_NOT_HAVE_ASSIGNED_PRODUCTS",
                    "$ref": "#/components/examples/ORIGIN_LOCATION_DOES_NOT_HAVE_ASSIGNED_PRODUCTS"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/matrix/calculation": {
      "post": {
        "tags": [
          "Matrix"
        ],
        "summary": "Async matrix calculation procedures according to the enclosed guidelines.",
        "description": "Initiates the async matrix calculation procedure, for all the locations of the requested depot.",
        "operationId": "calculateMatrixByDepotId",
        "parameters": [
          {
            "name": "depotId",
            "in": "query",
            "required": true,
            "schema": {
              "maxLength": 255,
              "minLength": 0,
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Operation",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": {
                    "message": "Forbidden",
                    "errorCode": "FORBIDDEN"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/matrix/calculation/failed-combinations": {
      "post": {
        "tags": [
          "Matrix"
        ],
        "summary": "Async matrix calculation procedures for previously failed combinations.",
        "description": "Initiates the async matrix calculation procedure, for all the previsously failed origin-destination combinations for a depot.\n",
        "operationId": "calculateMatrixForFailedCombinationsByDepotId",
        "parameters": [
          {
            "name": "depotId",
            "in": "query",
            "required": true,
            "schema": {
              "maxLength": 255,
              "minLength": 0,
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Operation",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": {
                    "message": "Forbidden",
                    "errorCode": "FORBIDDEN"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/contamination-rules/validation": {
      "post": {
        "tags": [
          "Contamination Rules"
        ],
        "summary": "Get virtual tour contamination rule violations",
        "description": "Validates the job sequence of a tour which is optimized but not yet persisted into database\nand returns all contamination rule violations\n#### If there are no contamination rule violations the list is empty",
        "operationId": "getContaminationRuleViolations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VirtualTourRuleRequestWrapper"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContaminationRuleResponseWrapper"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    }
                  ]
                },
                "examples": {
                  "INVALID_JOB_ORDER_SEQUENCE": {
                    "description": "INVALID_JOB_ORDER_SEQUENCE",
                    "$ref": "#/components/examples/INVALID_JOB_ORDER_SEQUENCE"
                  },
                  "DUPLICATE_JOB_UIDS": {
                    "description": "DUPLICATE_JOB_UIDS",
                    "$ref": "#/components/examples/DUPLICATE_JOB_UIDS"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    }
                  ]
                },
                "examples": {
                  "JOB_WITH_INVALID_LOCATION": {
                    "description": "JOB_WITH_INVALID_LOCATION",
                    "$ref": "#/components/examples/JOB_WITH_INVALID_LOCATION"
                  },
                  "JOB_WITH_INVALID_BUSINESS_ACCOUNT": {
                    "description": "JOB_WITH_INVALID_BUSINESS_ACCOUNT",
                    "$ref": "#/components/examples/JOB_WITH_INVALID_BUSINESS_ACCOUNT"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    }
                  ]
                },
                "examples": {
                  "INVALID_CONTAMINATION_RULE_TYPE": {
                    "description": "INVALID_CONTAMINATION_RULE_TYPE",
                    "$ref": "#/components/examples/INVALID_CONTAMINATION_RULE_TYPE"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/vehicles/names": {
      "get": {
        "tags": [
          "Fleet/Core Vehicle"
        ],
        "summary": "Get vehicle names by depot IDs",
        "description": "Retrieves a map of vehicle names and their associated VINs. If no depot IDs are provided, all vehicles are included.\n### If there are no matches or vehicles, Map is empty.",
        "operationId": "getVehicleNameToVINsMap",
        "parameters": [
          {
            "name": "depotIds",
            "in": "query",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "includeDeleted",
            "in": "query",
            "description": "Optional filter to also include soft-deleted vehicles in the search. Default value: false",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "example": {
                  "vehicleNameExampleValue": [
                    "vin1",
                    "vin2",
                    "vin3"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/vehicles/core": {
      "get": {
        "tags": [
          "Fleet/Core Vehicle"
        ],
        "summary": "Get all core vehicles",
        "description": "Return a list of all core vehicles.",
        "operationId": "getAllCoreVehicles",
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VehicleCoreWebResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/vehicles/core/vehicle-brands": {
      "get": {
        "tags": [
          "Fleet/Core Vehicle"
        ],
        "summary": "Get all core vehicle brands",
        "operationId": "getAllVehicleBrands",
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BrandResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/vehicles/core/vehicle-brands/{brandUuid}/image": {
      "get": {
        "tags": [
          "Fleet/Core Vehicle"
        ],
        "summary": "Get core vehicle brand image",
        "operationId": "getVehicleBrandImage",
        "parameters": [
          {
            "name": "brandUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/octet-stream": {}
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorMessageDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "IMAGE_NOT_FOUND": {
                    "description": "IMAGE_NOT_FOUND",
                    "$ref": "#/components/examples/IMAGE_NOT_FOUND"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "FAILED_TO_READ_IMAGE": {
                    "description": "FAILED_TO_READ_IMAGE",
                    "$ref": "#/components/examples/FAILED_TO_READ_IMAGE"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get current user info",
        "description": "Returns the information of the current user",
        "operationId": "getCurrentUserInfo",
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/tours/{tourUid}/details": {
      "get": {
        "tags": [
          "Fleet Tour"
        ],
        "summary": "Get fleet tour details based on the provided tour uid",
        "description": "Returns tour details which consist of tour contamination rule violations, fleet jobs, breaks and their business details.",
        "operationId": "getFleetTourDetailsByTourUid",
        "parameters": [
          {
            "name": "tourUid",
            "in": "path",
            "description": "Tour unique identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TourWebDetailsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "FLEET_TOUR_UID_NOT_FOUND": {
                    "description": "FLEET_TOUR_UID_NOT_FOUND",
                    "$ref": "#/components/examples/FLEET_TOUR_UID_NOT_FOUND"
                  },
                  "JOB_WITH_INVALID_BUSINESS_ACCOUNT": {
                    "description": "JOB_WITH_INVALID_BUSINESS_ACCOUNT",
                    "$ref": "#/components/examples/JOB_WITH_INVALID_BUSINESS_ACCOUNT"
                  },
                  "FLEET_VEHICLE_IDENTIFICATION_NUMBER_NOT_FOUND": {
                    "description": "FLEET_VEHICLE_IDENTIFICATION_NUMBER_NOT_FOUND",
                    "$ref": "#/components/examples/FLEET_VEHICLE_IDENTIFICATION_NUMBER_NOT_FOUND"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tours/search": {
      "get": {
        "tags": [
          "Fleet Tour"
        ],
        "summary": "Get fleet tours paginated based on criteria filters.",
        "description": "Searches for fleet tours based on provided criteria.\n#### If a criteria filter is not provided, it will not be used in the search.\n#### If multiple criteria filters are provided, the search will only return results that match all the provided criteria.\n#### If applied criteria has no match, page is empty.\n#### The sorting fields for tours are: tourUid, status, startDate, endDate, totalTime and notes.\n",
        "operationId": "getFleetToursByCriteriaFilterPaginated",
        "parameters": [
          {
            "name": "pageable",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          },
          {
            "name": "searchValue",
            "in": "query",
            "description": "Search value to match tour uid.",
            "required": false,
            "schema": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Optional set of statuses filter which fetches tours that match any of these statuses.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string",
                "description": "Defines all possible tour statuses",
                "enum": [
                  "PLANNED",
                  "ENROUTE",
                  "DELAYED",
                  "FAILED",
                  "INCOMPLETE",
                  "DONE"
                ]
              }
            }
          },
          {
            "name": "vehicleIdentificationNumbers",
            "in": "query",
            "description": "Optional set of vehicleIdentificationNumbers filter which fetches tours that match any of these vehicleIdentificationNumbers.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "depotId",
            "in": "query",
            "description": "Optional depot identifiers which fetches tours which contain jobs belonging to the specified depot.",
            "required": true,
            "schema": {
              "maxLength": 255,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "hasPenaltyRuleViolation",
            "in": "query",
            "description": "Indicates if the tour has at least one penalty rule violation",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Indicates if the tour has at least one penalty rule violation",
              "example": false
            },
            "example": false
          },
          {
            "name": "startDateFrom",
            "in": "query",
            "description": "Optional date filter which fetches tours that start from a specific time or after it.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2024-11-15T23:59:59"
          },
          {
            "name": "endDateTo",
            "in": "query",
            "description": "Optional date filter which fetches tours that end at this specific time or before it.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2024-11-15T23:59:59"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TourWebResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    }
                  ]
                },
                "examples": {
                  "END_DATETIME_IS_BEFORE_START_DATETIME": {
                    "description": "END_DATETIME_IS_BEFORE_START_DATETIME",
                    "$ref": "#/components/examples/END_DATETIME_IS_BEFORE_START_DATETIME"
                  },
                  "JOB_WITH_INVALID_BUSINESS_ACCOUNT": {
                    "description": "JOB_WITH_INVALID_BUSINESS_ACCOUNT",
                    "$ref": "#/components/examples/JOB_WITH_INVALID_BUSINESS_ACCOUNT"
                  },
                  "TOUR_WITH_INVALID_FLEET_VEHICLE": {
                    "description": "TOUR_WITH_INVALID_FLEET_VEHICLE",
                    "$ref": "#/components/examples/TOUR_WITH_INVALID_FLEET_VEHICLE"
                  },
                  "VEHICLES_CORE_NOT_FOUND": {
                    "description": "VEHICLES_CORE_NOT_FOUND",
                    "$ref": "#/components/examples/VEHICLES_CORE_NOT_FOUND"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/jobs": {
      "get": {
        "tags": [
          "Fleet Job"
        ],
        "summary": "Get all fleet jobs by depotId",
        "description": "Returns a list of all fleet jobs by depotId, along with their business details.\n### If there are no fleet jobs containing the provided depotId, List is empty.\n",
        "operationId": "getFleetJobsByDepotId",
        "parameters": [
          {
            "name": "depotId",
            "in": "query",
            "required": true,
            "schema": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobWebResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "JOB_WITH_INVALID_BUSINESS_ACCOUNT": {
                    "description": "JOB_WITH_INVALID_BUSINESS_ACCOUNT",
                    "$ref": "#/components/examples/JOB_WITH_INVALID_BUSINESS_ACCOUNT"
                  },
                  "LOCATIONS_ASSOCIATED_WITH_JOBS_NOT_FOUND": {
                    "description": "LOCATIONS_ASSOCIATED_WITH_JOBS_NOT_FOUND",
                    "$ref": "#/components/examples/LOCATIONS_ASSOCIATED_WITH_JOBS_NOT_FOUND"
                  }
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/jobs/search": {
      "get": {
        "tags": [
          "Fleet Job"
        ],
        "summary": "Get Jobs paginated based on criteria filters.",
        "description": " Searches for Jobs based on provided criteria.\n #### If a criteria filter is not provided, it will not be used in the search.\n #### If multiple criteria filters are provided, the search will only return results that match all of the provided criteria.\n #### Results are paginated based on the provided page number and page size.\n #### The page size determines how many records are returned per page.\n #### The sorting fields for jobs are: jobUid, businessAccountUid, originLocationUid, and destinationLocationUid.\n",
        "operationId": "getFleetJobsByCriteriaFiltersPaginated",
        "parameters": [
          {
            "name": "pageable",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          },
          {
            "name": "searchValue",
            "in": "query",
            "description": "Search value to match business account name, or job uid, or both.",
            "required": false,
            "schema": {
              "maxLength": 255,
              "minLength": 0,
              "type": "string"
            },
            "example": "LKnPKAYKvf"
          },
          {
            "name": "jobTypes",
            "in": "query",
            "description": "Job types",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "depotId",
            "in": "query",
            "description": "Depot identifier",
            "required": true,
            "schema": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            },
            "example": "AvO78iot3x"
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Job status to search by",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string",
                "description": "Defines all possible statuses of a Job",
                "enum": [
                  "TO_DO",
                  "PENDING",
                  "PLANNED",
                  "ENROUTE",
                  "DELIVERED",
                  "FAILED",
                  "RETURNED",
                  "CANCELLED"
                ]
              }
            }
          },
          {
            "name": "startDateTime",
            "in": "query",
            "description": "Start date for job search",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2024-11-15T23:59:59"
          },
          {
            "name": "endDateTime",
            "in": "query",
            "description": "End date for job search",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2024-11-15T23:59:59"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobWebResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    }
                  ]
                },
                "examples": {
                  "END_DATETIME_IS_BEFORE_START_DATETIME": {
                    "description": "END_DATETIME_IS_BEFORE_START_DATETIME",
                    "$ref": "#/components/examples/END_DATETIME_IS_BEFORE_START_DATETIME"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "JOB_WITH_INVALID_BUSINESS_ACCOUNT": {
                    "description": "JOB_WITH_INVALID_BUSINESS_ACCOUNT",
                    "$ref": "#/components/examples/JOB_WITH_INVALID_BUSINESS_ACCOUNT"
                  },
                  "LOCATIONS_ASSOCIATED_WITH_JOBS_NOT_FOUND": {
                    "description": "LOCATIONS_ASSOCIATED_WITH_JOBS_NOT_FOUND",
                    "$ref": "#/components/examples/LOCATIONS_ASSOCIATED_WITH_JOBS_NOT_FOUND"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/jobs/excluding": {
      "get": {
        "tags": [
          "Fleet Job"
        ],
        "summary": "Get all fleet jobs while excluding specific of them",
        "description": "Returns a list of all fleet jobs, along with their business details. If there are no jobs, list is empty.",
        "operationId": "getFleetJobsExcludedBySpecificJobs",
        "parameters": [
          {
            "name": "jobUids",
            "in": "query",
            "description": "Job UIDs which will be excluded",
            "required": true,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": "LKnPKAYKvf"
          },
          {
            "name": "depotId",
            "in": "query",
            "description": "Depot identifier",
            "required": true,
            "schema": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            },
            "example": "AvO78iot3x"
          },
          {
            "name": "status",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Defines all possible statuses of a Job",
              "enum": [
                "TO_DO",
                "PENDING",
                "PLANNED",
                "ENROUTE",
                "DELIVERED",
                "FAILED",
                "RETURNED",
                "CANCELLED"
              ]
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date for job search",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2024-11-15"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date for jobs search",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2024-11-15"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobPoolWebResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    }
                  ]
                },
                "examples": {
                  "END_DATE_IS_BEFORE_START_DATE": {
                    "description": "END_DATE_IS_BEFORE_START_DATE",
                    "$ref": "#/components/examples/END_DATE_IS_BEFORE_START_DATE"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "JOB_WITH_INVALID_BUSINESS_ACCOUNT": {
                    "description": "JOB_WITH_INVALID_BUSINESS_ACCOUNT",
                    "$ref": "#/components/examples/JOB_WITH_INVALID_BUSINESS_ACCOUNT"
                  },
                  "LOCATIONS_ASSOCIATED_WITH_JOBS_NOT_FOUND": {
                    "description": "LOCATIONS_ASSOCIATED_WITH_JOBS_NOT_FOUND",
                    "$ref": "#/components/examples/LOCATIONS_ASSOCIATED_WITH_JOBS_NOT_FOUND"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/dashboard/tours": {
      "get": {
        "tags": [
          "Dashboard Fleet Tour"
        ],
        "summary": "Get tours dashboard paginated.",
        "description": "Searches for fleet tours based on provided criteria.\n#### If a criteria filter is not provided, it will not be used in the search.\n#### If multiple criteria filters are provided, the search will only return results that match all the provided criteria.\n#### Ability to provide one or more depot IDs.\n#### If applied criteria has no match, page is empty.\n#### The sorting fields for tours are: tourUid, status, startDate, endDate, totalTime and notes.\n",
        "operationId": "getTourDashboard",
        "parameters": [
          {
            "name": "pageable",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          },
          {
            "name": "searchValue",
            "in": "query",
            "description": "Search value to match tour uid.",
            "required": false,
            "schema": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Optional set of statuses filter which fetches tours that match any of these statuses.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string",
                "description": "Defines all possible tour statuses",
                "enum": [
                  "PLANNED",
                  "ENROUTE",
                  "DELAYED",
                  "FAILED",
                  "INCOMPLETE",
                  "DONE"
                ]
              }
            }
          },
          {
            "name": "vehicleIdentificationNumbers",
            "in": "query",
            "description": "Optional set of vehicleIdentificationNumbers filter which fetches tours that match any of these vehicleIdentificationNumbers.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "depotIds",
            "in": "query",
            "description": "Optional set of depot identifiers which fetches tours which contain jobs belonging to the specified depot.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "startDateFrom",
            "in": "query",
            "description": "Optional date filter which fetches tours that start from a specific time or after it.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2024-11-15T23:59:59"
          },
          {
            "name": "endDateTo",
            "in": "query",
            "description": "Optional date filter which fetches tours that end at this specific time or before it.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2024-11-15T23:59:59"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TourDashboardWebResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    }
                  ]
                },
                "examples": {
                  "END_DATETIME_IS_BEFORE_START_DATETIME": {
                    "description": "END_DATETIME_IS_BEFORE_START_DATETIME",
                    "$ref": "#/components/examples/END_DATETIME_IS_BEFORE_START_DATETIME"
                  },
                  "JOB_WITH_INVALID_BUSINESS_ACCOUNT": {
                    "description": "JOB_WITH_INVALID_BUSINESS_ACCOUNT",
                    "$ref": "#/components/examples/JOB_WITH_INVALID_BUSINESS_ACCOUNT"
                  },
                  "TOUR_WITH_INVALID_FLEET_VEHICLE": {
                    "description": "TOUR_WITH_INVALID_FLEET_VEHICLE",
                    "$ref": "#/components/examples/TOUR_WITH_INVALID_FLEET_VEHICLE"
                  },
                  "VEHICLES_CORE_NOT_FOUND": {
                    "description": "VEHICLES_CORE_NOT_FOUND",
                    "$ref": "#/components/examples/VEHICLES_CORE_NOT_FOUND"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/business-accounts": {
      "get": {
        "tags": [
          "Business Accounts"
        ],
        "summary": "Get all business accounts by depotId",
        "description": "Get all business accounts alongside location information by depotId.### If there are no business accounts containing the provided depotId, List is empty.",
        "operationId": "getBusinessAccountsByDepotId",
        "parameters": [
          {
            "name": "depotId",
            "in": "query",
            "description": "Business account depot identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "AvO78iot3x"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BusinessAccountWebResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "deprecated": true
      }
    },
    "/business-accounts/{businessAccountUid}": {
      "get": {
        "tags": [
          "Business Accounts"
        ],
        "summary": "Get business account by uid",
        "description": "Fetches the business account detailed information by uid. This information includes business account location and recent job details.",
        "operationId": "getBusinessAccountDetails",
        "parameters": [
          {
            "name": "businessAccountUid",
            "in": "path",
            "description": "Business account identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessAccountDetailsWebResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageDto"
                },
                "examples": {
                  "BUSINESS_ACCOUNT_NOT_FOUND": {
                    "description": "BUSINESS_ACCOUNT_NOT_FOUND",
                    "$ref": "#/components/examples/BUSINESS_ACCOUNT_NOT_FOUND"
                  },
                  "FLEET_JOB_WITH_INVALID_PRODUCT": {
                    "description": "FLEET_JOB_WITH_INVALID_PRODUCT",
                    "$ref": "#/components/examples/FLEET_JOB_WITH_INVALID_PRODUCT"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/business-accounts/search": {
      "get": {
        "tags": [
          "Business Accounts"
        ],
        "summary": "Get business accounts based on criteria filters.",
        "description": "Searches for business accounts based on provided criteria.\n#### If a criteria filter is not provided, it will not be used in the search.\n#### If multiple criteria filters are provided, the search will only return results that match all the provided criteria.\n#### If applied criteria has no match, page is empty.\n#### The sorting fields for business accounts are: uid and companyName.\n",
        "operationId": "getBusinessAccountsByCriteriaFilterPaginated",
        "parameters": [
          {
            "name": "pageable",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          },
          {
            "name": "depotId",
            "in": "query",
            "description": "Depot identifier",
            "required": true,
            "schema": {
              "maxLength": 255,
              "minLength": 0,
              "type": "string"
            },
            "example": "AvO78iot3x"
          },
          {
            "name": "searchValue",
            "in": "query",
            "description": "Search value to match business account uid or company name or accountTypeId.",
            "required": false,
            "schema": {
              "maxLength": 255,
              "minLength": 0,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BusinessAccountPaginatedResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ValidationErrorMessageDto"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorMessageDto"
                    }
                  ]
                },
                "examples": {
                  "INVALID_BUSINESS_ACCOUNT_TYPE": {
                    "description": "INVALID_BUSINESS_ACCOUNT_TYPE",
                    "$ref": "#/components/examples/INVALID_BUSINESS_ACCOUNT_TYPE"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/business-accounts/plants": {
      "get": {
        "tags": [
          "Business Accounts"
        ],
        "summary": "Get plant depot information",
        "description": "Fetches all plant business accounts, extracts depot id\nand the first non-null location geo coordinate of each account\n### If there are no plant business accounts, List is empty.",
        "operationId": "getPlantDepots",
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BusinessAccountDepotWebResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ValidationError": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "description": "Affected field"
          },
          "message": {
            "type": "string",
            "description": "Validation message"
          }
        },
        "description": "List of validation errors"
      },
      "ValidationErrorMessageDto": {
        "required": [
          "errorCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "The error message",
            "example": "Example error message"
          },
          "errorCode": {
            "type": "string",
            "description": "The error code",
            "example": "EXAMPLE_ERROR_CODE"
          },
          "validationErrors": {
            "type": "array",
            "description": "List of validation errors",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "ErrorMessageDto": {
        "required": [
          "errorCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "The error message",
            "example": "Example error message"
          },
          "errorCode": {
            "type": "string",
            "description": "The error code",
            "example": "EXAMPLE_ERROR_CODE"
          }
        }
      },
      "FleetVehicleWebUpdateRequest": {
        "required": [
          "depotId",
          "name",
          "status",
          "vehicleCoreUuid"
        ],
        "type": "object",
        "properties": {
          "vehicleCoreUuid": {
            "type": "string",
            "description": "It's the vehicle UUID which is related to svc-vehicle-core microservice.",
            "format": "uuid",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "name": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "It's the name of the Vehicle.",
            "example": "HKN"
          },
          "depotId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Indicates the identification number of the depot in which the vehicle is stored.",
            "example": "12345"
          },
          "licensePlateNumber": {
            "maxLength": 15,
            "minLength": 0,
            "type": "string",
            "description": "A numeric or alphanumeric id that uniquely identifies the vehicle within the issuing region's vehicle register.",
            "example": "EF87867"
          },
          "status": {
            "type": "string",
            "description": "Its the status of the vehicle.",
            "example": "AVAILABLE",
            "enum": [
              "AVAILABLE",
              "PLANNED",
              "ENROUTE",
              "OUT_OF_ORDER"
            ]
          }
        },
        "description": "Defines the update request of a fleet vehicle"
      },
      "RegularHours": {
        "required": [
          "period_begin",
          "period_end",
          "weekday"
        ],
        "type": "object",
        "properties": {
          "weekday": {
            "type": "string",
            "description": "Day of week",
            "enum": [
              "MONDAY",
              "TUESDAY",
              "WEDNESDAY",
              "THURSDAY",
              "FRIDAY",
              "SATURDAY",
              "SUNDAY"
            ]
          },
          "period_begin": {
            "maxLength": 5,
            "minLength": 0,
            "pattern": "([0-1][0-9]|2[0-3]):[0-5][0-9]",
            "type": "string",
            "description": "Begin of the regular period, in local time, given in hours and minutes. Must be in 24h format with leading zeros. Example: \"18:15\". Hour/Minute separator: \":\" Regex: ([0-1][0-9]|2[0-3]):[0-5][0-9].",
            "example": "07:00"
          },
          "period_end": {
            "maxLength": 5,
            "minLength": 0,
            "pattern": "([0-1][0-9]|2[0-3]):[0-5][0-9]",
            "type": "string",
            "description": "End of the regular period, in local time, syntax as for period_begin. Must be later than period_begin.",
            "example": "18:00"
          }
        },
        "description": "Regular recurring operation or access hours."
      },
      "RegularWorkingHours": {
        "required": [
          "regular_hours"
        ],
        "type": "object",
        "properties": {
          "regular_hours": {
            "type": "array",
            "description": "Regular hours, weekday-based.",
            "items": {
              "$ref": "#/components/schemas/RegularHours"
            }
          }
        },
        "description": "Standard opening and access working hours."
      },
      "ExceptionalPeriod": {
        "type": "object",
        "properties": {
          "period_begin": {
            "type": "string",
            "description": "Begin of the exception. SecurityScheme.In UTC, time_zone field can be used to convert to local time.",
            "example": "2024-11-15T23:59:59"
          },
          "period_end": {
            "type": "string",
            "description": "End of the exception. In UTC, time_zone field can be used to convert to local time.",
            "example": "2024-11-15T23:59:59"
          }
        },
        "description": "Specifies one exceptional period for opening or access hours."
      },
      "ExceptionalWorkingHours": {
        "type": "object",
        "properties": {
          "exceptional_openings": {
            "type": "array",
            "description": "Exceptions for specified calendar dates, time-range based. Periods of exceptional accessibility. Additional to regular_hours. May overlap regular rules.",
            "items": {
              "$ref": "#/components/schemas/ExceptionalPeriod"
            }
          },
          "exceptional_closings": {
            "type": "array",
            "description": "Exceptions for specified calendar dates, time-range based. Periods of exceptional inaccessibility. Overwriting regular_hours and exceptional_openings. Should not overlap exceptional_openings.",
            "items": {
              "$ref": "#/components/schemas/ExceptionalPeriod"
            }
          }
        },
        "description": "Exceptional opening and closing working hours."
      },
      "TourIdentifier": {
        "required": [
          "tourUid"
        ],
        "type": "object",
        "properties": {
          "tourUid": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Tour unique identifier",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          }
        },
        "description": "Object containing the unique identifier of the requested/modified tour."
      },
      "FleetTourJobWebRequest": {
        "required": [
          "endDate",
          "jobUid",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "jobUid": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Job unique identifier",
            "example": "08a8c5d2f13b9100"
          },
          "startDate": {
            "type": "string",
            "description": "Start date of this job",
            "example": "2024-11-15T23:59:59"
          },
          "endDate": {
            "type": "string",
            "description": "End date of this job",
            "example": "2024-11-15T23:59:59"
          }
        },
        "description": "Defines the orchestrator job request of a fleet tour"
      },
      "FleetTourWebUpdateRequest": {
        "required": [
          "endDate",
          "jobs",
          "polyline",
          "startDate",
          "totalDistance",
          "totalTime",
          "transitions"
        ],
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "description": "Start date of this tour",
            "example": "2024-11-15T23:59:59"
          },
          "endDate": {
            "type": "string",
            "description": "End date of this tour",
            "example": "2024-11-15T23:59:59"
          },
          "jobs": {
            "type": "array",
            "description": "Defines fleet tour job information",
            "items": {
              "$ref": "#/components/schemas/FleetTourJobWebRequest"
            }
          },
          "vehicleBreak": {
            "$ref": "#/components/schemas/VehicleBreakRequest"
          },
          "totalTime": {
            "type": "integer",
            "description": "Total tour duration time in seconds",
            "format": "int64",
            "example": 155
          },
          "totalDistance": {
            "type": "number",
            "description": "Total tour distance",
            "format": "double",
            "example": 500.9
          },
          "polyline": {
            "$ref": "#/components/schemas/Polyline"
          },
          "transitions": {
            "type": "array",
            "description": "Tour transition details",
            "items": {
              "$ref": "#/components/schemas/Transition"
            }
          },
          "notes": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Optional notes for the tour.",
            "example": "Recently updated tour"
          }
        },
        "description": "Defines the update request of a fleet tour"
      },
      "Polyline": {
        "required": [
          "points"
        ],
        "type": "object",
        "properties": {
          "points": {
            "type": "string",
            "description": "Multiple points of geo coordinates, encoded into a String"
          }
        },
        "description": "Tour polyline to be displayed on map"
      },
      "Transition": {
        "required": [
          "distance",
          "endDate",
          "startDate",
          "vehicleIsEmpty"
        ],
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "description": "Transition start date time",
            "example": "2024-11-15T23:59:59"
          },
          "endDate": {
            "type": "string",
            "description": "Transition end date time",
            "example": "2024-11-15T23:59:59"
          },
          "distance": {
            "type": "number",
            "description": "Transition distance in meters",
            "format": "double",
            "example": 125.9
          },
          "waitDuration": {
            "type": "integer",
            "description": "Transition wait duration in seconds",
            "format": "int32",
            "example": 120
          },
          "vehicleIsEmpty": {
            "type": "boolean",
            "description": "Defines if the vehicle is empty during transition",
            "example": false
          }
        },
        "description": "Defines tour transition details.A transition during a tour occurs when a vehicle moves between locations to load and/or unload product(s)."
      },
      "VehicleBreakRequest": {
        "required": [
          "endDateTime",
          "startDateTime"
        ],
        "type": "object",
        "properties": {
          "startDateTime": {
            "type": "string",
            "description": "Vehicle start date time",
            "example": "2024-11-15T23:59:59"
          },
          "endDateTime": {
            "type": "string",
            "description": "Vehicle end date time",
            "example": "2024-11-15T23:59:59"
          },
          "jobUid": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Job identifier of the job which is before/after the break"
          }
        },
        "description": "Vehicle break request inside of a tour"
      },
      "ContaminationRuleJobResponse": {
        "required": [
          "firstJobUid",
          "offendingJobUid"
        ],
        "type": "object",
        "properties": {
          "firstJobUid": {
            "maxLength": 50,
            "type": "string",
            "description": "First job identifier",
            "example": "AvO78iot3x"
          },
          "offendingJobUid": {
            "maxLength": 50,
            "type": "string",
            "description": "Offending job identifier",
            "example": "LKnPKAYKvf"
          },
          "uidOfJobInDatabaseTour": {
            "maxLength": 50,
            "type": "string",
            "description": "Identifier of the job which is in a database tour",
            "example": "AvO78iot3x"
          }
        },
        "description": "Specifies the contamination rule by identifying the two jobs between which the rule applies."
      },
      "FleetProductResponse": {
        "required": [
          "name",
          "quantity",
          "uid"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "maxLength": 50,
            "type": "string",
            "description": "Product identifier",
            "example": "AvO78iot3x"
          },
          "name": {
            "maxLength": 255,
            "type": "string",
            "description": "Product name",
            "example": "Organic Fertilizer"
          },
          "risk": {
            "maxLength": 20,
            "type": "string",
            "description": "Product risk",
            "example": "High"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity of the transferred product",
            "format": "double",
            "example": 10.5
          }
        },
        "description": "Defines the details of a product"
      },
      "GeoLocation": {
        "type": "object",
        "properties": {
          "latitude": {
            "type": "string",
            "description": "Latitude of the point in decimal degree. More decimal digits increase precision. Decimal separator: '.'",
            "example": "50.770774"
          },
          "longitude": {
            "type": "string",
            "description": "Longitude of the point in decimal degree.More decimal digits increase precision.Decimal separator: '.'",
            "example": "-126.104965"
          }
        },
        "description": "Defines the coordinates of a geolocation. The geodetic system to be used is WGS 84."
      },
      "OptimizeTourWebResponse": {
        "required": [
          "polyline",
          "productQuantities",
          "routeJobDetails",
          "totalDistance",
          "totalTime",
          "vehicleBreak",
          "vehicleIdentificationNumber"
        ],
        "type": "object",
        "properties": {
          "vehicleName": {
            "type": "string",
            "description": "It's the name of the Vehicle.",
            "example": "HKN"
          },
          "vehicleIdentificationNumber": {
            "maxLength": 30,
            "type": "string",
            "description": "Defines the vehicle identification number (VIN).",
            "example": "4Y1SL65848Z411444"
          },
          "startDate": {
            "type": "string",
            "description": "Start date of this tour",
            "example": "2024-11-15T23:59:59"
          },
          "endDate": {
            "type": "string",
            "description": "End date of this tour",
            "example": "2024-11-15T23:59:59"
          },
          "violatingTimeWindow": {
            "type": "boolean",
            "description": "Indicates whether any planned times for tour jobs are outside their specified time windows (pick-up or drop-off times).\nIf NULL, this means the violations could not be determined."
          },
          "totalTime": {
            "type": "integer",
            "description": "Total tour duration time in seconds",
            "format": "int64",
            "example": 155
          },
          "totalDistance": {
            "type": "number",
            "description": "Total tour distance in meters",
            "format": "double",
            "example": 500.9
          },
          "totalJobs": {
            "type": "integer",
            "description": "Total Jobs (count)",
            "format": "int32",
            "example": 6
          },
          "routeJobDetails": {
            "type": "array",
            "description": "List with details for all tours ",
            "items": {
              "$ref": "#/components/schemas/RouteJobWebResponse"
            }
          },
          "vehicleBreak": {
            "$ref": "#/components/schemas/VehicleBreak"
          },
          "productQuantities": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "description": "Summary of all associated tour products. Contains information about their names, and their total quantity transferred.",
              "format": "double"
            },
            "description": "Summary of all associated tour products. Contains information about their names, and their total quantity transferred."
          },
          "polyline": {
            "$ref": "#/components/schemas/Polyline"
          },
          "contaminationRuleViolations": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "description": "Contamination rule violations",
              "items": {
                "$ref": "#/components/schemas/ContaminationRuleJobResponse"
              }
            },
            "description": "Contamination rule violations"
          },
          "transitionMetrics": {
            "$ref": "#/components/schemas/TransitionMetricsWebResponse"
          }
        },
        "description": "Optimized route to be confirmed."
      },
      "OptimizeTourWebResponseWrapper": {
        "type": "object",
        "properties": {
          "optimizedTour": {
            "$ref": "#/components/schemas/OptimizeTourWebResponse"
          },
          "skippedJobs": {
            "uniqueItems": true,
            "type": "array",
            "description": "List of unperformed tour jobs.",
            "items": {
              "$ref": "#/components/schemas/SkippedJobWeb"
            }
          }
        },
        "description": "Wrapper containing the optimized tour and a list of all jobs which were skipped"
      },
      "Reasons": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Refers to the skipped error code."
          }
        },
        "description": "A list of reasons that explain why the job was skipped."
      },
      "RouteJobWebResponse": {
        "required": [
          "businessAccountUid",
          "jobType",
          "jobUid",
          "jobVisitOrder"
        ],
        "type": "object",
        "properties": {
          "jobUid": {
            "maxLength": 50,
            "type": "string",
            "description": "Job identifier",
            "example": "08a8c5d2f13b9100"
          },
          "depotId": {
            "maxLength": 50,
            "type": "string",
            "description": "Depot identifier",
            "example": "AvO78iot3x"
          },
          "businessAccountUid": {
            "maxLength": 50,
            "type": "string",
            "description": "Supplier identifier",
            "example": "LKnPKAYKvf"
          },
          "companyName": {
            "maxLength": 255,
            "type": "string",
            "description": "Supplier name",
            "example": "P3"
          },
          "jobType": {
            "maxLength": 30,
            "type": "string",
            "description": "Job type name",
            "example": "INBOUND"
          },
          "jobVisitOrder": {
            "type": "integer",
            "description": "Defines the job order",
            "format": "int32",
            "example": 5
          },
          "startDate": {
            "type": "string",
            "description": "Start date of this job",
            "example": "2024-11-15T23:59:59"
          },
          "endDate": {
            "type": "string",
            "description": "End date of this job",
            "example": "2024-11-15T23:59:59"
          },
          "totalTime": {
            "type": "integer",
            "description": "Total job duration time of this",
            "format": "int64"
          },
          "product": {
            "$ref": "#/components/schemas/FleetProductResponse"
          },
          "destination": {
            "$ref": "#/components/schemas/RoutePointDetailed"
          },
          "origin": {
            "$ref": "#/components/schemas/RoutePointDetailed"
          },
          "datePickUpFrom": {
            "type": "string",
            "description": "Earliest date this job can be picked up",
            "example": "2024-11-15T23:59:59"
          },
          "datePickUpTill": {
            "type": "string",
            "description": "Latest date this job can be picked up",
            "example": "2024-11-15T23:59:59"
          },
          "dateDropOffFrom": {
            "type": "string",
            "description": "Earliest date this job can be dropped off",
            "example": "2024-11-15T23:59:59"
          },
          "dateDropOffTill": {
            "type": "string",
            "description": "Latest date this job can be dropped off",
            "example": "2024-11-15T23:59:59"
          }
        },
        "description": "List with details for all tours "
      },
      "RoutePointDetailed": {
        "required": [
          "accountLocationUid",
          "geoLocation",
          "locationAddressType",
          "locationRisk",
          "locationType"
        ],
        "type": "object",
        "properties": {
          "accountLocationUid": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Identifier of the business account's location",
            "example": "AvO78iot3x"
          },
          "street": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Street of the route point",
            "example": "Main street"
          },
          "city": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "City of the route point",
            "example": "Munich"
          },
          "zipCode": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Zip code.",
            "example": "20535"
          },
          "geoLocation": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "locationAddressType": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Location address type information",
            "example": "Raw Tank"
          },
          "locationType": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Location type information",
            "example": "Cow"
          },
          "locationRisk": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Location risk information",
            "example": "High"
          },
          "processTime": {
            "minimum": 0,
            "type": "integer",
            "description": "Maximum process time allowed on a location in seconds",
            "format": "int64",
            "example": 600
          }
        },
        "description": "Defines the origin/destination job details."
      },
      "SkippedJobWeb": {
        "type": "object",
        "properties": {
          "jobUid": {
            "type": "string",
            "description": "Job unique identifier."
          },
          "reasons": {
            "type": "array",
            "description": "A list of reasons that explain why the job was skipped.",
            "items": {
              "$ref": "#/components/schemas/Reasons"
            }
          }
        },
        "description": "Specifies the details of a skipped job during tour optimization."
      },
      "TransitionMetricsWebResponse": {
        "required": [
          "emptyRunsTotalDistanceMeters",
          "emptyRunsTotalDurationSeconds",
          "emptyRunsTotalNumber",
          "transitions"
        ],
        "type": "object",
        "properties": {
          "emptyRunsTotalNumber": {
            "minimum": 0,
            "type": "integer",
            "description": "Total number of Empty Run transitions.",
            "format": "int32",
            "example": 2
          },
          "emptyRunsTotalDurationSeconds": {
            "minimum": 0,
            "type": "integer",
            "description": "Total duration of all Empty Runs (in seconds).",
            "format": "int64",
            "example": 3600
          },
          "emptyRunsTotalDistanceMeters": {
            "minimum": 0,
            "type": "number",
            "description": "The total distance covered by all Empty Runs (in meters).",
            "format": "double",
            "example": 80000.5
          },
          "transitions": {
            "type": "array",
            "description": "Contains detailed information of all transactions (both empty runs and not).",
            "items": {
              "$ref": "#/components/schemas/TransitionWebResponse"
            }
          }
        },
        "description": "Represents the metrics response containing all transaction details, both for empty runs and not."
      },
      "TransitionWebResponse": {
        "required": [
          "distance",
          "endDate",
          "startDate",
          "vehicleIsEmpty"
        ],
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "description": "Transition start date time",
            "example": "2024-11-15T23:59:59"
          },
          "estimatedStartDate": {
            "type": "string",
            "description": "Estimated transition start date time (present only when vehicle is empty).",
            "example": "2024-11-15T23:59:59"
          },
          "endDate": {
            "type": "string",
            "description": "Transition end date time",
            "example": "2024-11-15T23:59:59"
          },
          "estimatedEndDate": {
            "type": "string",
            "description": "Estimated transition end date time (present only when vehicle is empty).",
            "example": "2024-11-15T23:59:59"
          },
          "distance": {
            "type": "number",
            "description": "Transition distance in meters",
            "format": "double",
            "example": 125.9
          },
          "waitDuration": {
            "type": "integer",
            "description": "Transition wait duration in seconds",
            "format": "int32",
            "example": 120
          },
          "vehicleIsEmpty": {
            "type": "boolean",
            "description": "Defines if the vehicle is empty during transition",
            "example": false
          }
        },
        "description": "Defines tour transition details.A transition during a tour occurs when a vehicle moves between locations to load and/or unload product(s)."
      },
      "VehicleBreak": {
        "required": [
          "endDateTime",
          "jobUid",
          "startDateTime"
        ],
        "type": "object",
        "properties": {
          "startDateTime": {
            "type": "string",
            "description": "Vehicle start date time",
            "example": "2024-11-15T23:59:59"
          },
          "endDateTime": {
            "type": "string",
            "description": "Vehicle end date time",
            "example": "2024-11-15T23:59:59"
          },
          "jobUid": {
            "maxLength": 50,
            "type": "string",
            "description": "Job identifier of the job which is before the break"
          }
        },
        "description": "Vehicle break inside of a tour"
      },
      "OptimizeTourWebUpdateRequest": {
        "required": [
          "jobUids"
        ],
        "type": "object",
        "properties": {
          "jobUids": {
            "uniqueItems": true,
            "type": "array",
            "description": "The Job UIDs.",
            "items": {
              "type": "string",
              "description": "The Job UIDs."
            }
          }
        },
        "description": "Tour optimize update request"
      },
      "PrecedenceJobOrchestratorRequest": {
        "required": [
          "jobPrecedence",
          "jobUID"
        ],
        "type": "object",
        "properties": {
          "jobUID": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Job unique identifier"
          },
          "jobPrecedence": {
            "minimum": 0,
            "type": "integer",
            "description": "Job precedence sequence. Counting starts from 0 and increases by 1.",
            "format": "int32",
            "example": 0
          }
        },
        "description": "Job precedence optimization request, containing job UID along with the requested job precedence sequence"
      },
      "PrecedenceTourWebUpdateRequest": {
        "required": [
          "jobs"
        ],
        "type": "object",
        "properties": {
          "jobs": {
            "type": "array",
            "description": "List of unique job UIDs and their precedence sequence",
            "items": {
              "$ref": "#/components/schemas/PrecedenceJobOrchestratorRequest"
            }
          }
        },
        "description": "Tour precedence optimize request for updating a tour based on job precedence sequence."
      },
      "FleetVehicleWebCreateRequest": {
        "required": [
          "depotId",
          "name",
          "status",
          "vehicleCoreUuid",
          "vehicleIdentificationNumber",
          "workingHours"
        ],
        "type": "object",
        "properties": {
          "vehicleCoreUuid": {
            "type": "string",
            "description": "It's the vehicle UUID which is related to svc-vehicle-core microservice.",
            "format": "uuid",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "name": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "It's the name of the Vehicle.",
            "example": "HKN"
          },
          "depotId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Indicates the identification number of the depot in which the vehicle is stored.",
            "example": "12345"
          },
          "vehicleIdentificationNumber": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "Identifies the vehicle identification number (VIN) of the vehicle.",
            "example": "4Y1SL65848Z411444"
          },
          "licensePlateNumber": {
            "maxLength": 15,
            "minLength": 0,
            "type": "string",
            "description": "A numeric or alphanumeric id that uniquely identifies the vehicle within the issuing region's vehicle register.",
            "example": "EF87867"
          },
          "status": {
            "type": "string",
            "description": "Its the status of the vehicle.",
            "example": "AVAILABLE",
            "enum": [
              "AVAILABLE",
              "PLANNED",
              "ENROUTE",
              "OUT_OF_ORDER"
            ]
          },
          "workingHours": {
            "$ref": "#/components/schemas/Hours"
          }
        },
        "description": "Defines the create request of a fleet vehicle"
      },
      "Hours": {
        "required": [
          "twentyfourseven"
        ],
        "type": "object",
        "properties": {
          "twentyfourseven": {
            "type": "boolean",
            "description": "True to represent 24 hours a day and 7 days a week, except the given exceptions.",
            "example": false
          },
          "regular_hours": {
            "type": "array",
            "description": "Regular hours, weekday-based. Only to be used if twentyfourseven=false, then this field needs to contain at least one RegularHours object.",
            "items": {
              "$ref": "#/components/schemas/RegularHours"
            }
          },
          "exceptional_openings": {
            "type": "array",
            "description": "Exceptions for specified calendar dates, time-range based. Periods of exceptional accessibility. Additional to regular_hours. May overlap regular rules.",
            "items": {
              "$ref": "#/components/schemas/ExceptionalPeriod"
            }
          },
          "exceptional_closings": {
            "type": "array",
            "description": "Exceptions for specified calendar dates, time-range based. Periods of exceptional inaccessibility. Overwriting regular_hours and exceptional_openings. Should not overlap exceptional_openings.",
            "items": {
              "$ref": "#/components/schemas/ExceptionalPeriod"
            }
          }
        },
        "description": "Opening and access hours."
      },
      "FleetTourWebCreateRequest": {
        "required": [
          "endDate",
          "jobs",
          "polyline",
          "startDate",
          "totalDistance",
          "totalTime",
          "transitions",
          "vehicleIdentificationNumber"
        ],
        "type": "object",
        "properties": {
          "vehicleIdentificationNumber": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "Identifies the identification number (VIN) of the vehicle.",
            "example": "4Y1SL65848Z411444"
          },
          "startDate": {
            "type": "string",
            "description": "Start date of this tour",
            "example": "2024-11-15T23:59:59"
          },
          "endDate": {
            "type": "string",
            "description": "End date of this tour",
            "example": "2024-11-15T23:59:59"
          },
          "jobs": {
            "type": "array",
            "description": "Defines fleet tour job information",
            "items": {
              "$ref": "#/components/schemas/FleetTourJobWebRequest"
            }
          },
          "vehicleBreak": {
            "$ref": "#/components/schemas/VehicleBreakRequest"
          },
          "totalTime": {
            "type": "integer",
            "description": "Total tour duration time in seconds",
            "format": "int64",
            "example": 155
          },
          "totalDistance": {
            "type": "number",
            "description": "Total tour distance",
            "format": "double",
            "example": 500.9
          },
          "polyline": {
            "$ref": "#/components/schemas/Polyline"
          },
          "transitions": {
            "type": "array",
            "description": "Tour transition details",
            "items": {
              "$ref": "#/components/schemas/Transition"
            }
          }
        },
        "description": "Defines the create request of a fleet tour"
      },
      "OptimizeTourWebCreateResponseWrapper": {
        "type": "object",
        "properties": {
          "tours": {
            "type": "array",
            "description": "List of optimized tours",
            "items": {
              "$ref": "#/components/schemas/OptimizeTourWebResponse"
            }
          },
          "skippedJobs": {
            "uniqueItems": true,
            "type": "array",
            "description": "List of unperformed tour jobs.",
            "items": {
              "$ref": "#/components/schemas/SkippedJobWeb"
            }
          }
        },
        "description": "Wrapper containing the optimized tours and a list of all jobs which were skipped"
      },
      "OptimizeTourOrchestratorCreateRequest": {
        "required": [
          "endRouteTime",
          "jobUids",
          "startRouteTime",
          "vehicleIdentificationNumbers"
        ],
        "type": "object",
        "properties": {
          "startRouteTime": {
            "type": "string",
            "description": "The start route date time.",
            "example": "2024-11-15T23:59:59"
          },
          "endRouteTime": {
            "type": "string",
            "description": "The end route date time.",
            "example": "2024-11-15T23:59:59"
          },
          "vehicleIdentificationNumbers": {
            "uniqueItems": true,
            "type": "array",
            "description": "Vehicle identification numbers of the vehicles.",
            "items": {
              "type": "string",
              "description": "Vehicle identification numbers of the vehicles."
            }
          },
          "jobUids": {
            "uniqueItems": true,
            "type": "array",
            "description": "The Job UIDs.",
            "items": {
              "type": "string",
              "description": "The Job UIDs."
            }
          }
        },
        "description": "Tour(s) optimization create request(s)"
      },
      "PrecedenceTourRuleWrapper": {
        "type": "object",
        "properties": {
          "previousVirtualTourRuleRequests": {
            "type": "array",
            "description": "Previous virtual tour rule requests",
            "items": {
              "$ref": "#/components/schemas/VirtualTourRuleRequest"
            }
          },
          "nextVirtualTourRuleRequests": {
            "type": "array",
            "description": "Next virtual tour rule requests",
            "items": {
              "$ref": "#/components/schemas/VirtualTourRuleRequest"
            }
          }
        },
        "description": "Precedence tour contamination rules wrapper."
      },
      "PrecedenceTourWebCreateRequest": {
        "required": [
          "endRouteTime",
          "jobs",
          "startRouteTime",
          "vehicleIdentificationNumber"
        ],
        "type": "object",
        "properties": {
          "startRouteTime": {
            "type": "string",
            "description": "The start route date time.",
            "example": "2024-11-15T23:59:59"
          },
          "endRouteTime": {
            "type": "string",
            "description": "The end route date time.",
            "example": "2024-11-15T23:59:59"
          },
          "vehicleIdentificationNumber": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "Vehicle's identification number."
          },
          "jobs": {
            "type": "array",
            "description": "List of unique job UIDs and their precedence sequence",
            "items": {
              "$ref": "#/components/schemas/PrecedenceJobOrchestratorRequest"
            }
          },
          "precedenceTourRuleRequests": {
            "$ref": "#/components/schemas/PrecedenceTourRuleWrapper"
          }
        },
        "description": "Single tour precedence optimize request for creating a tour based on job precedence sequence."
      },
      "VirtualTourRuleRequest": {
        "required": [
          "businessAccountUid",
          "destinationLocationUid",
          "jobStartDate",
          "jobType",
          "jobUid",
          "originLocationUid",
          "productUid"
        ],
        "type": "object",
        "properties": {
          "jobUid": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Fleet job unique identifier",
            "example": "AvO78iot3x"
          },
          "jobType": {
            "maxLength": 30,
            "type": "string",
            "description": "Job type name",
            "example": "INBOUND"
          },
          "businessAccountUid": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Job's supplier identifier"
          },
          "jobStartDate": {
            "type": "string",
            "description": "Job start date",
            "example": "2024-11-15T23:59:59"
          },
          "productUid": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Product unique identifier",
            "example": "LKnPKAYKvf"
          },
          "originLocationUid": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Origin location unique identifier",
            "example": "1"
          },
          "destinationLocationUid": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Destination location unique identifier",
            "example": "1"
          }
        },
        "description": "Defines a job contamination rule validation request for a virtual tour"
      },
      "ContaminationRuleResponseWrapper": {
        "type": "object",
        "properties": {
          "contaminationRuleViolations": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "description": "Contamination rule violations",
              "items": {
                "$ref": "#/components/schemas/ContaminationRuleJobResponse"
              }
            },
            "description": "Contamination rule violations"
          }
        },
        "description": "Defines the contamination rule violation response wrapper"
      },
      "ContaminationRuleRequest": {
        "required": [
          "businessAccountUid",
          "destinationLocationUid",
          "jobType",
          "jobUid",
          "jobVisitOrder",
          "originLocationUid",
          "productUid"
        ],
        "type": "object",
        "properties": {
          "jobUid": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Fleet job unique identifier",
            "example": "AvO78iot3x"
          },
          "jobType": {
            "maxLength": 30,
            "type": "string",
            "description": "Job type name",
            "example": "INBOUND"
          },
          "businessAccountUid": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Job's supplier identifier"
          },
          "jobVisitOrder": {
            "type": "integer",
            "description": "Defines the job order",
            "format": "int32",
            "example": 0
          },
          "productUid": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Product unique identifier",
            "example": "LKnPKAYKvf"
          },
          "originLocationUid": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Origin location unique identifier",
            "example": "1"
          },
          "destinationLocationUid": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Destination location unique identifier",
            "example": "1"
          }
        },
        "description": "Defines a job contamination rule validation request for an existing tour."
      },
      "VirtualTourRuleRequestWrapper": {
        "required": [
          "endRouteTime",
          "startRouteTime",
          "tourRuleRequests",
          "vehicleIdentificationNumber"
        ],
        "type": "object",
        "properties": {
          "vehicleIdentificationNumber": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "Vehicle identification number",
            "example": "4Y1SL65848Z411444"
          },
          "startRouteTime": {
            "type": "string",
            "description": "The start route date time.",
            "example": "2024-11-15T23:59:59"
          },
          "endRouteTime": {
            "type": "string",
            "description": "The end route date time.",
            "example": "2024-11-15T23:59:59"
          },
          "tourRuleRequests": {
            "type": "array",
            "description": "Job contamination rule requests of a specific tour.",
            "items": {
              "$ref": "#/components/schemas/ContaminationRuleRequest"
            }
          },
          "previousVirtualTourRuleRequests": {
            "type": "array",
            "description": "Previous virtual tour jobs contamination rule requests.",
            "items": {
              "$ref": "#/components/schemas/VirtualTourRuleRequest"
            }
          },
          "nextVirtualTourRuleRequests": {
            "type": "array",
            "description": "Next virtual tour jobs contamination rule requests.",
            "items": {
              "$ref": "#/components/schemas/VirtualTourRuleRequest"
            }
          }
        },
        "description": "Defines the virtual tour contamination rule validation request wrapper"
      },
      "FleetVehicleWebPatchRequest": {
        "type": "object",
        "properties": {
          "vehicleCoreUuid": {
            "$ref": "#/components/schemas/PatchRequestUUID"
          },
          "name": {
            "$ref": "#/components/schemas/PatchRequestString"
          },
          "depotId": {
            "$ref": "#/components/schemas/PatchRequestString"
          },
          "licensePlateNumber": {
            "$ref": "#/components/schemas/PatchRequestString"
          },
          "status": {
            "$ref": "#/components/schemas/PatchRequestVehicleStatus"
          },
          "notes": {
            "$ref": "#/components/schemas/PatchRequestString"
          }
        },
        "description": "Defines the patch request of a fleet vehicle. Any not provided field (null) is considered unmodified.\nMandatory fields, if provided they cannot have value 'null', or 'resetValue'=true"
      },
      "PatchRequestString": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "JSON representation of the modified object, which can be any type 'T'."
          },
          "resetValue": {
            "type": "boolean",
            "description": "Flag to indicate if the stored 'value' should be reset. If true, 'value' must be null, and vice versa.",
            "default": false
          }
        },
        "description": "Represents a generic Patch request containing a value of generic type 'T', and an optional flag to reset its stored value."
      },
      "PatchRequestUUID": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "JSON representation of the modified object, which can be any type 'T'.",
            "format": "uuid"
          },
          "resetValue": {
            "type": "boolean",
            "description": "Flag to indicate if the stored 'value' should be reset. If true, 'value' must be null, and vice versa.",
            "default": false
          }
        },
        "description": "Represents a generic Patch request containing a value of generic type 'T', and an optional flag to reset its stored value."
      },
      "PatchRequestVehicleStatus": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "JSON representation of the modified object, which can be any type 'T'.",
            "enum": [
              "AVAILABLE",
              "PLANNED",
              "ENROUTE",
              "OUT_OF_ORDER"
            ]
          },
          "resetValue": {
            "type": "boolean",
            "description": "Flag to indicate if the stored 'value' should be reset. If true, 'value' must be null, and vice versa.",
            "default": false
          }
        },
        "description": "Represents a generic Patch request containing a value of generic type 'T', and an optional flag to reset its stored value."
      },
      "FleetTourWebPatchRequest": {
        "type": "object",
        "properties": {
          "notes": {
            "$ref": "#/components/schemas/PatchRequestString"
          }
        },
        "description": "Defines the patch web request of a fleet tour. Any not provided field (null) is considered unmodified."
      },
      "VehicleWebResponse": {
        "required": [
          "depotId",
          "name",
          "status",
          "vehicleIdentificationNumber",
          "workingHours"
        ],
        "type": "object",
        "properties": {
          "depotId": {
            "maxLength": 50,
            "type": "string",
            "description": "Indicates the identification number of the depot in which the vehicle is stored.",
            "example": "12345"
          },
          "brandName": {
            "type": "string",
            "description": "Vehicle brand name.",
            "example": "Mercedes"
          },
          "model": {
            "type": "string",
            "description": "Vehicle model.",
            "example": "AMG"
          },
          "brandUuid": {
            "type": "string",
            "description": "Vehicle brand uuid. Can be used to fetch the brand image.",
            "format": "uuid",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "name": {
            "maxLength": 20,
            "type": "string",
            "description": "Vehicle name."
          },
          "vehicleIdentificationNumber": {
            "maxLength": 30,
            "type": "string",
            "description": "Identifies the vehicle identification number (VIN) of the vehicle.",
            "example": "4Y1SL65848Z411444"
          },
          "licensePlateNumber": {
            "type": "string",
            "description": "A numeric or alphanumeric id that uniquely identifies the vehicle within the issuing region's vehicle register.",
            "example": "EF87867"
          },
          "maxLoadingVolume": {
            "type": "number",
            "description": "Vehicles max loading volume specified in cubic meters.",
            "format": "double",
            "example": 3.5
          },
          "maxLoadingWeight": {
            "type": "number",
            "description": "Vehicles max loading weight specified in metric tons.",
            "format": "double",
            "example": 10.5
          },
          "workingHours": {
            "$ref": "#/components/schemas/Hours"
          },
          "status": {
            "type": "string",
            "description": "Vehicle availability status.",
            "enum": [
              "AVAILABLE",
              "PLANNED",
              "ENROUTE",
              "OUT_OF_ORDER"
            ]
          },
          "notes": {
            "maxLength": 100,
            "type": "string",
            "description": "Free text field for additional vehicle notes.",
            "example": "Vehicle is out of order."
          },
          "partiallyPlanned": {
            "type": "boolean",
            "description": "Indicates if a vehicle is partial planned. Vehicle is not available for instance on Monday but it is for the rest of the days then the \n vehicle status should be \"Available\" with the additional boolean (partiallyPlanned) set to true."
          },
          "startTour": {
            "type": "string",
            "description": "Vehicle tour start date time.",
            "example": "2024-11-15T23:59:59"
          },
          "endTour": {
            "type": "string",
            "description": "Vehicle tour end date time.",
            "example": "2024-11-15T23:59:59"
          }
        },
        "description": "Defines the fleet vehicle details, including associated information for its assigned tours."
      },
      "VehicleByVinWebResponse": {
        "required": [
          "depotId",
          "vehicleIdentificationNumber"
        ],
        "type": "object",
        "properties": {
          "depotId": {
            "maxLength": 50,
            "type": "string",
            "description": "Indicates the identification number of the depot in which the vehicle is stored.",
            "example": "12345"
          },
          "brandName": {
            "type": "string",
            "description": "Vehicle brand name.",
            "example": "Mercedes"
          },
          "model": {
            "type": "string",
            "description": "Vehicle model.",
            "example": "AMG"
          },
          "name": {
            "type": "string",
            "description": "Vehicle name."
          },
          "vehicleIdentificationNumber": {
            "maxLength": 30,
            "type": "string",
            "description": "Identifies the vehicle identification number (VIN) of the vehicle.",
            "example": "4Y1SL65848Z411444"
          },
          "licensePlateNumber": {
            "type": "string",
            "description": "A numeric or alphanumeric id that uniquely identifies the vehicle within the issuing region's vehicle register.",
            "example": "EF87867"
          },
          "status": {
            "type": "string",
            "description": "Vehicle availability status.",
            "enum": [
              "AVAILABLE",
              "PLANNED",
              "ENROUTE",
              "OUT_OF_ORDER"
            ]
          },
          "variant": {
            "type": "string",
            "description": "The model variant",
            "example": "Turbo"
          },
          "notes": {
            "maxLength": 100,
            "type": "string",
            "description": "Free text field for additional vehicle notes.",
            "example": "Vehicle is out of order."
          },
          "workingHours": {
            "$ref": "#/components/schemas/Hours"
          }
        },
        "description": "Defines the fleet vehicle details."
      },
      "VehicleCoreWebResponse": {
        "type": "object",
        "properties": {
          "brandName": {
            "type": "string",
            "description": "The vehicle brand name",
            "example": "Porsche"
          },
          "model": {
            "type": "string",
            "description": "The model name",
            "example": "Taycan"
          },
          "variant": {
            "type": "string",
            "description": "The model variant",
            "example": "Turbo"
          },
          "vehicleCoreUuid": {
            "type": "string",
            "description": "The UUID of the vehicle",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        }
      },
      "BrandResponse": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "The UUID of the vehicle brand",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "brand_name": {
            "type": "string",
            "description": "The vehicle brand name",
            "example": "Porsche"
          },
          "has_brand_image": {
            "type": "string",
            "description": "Vehicle has a brand image",
            "example": "true"
          }
        }
      },
      "UserResponse": {
        "required": [
          "email",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the user",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "description": "The email address of the user",
            "example": "john.doe@energystacks.io"
          }
        },
        "description": "Defines the user information"
      },
      "TourWebResponse": {
        "required": [
          "endDate",
          "hasPenaltyRuleViolation",
          "jobsStatusProgress",
          "numberOfJobs",
          "startDate",
          "status",
          "totalDistance",
          "totalTime",
          "tourUid",
          "vehicle"
        ],
        "type": "object",
        "properties": {
          "tourUid": {
            "maxLength": 50,
            "type": "string",
            "description": "Tour identifier",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "status": {
            "maxLength": 10,
            "type": "string",
            "description": "Defines all possible tour statuses",
            "enum": [
              "PLANNED",
              "ENROUTE",
              "DELAYED",
              "FAILED",
              "INCOMPLETE",
              "DONE"
            ]
          },
          "startDate": {
            "type": "string",
            "description": "Planned start date of this tour",
            "example": "2024-11-15T23:59:59"
          },
          "confirmedStartDate": {
            "type": "string",
            "description": "Confirmed start date of this tour",
            "example": "2024-11-15T23:59:59"
          },
          "endDate": {
            "type": "string",
            "description": "Planned end date of this tour",
            "example": "2024-11-15T23:59:59"
          },
          "confirmedEndDate": {
            "type": "string",
            "description": "Confirmed end date of this tour",
            "example": "2024-11-15T23:59:59"
          },
          "estimatedEndDate": {
            "type": "string",
            "description": "Estimated end date of this tour, present only when confirmedEndDate is null.",
            "example": "2024-11-15T23:59:59"
          },
          "violatingTimeWindow": {
            "type": "boolean",
            "description": "Indicates whether any planned times for tour jobs are outside their specified time windows (pick-up or drop-off times).\nIf NULL, this means the violations could not be determined."
          },
          "totalTime": {
            "type": "integer",
            "description": "Total tour duration time in seconds",
            "format": "int64",
            "example": 155
          },
          "totalDistance": {
            "type": "number",
            "description": "Total tour distance in meters",
            "format": "double",
            "example": 500.9
          },
          "numberOfJobs": {
            "type": "integer",
            "description": "Total number of jobs of this tour",
            "format": "int32",
            "example": 6
          },
          "depotId": {
            "maxLength": 50,
            "type": "string",
            "description": "Depot identifier",
            "example": "514"
          },
          "productQuantities": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "description": "Summary of all associated tour products. Contains information about their names, and their total quantity transferred.",
              "format": "double"
            },
            "description": "Summary of all associated tour products. Contains information about their names, and their total quantity transferred."
          },
          "jobsStatusProgress": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "description": "Progress representation of jobs, categorized by their statuses within a tour.",
              "items": {
                "type": "string",
                "description": "Progress representation of jobs, categorized by their statuses within a tour."
              }
            },
            "description": "Progress representation of jobs, categorized by their statuses within a tour."
          },
          "vehicle": {
            "$ref": "#/components/schemas/TourWebVehicleResponse"
          },
          "hasPenaltyRuleViolation": {
            "type": "boolean",
            "description": "Indicates if the tour has at least one penalty rule violation",
            "example": false
          },
          "transitionMetrics": {
            "$ref": "#/components/schemas/TransitionMetricsWebResponse"
          },
          "notes": {
            "maxLength": 100,
            "type": "string",
            "description": "Optional notes for the tour.",
            "example": "Tour completed on time."
          }
        },
        "description": "Defines the Tour details, including associated job and vehicle information"
      },
      "TourWebVehicleResponse": {
        "required": [
          "Indicates if the vehicle is soft-deleted.",
          "brandUuid",
          "vehicleIdentificationNumber"
        ],
        "type": "object",
        "properties": {
          "vehicleIdentificationNumber": {
            "maxLength": 30,
            "type": "string",
            "description": "The identification number (VIN) of the vehicle.",
            "example": "4Y1SL65848Z411444"
          },
          "name": {
            "type": "string",
            "description": "The name of the Vehicle.",
            "example": "HKN"
          },
          "co2Emissions": {
            "type": "number",
            "description": "Grams of co2 produced by the vehicle during the tour.",
            "format": "double",
            "example": 150.7
          },
          "brandUuid": {
            "type": "string",
            "description": "The vehicle brand UUID",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "Indicates if the vehicle is soft-deleted.": {
            "type": "boolean"
          }
        },
        "description": "Defines the details of a tour vehicle"
      },
      "JobSnapshotWebResponse": {
        "required": [
          "businessAccountUid",
          "depotId",
          "destination",
          "endDate",
          "jobType",
          "jobUid",
          "jobVisitOrder",
          "origin",
          "product",
          "startDate",
          "status",
          "totalTime"
        ],
        "type": "object",
        "properties": {
          "jobUid": {
            "maxLength": 50,
            "type": "string",
            "description": "Job identifier",
            "example": "08a8c5d2f13b9100"
          },
          "depotId": {
            "maxLength": 50,
            "type": "string",
            "description": "Depot identifier",
            "example": "AvO78iot3x"
          },
          "startDate": {
            "type": "string",
            "description": "Planned start date of this job",
            "example": "2024-11-15T23:59:59"
          },
          "confirmedStartDate": {
            "type": "string",
            "description": "Confirmed start date of this job",
            "example": "2024-11-15T23:59:59"
          },
          "estimatedStartDate": {
            "type": "string",
            "description": "Estimated end date of this job, present only when confirmedEndDate is null.",
            "example": "2024-11-15T23:59:59"
          },
          "endDate": {
            "type": "string",
            "description": "Planned end date of this job",
            "example": "2024-11-15T23:59:59"
          },
          "confirmedEndDate": {
            "type": "string",
            "description": "Confirmed end date of this job",
            "example": "2024-11-15T23:59:59"
          },
          "estimatedEndDate": {
            "type": "string",
            "description": "Estimated end date of this job, present only when confirmedEndDate is null.",
            "example": "2024-11-15T23:59:59"
          },
          "jobVisitOrder": {
            "type": "integer",
            "description": "Defines the job order",
            "format": "int32",
            "example": 5
          },
          "totalTime": {
            "type": "integer",
            "description": "Total job duration time in seconds",
            "format": "int64",
            "example": 155
          },
          "status": {
            "maxLength": 10,
            "type": "string",
            "description": "Defines all possible statuses of a Job",
            "enum": [
              "TO_DO",
              "PENDING",
              "PLANNED",
              "ENROUTE",
              "DELIVERED",
              "FAILED",
              "RETURNED",
              "CANCELLED"
            ]
          },
          "jobType": {
            "maxLength": 30,
            "type": "string",
            "description": "Type of job"
          },
          "product": {
            "$ref": "#/components/schemas/FleetProductResponse"
          },
          "origin": {
            "$ref": "#/components/schemas/RoutePointWebResponse"
          },
          "destination": {
            "$ref": "#/components/schemas/RoutePointWebResponse"
          },
          "businessAccountUid": {
            "maxLength": 50,
            "type": "string",
            "description": "Supplier identifier",
            "example": "AvO78iot3x"
          },
          "companyName": {
            "maxLength": 255,
            "type": "string",
            "description": "Supplier name",
            "example": "P3"
          },
          "datePickUpFrom": {
            "type": "string",
            "description": "Earliest date this job can be picked up",
            "example": "2024-11-15T23:59:59"
          },
          "datePickUpTill": {
            "type": "string",
            "description": "Latest date this job can be picked up",
            "example": "2024-11-15T23:59:59"
          },
          "dateDropOffFrom": {
            "type": "string",
            "description": "Earliest date this job can be dropped off",
            "example": "2024-11-15T23:59:59"
          },
          "dateDropOffTill": {
            "type": "string",
            "description": "Latest date this job can be dropped off",
            "example": "2024-11-15T23:59:59"
          }
        },
        "description": "Defines the job snapshot details, including associated Business Account information"
      },
      "RoutePointWebResponse": {
        "required": [
          "accountLocationUid",
          "geoLocation",
          "locationAddressType",
          "locationRisk",
          "locationType"
        ],
        "type": "object",
        "properties": {
          "accountLocationUid": {
            "maxLength": 50,
            "type": "string",
            "description": "Identifier of the business account's location",
            "example": "AvO78iot3x"
          },
          "street": {
            "maxLength": 255,
            "type": "string",
            "description": "Street of the route point",
            "example": "Main street"
          },
          "city": {
            "maxLength": 255,
            "type": "string",
            "description": "City of the route point",
            "example": "Munich"
          },
          "zipCode": {
            "maxLength": 50,
            "type": "string",
            "description": "Zip code.",
            "example": "20535"
          },
          "geoLocation": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "locationType": {
            "maxLength": 255,
            "type": "string",
            "description": "Location type information",
            "example": "Cow"
          },
          "locationAddressType": {
            "maxLength": 255,
            "type": "string",
            "description": "Location address type information",
            "example": "Raw Tank"
          },
          "locationRisk": {
            "maxLength": 255,
            "type": "string",
            "description": "Location risk information",
            "example": "High"
          },
          "products": {
            "type": "array",
            "description": "Route point product names",
            "items": {
              "type": "string",
              "description": "Route point product names"
            }
          },
          "processTime": {
            "minimum": 0,
            "type": "integer",
            "description": "Maximum process time allowed on a location in seconds",
            "format": "int64",
            "example": 600
          }
        },
        "description": "Defines the origin/destination of a job."
      },
      "TourWebDetailsResponse": {
        "required": [
          "endDate",
          "jobs",
          "startDate",
          "status",
          "totalDistance",
          "totalTime",
          "tourUid",
          "vehicle"
        ],
        "type": "object",
        "properties": {
          "jobs": {
            "type": "array",
            "description": "Defines the job snapshot details, including associated Business Account information and the origin/destination products",
            "items": {
              "$ref": "#/components/schemas/JobSnapshotWebResponse"
            }
          },
          "tourUid": {
            "maxLength": 50,
            "type": "string",
            "description": "Tour identifier",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "status": {
            "maxLength": 10,
            "type": "string",
            "description": "Defines all possible tour statuses",
            "enum": [
              "PLANNED",
              "ENROUTE",
              "DELAYED",
              "FAILED",
              "INCOMPLETE",
              "DONE"
            ]
          },
          "vehicle": {
            "$ref": "#/components/schemas/TourWebDetailsVehicleResponse"
          },
          "startDate": {
            "type": "string",
            "description": "Planned start date of this tour",
            "example": "2024-11-15T23:59:59"
          },
          "confirmedStartDate": {
            "type": "string",
            "description": "Confirmed start date of this tour",
            "example": "2024-11-15T23:59:59"
          },
          "endDate": {
            "type": "string",
            "description": "Planned end date of this tour",
            "example": "2024-11-15T23:59:59"
          },
          "confirmedEndDate": {
            "type": "string",
            "description": "Confirmed end date of this tour",
            "example": "2024-11-15T23:59:59"
          },
          "estimatedEndDate": {
            "type": "string",
            "description": "Estimated end date of this tour, present only when confirmedEndDate is null.",
            "example": "2024-11-15T23:59:59"
          },
          "violatingTimeWindow": {
            "type": "boolean",
            "description": "Indicates whether any planned times for tour jobs are outside their specified time windows (pick-up or drop-off times).\nIf NULL, this means the violations could not be determined."
          },
          "vehicleBreak": {
            "$ref": "#/components/schemas/VehicleBreakWebResponse"
          },
          "totalTime": {
            "type": "integer",
            "description": "Total tour duration time in seconds",
            "format": "int64",
            "example": 155
          },
          "totalDistance": {
            "type": "number",
            "description": "Total tour distance in meters",
            "format": "double",
            "example": 500.9
          },
          "transitionMetrics": {
            "$ref": "#/components/schemas/TransitionMetricsWebResponse"
          },
          "contaminationRuleViolations": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "description": "Contamination rule violations",
              "items": {
                "$ref": "#/components/schemas/ContaminationRuleJobResponse"
              }
            },
            "description": "Contamination rule violations"
          },
          "polyline": {
            "type": "string",
            "description": "The overview polyline",
            "example": "qxxhH_j`w@hk@tJ`GhEbGfIjNfBb_@r_@"
          },
          "notes": {
            "maxLength": 100,
            "type": "string",
            "description": "Optional notes for the tour.",
            "example": "Tour completed on time."
          }
        },
        "description": "Defines the Tour details."
      },
      "TourWebDetailsVehicleResponse": {
        "required": [
          "Indicates if the vehicle is soft-deleted.",
          "vehicleIdentificationNumber"
        ],
        "type": "object",
        "properties": {
          "vehicleIdentificationNumber": {
            "maxLength": 30,
            "type": "string",
            "description": "The identification number (VIN) of the vehicle.",
            "example": "4Y1SL65848Z411444"
          },
          "name": {
            "maxLength": 20,
            "type": "string",
            "description": "The name of the Vehicle.",
            "example": "HKN"
          },
          "Indicates if the vehicle is soft-deleted.": {
            "type": "boolean"
          }
        },
        "description": "Defines the details of a tour vehicle"
      },
      "VehicleBreakWebResponse": {
        "required": [
          "endDateTime",
          "estimatedEndDateTime",
          "estimatedStartDateTime",
          "jobUid",
          "startDateTime"
        ],
        "type": "object",
        "properties": {
          "startDateTime": {
            "type": "string",
            "description": "Vehicle planned start date time",
            "example": "2024-11-15T23:59:59"
          },
          "estimatedStartDateTime": {
            "type": "string",
            "description": "Vehicle estimated start date time (based on confirmed and estimated tour and job times).",
            "example": "2024-11-15T23:59:59"
          },
          "endDateTime": {
            "type": "string",
            "description": "Vehicle planned end date time",
            "example": "2024-11-15T23:59:59"
          },
          "estimatedEndDateTime": {
            "type": "string",
            "description": "Vehicle estimated end date time (based on confirmed and estimated tour and job times).",
            "example": "2024-11-15T23:59:59"
          },
          "jobUid": {
            "maxLength": 50,
            "type": "string",
            "description": "Job identifier of the job which is before the break"
          }
        },
        "description": "Vehicle break inside of a tour."
      },
      "Pageable": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "JobTourInfoWeb": {
        "type": "object",
        "properties": {
          "tourUid": {
            "maxLength": 50,
            "type": "string",
            "description": "Identifier of the tour to which the job is assigned (if assigned).",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "vehicle": {
            "$ref": "#/components/schemas/JobVehicleInfoWeb"
          }
        },
        "description": "Information about the tour if the job is assigned to a tour."
      },
      "JobVehicleInfoWeb": {
        "required": [
          "Indicates if the vehicle is soft-deleted."
        ],
        "type": "object",
        "properties": {
          "vehicleIdentificationNumber": {
            "type": "string",
            "description": "Vehicle Identification Number (VIN) of the tour vehicle (if the job is assigned to a tour)."
          },
          "vehicleName": {
            "maxLength": 20,
            "type": "string",
            "description": "It's the name of the Vehicle.",
            "example": "HKN"
          },
          "Indicates if the vehicle is soft-deleted.": {
            "type": "boolean"
          }
        },
        "description": "Represents a vehicle with its identification number, name and soft-deletion info."
      },
      "JobWebResponse": {
        "required": [
          "businessAccountUid",
          "jobType",
          "jobUid",
          "status"
        ],
        "type": "object",
        "properties": {
          "jobUid": {
            "maxLength": 50,
            "type": "string",
            "description": "Job identifier",
            "example": "08a8c5d2f13b9100"
          },
          "depotId": {
            "maxLength": 50,
            "type": "string",
            "description": "Depot identifier",
            "example": "AvO78iot3x"
          },
          "jobType": {
            "maxLength": 30,
            "type": "string",
            "description": "Job type name",
            "example": "INBOUND"
          },
          "product": {
            "$ref": "#/components/schemas/FleetProductResponse"
          },
          "startDate": {
            "type": "string",
            "description": "Start date of this job",
            "example": "2024-11-15T23:59:59"
          },
          "endDate": {
            "type": "string",
            "description": "End date of this job",
            "example": "2024-11-15T23:59:59"
          },
          "origin": {
            "$ref": "#/components/schemas/RoutePointWebResponse"
          },
          "destination": {
            "$ref": "#/components/schemas/RoutePointWebResponse"
          },
          "status": {
            "maxLength": 10,
            "type": "string",
            "description": "Defines all possible statuses of a Job",
            "enum": [
              "TO_DO",
              "PENDING",
              "PLANNED",
              "ENROUTE",
              "DELIVERED",
              "FAILED",
              "RETURNED",
              "CANCELLED"
            ]
          },
          "datePickUpFrom": {
            "type": "string",
            "description": "Earliest date this job can be picked up",
            "example": "2024-11-15T23:59:59"
          },
          "datePickUpTill": {
            "type": "string",
            "description": "Latest date this job can be picked up",
            "example": "2024-11-15T23:59:59"
          },
          "dateDropOffFrom": {
            "type": "string",
            "description": "Earliest date this job can be dropped off",
            "example": "2024-11-15T23:59:59"
          },
          "dateDropOffTill": {
            "type": "string",
            "description": "Latest date this job can be dropped off",
            "example": "2024-11-15T23:59:59"
          },
          "businessAccountUid": {
            "maxLength": 50,
            "type": "string",
            "description": "Supplier identifier",
            "example": "AvO78iot3x"
          },
          "companyName": {
            "maxLength": 255,
            "type": "string",
            "description": "Supplier name",
            "example": "P3"
          },
          "tour": {
            "$ref": "#/components/schemas/JobTourInfoWeb"
          }
        },
        "description": "Defines the Job details, including associated Business Account information"
      },
      "JobMetrics": {
        "required": [
          "drivingDistance",
          "totalDuration"
        ],
        "type": "object",
        "properties": {
          "drivingDistance": {
            "minimum": 0,
            "type": "number",
            "description": "The estimated driving distance for the job in meters. This value is an estimate and may differ from the actual distance.",
            "format": "double",
            "example": 35.5
          },
          "totalDuration": {
            "minimum": 0,
            "type": "integer",
            "description": "The estimated driving duration & process time for the job in minutes. This value is an estimate and may differ from the actual duration.",
            "format": "int32",
            "example": 90
          }
        },
        "description": "Represents the metrics related to a job, specifically the estimated driving distance, driving duration and process times."
      },
      "JobPoolWebResponse": {
        "required": [
          "businessAccountUid",
          "jobType",
          "jobUid",
          "status"
        ],
        "type": "object",
        "properties": {
          "jobUid": {
            "maxLength": 50,
            "type": "string",
            "description": "Job identifier",
            "example": "08a8c5d2f13b9100"
          },
          "depotId": {
            "maxLength": 50,
            "type": "string",
            "description": "Depot identifier",
            "example": "AvO78iot3x"
          },
          "jobType": {
            "maxLength": 30,
            "type": "string",
            "description": "Job type name",
            "example": "INBOUND"
          },
          "product": {
            "$ref": "#/components/schemas/FleetProductResponse"
          },
          "metrics": {
            "$ref": "#/components/schemas/JobMetrics"
          },
          "startDate": {
            "type": "string",
            "description": "Start date of this job",
            "example": "2024-11-15T23:59:59"
          },
          "endDate": {
            "type": "string",
            "description": "End date of this job",
            "example": "2024-11-15T23:59:59"
          },
          "origin": {
            "$ref": "#/components/schemas/RoutePointWebResponse"
          },
          "destination": {
            "$ref": "#/components/schemas/RoutePointWebResponse"
          },
          "status": {
            "maxLength": 10,
            "type": "string",
            "description": "Defines all possible statuses of a Job",
            "enum": [
              "TO_DO",
              "PENDING",
              "PLANNED",
              "ENROUTE",
              "DELIVERED",
              "FAILED",
              "RETURNED",
              "CANCELLED"
            ]
          },
          "datePickUpFrom": {
            "type": "string",
            "description": "Earliest date this job can be picked up",
            "example": "2024-11-15T23:59:59"
          },
          "datePickUpTill": {
            "type": "string",
            "description": "Latest date this job can be picked up",
            "example": "2024-11-15T23:59:59"
          },
          "dateDropOffFrom": {
            "type": "string",
            "description": "Earliest date this job can be dropped off",
            "example": "2024-11-15T23:59:59"
          },
          "dateDropOffTill": {
            "type": "string",
            "description": "Latest date this job can be dropped off",
            "example": "2024-11-15T23:59:59"
          },
          "businessAccountUid": {
            "maxLength": 50,
            "type": "string",
            "description": "Supplier identifier",
            "example": "AvO78iot3x"
          },
          "companyName": {
            "maxLength": 255,
            "type": "string",
            "description": "Supplier name",
            "example": "P3"
          }
        },
        "description": "Defines the Job details, including metrics and associated Business Account information"
      },
      "TourDashboardWebResponse": {
        "required": [
          "endDate",
          "hasPenaltyRuleViolation",
          "jobsStatusProgress",
          "numberOfJobs",
          "startDate",
          "status",
          "totalDistance",
          "totalTime",
          "tourUid",
          "vehicle"
        ],
        "type": "object",
        "properties": {
          "tourUid": {
            "maxLength": 50,
            "type": "string",
            "description": "Tour identifier",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "status": {
            "maxLength": 10,
            "type": "string",
            "description": "Defines all possible tour statuses",
            "enum": [
              "PLANNED",
              "ENROUTE",
              "DELAYED",
              "FAILED",
              "INCOMPLETE",
              "DONE"
            ]
          },
          "startDate": {
            "type": "string",
            "description": "Planned start date of this tour",
            "example": "2024-11-15T23:59:59"
          },
          "confirmedStartDate": {
            "type": "string",
            "description": "Confirmed start date of this tour",
            "example": "2024-11-15T23:59:59"
          },
          "endDate": {
            "type": "string",
            "description": "Planned end date of this tour",
            "example": "2024-11-15T23:59:59"
          },
          "confirmedEndDate": {
            "type": "string",
            "description": "Confirmed end date of this tour",
            "example": "2024-11-15T23:59:59"
          },
          "estimatedEndDate": {
            "type": "string",
            "description": "Estimated end date of this tour, present only when confirmedEndDate is null.",
            "example": "2024-11-15T23:59:59"
          },
          "violatingTimeWindow": {
            "type": "boolean",
            "description": "Indicates whether any planned times for tour jobs are outside their specified time windows (pick-up or drop-off times).\nIf NULL, this means the violations could not be determined."
          },
          "hasPenaltyRuleViolation": {
            "type": "boolean",
            "description": "Indicates if the tour has at least one penalty rule violation",
            "example": false
          },
          "totalTime": {
            "type": "integer",
            "description": "Total tour duration time in seconds",
            "format": "int64",
            "example": 155
          },
          "totalDistance": {
            "type": "number",
            "description": "Total tour distance in meters",
            "format": "double",
            "example": 500.9
          },
          "numberOfJobs": {
            "type": "integer",
            "description": "Total number of jobs of this tour",
            "format": "int32",
            "example": 6
          },
          "depotId": {
            "maxLength": 50,
            "type": "string",
            "description": "Depot identifier",
            "example": "514"
          },
          "jobsStatusProgress": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "description": "Progress representation of jobs, categorized by their statuses within a tour.",
              "items": {
                "type": "string",
                "description": "Progress representation of jobs, categorized by their statuses within a tour."
              }
            },
            "description": "Progress representation of jobs, categorized by their statuses within a tour."
          },
          "vehicle": {
            "$ref": "#/components/schemas/TourDashboardWebVehicleResponse"
          },
          "transitionMetrics": {
            "$ref": "#/components/schemas/TransitionMetricsWebResponse"
          },
          "notes": {
            "maxLength": 100,
            "type": "string",
            "description": "Optional notes for the tour.",
            "example": "Tour completed on time."
          }
        },
        "description": "The response object representing the details of a tour on the dashboard."
      },
      "TourDashboardWebVehicleResponse": {
        "required": [
          "Indicates if the vehicle is soft-deleted.",
          "brandUuid",
          "vehicleIdentificationNumber"
        ],
        "type": "object",
        "properties": {
          "vehicleIdentificationNumber": {
            "maxLength": 30,
            "type": "string",
            "description": "The identification number (VIN) of the vehicle.",
            "example": "4Y1SL65848Z411444"
          },
          "name": {
            "type": "string",
            "description": "The name of the Vehicle.",
            "example": "HKN"
          },
          "brandUuid": {
            "type": "string",
            "description": "The vehicle brand UUID",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "notes": {
            "maxLength": 100,
            "type": "string",
            "description": "Free text field for additional vehicle notes.",
            "example": "Vehicle is out of order."
          },
          "Indicates if the vehicle is soft-deleted.": {
            "type": "boolean"
          }
        },
        "description": "Defines the details of a tour vehicle"
      },
      "BusinessAccountAddressWebResponse": {
        "type": "object",
        "properties": {
          "street": {
            "maxLength": 255,
            "type": "string",
            "description": "Street name.",
            "example": "Main street"
          },
          "zipCode": {
            "maxLength": 50,
            "type": "string",
            "description": "Zip code.",
            "example": "20535"
          },
          "city": {
            "maxLength": 255,
            "type": "string",
            "description": "City in which location is located in.",
            "example": "Stuttgart"
          }
        },
        "description": "Defines the business account address details"
      },
      "BusinessAccountWebResponse": {
        "required": [
          "depotId",
          "type",
          "uid"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "maxLength": 50,
            "type": "string",
            "description": "Business account unique identifier",
            "example": "AvO78iot3x"
          },
          "depotId": {
            "maxLength": 50,
            "type": "string",
            "description": "Depot identifier",
            "example": "AvO78iot3x"
          },
          "type": {
            "maxLength": 255,
            "type": "string",
            "description": "Business account type",
            "example": "Plant"
          },
          "companyName": {
            "maxLength": 255,
            "type": "string",
            "description": "Company name",
            "example": "P3"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Phone number",
            "example": "+498001122333"
          },
          "address": {
            "$ref": "#/components/schemas/BusinessAccountAddressWebResponse"
          },
          "locationAddressTypes": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "description": "Summary of all associated location address types. Contains information about their names and their total number across all locations belonging to the business account.",
              "format": "int32"
            },
            "description": "Summary of all associated location address types. Contains information about their names and their total number across all locations belonging to the business account."
          }
        },
        "description": "Defines the business account details"
      },
      "AccountContactResponse": {
        "type": "object",
        "properties": {
          "firstName": {
            "maxLength": 255,
            "type": "string",
            "description": "First name",
            "example": "John"
          },
          "lastName": {
            "maxLength": 255,
            "type": "string",
            "description": "Last name",
            "example": "Doe"
          },
          "phoneNumber": {
            "maxLength": 80,
            "type": "string",
            "description": "Phone number",
            "example": "+498001122333"
          },
          "email": {
            "maxLength": 255,
            "type": "string",
            "description": "Email address",
            "example": "john.doe@energystacks.io"
          }
        },
        "description": "Defines the details of an account contact"
      },
      "BusinessAccountDetailsWebResponse": {
        "required": [
          "depotId",
          "uid"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "maxLength": 50,
            "type": "string",
            "description": "Business account unique identifier",
            "example": "AvO78iot3x"
          },
          "depotId": {
            "maxLength": 50,
            "type": "string",
            "description": "Depot identifier",
            "example": "LKnPKAYKvf"
          },
          "companyName": {
            "maxLength": 255,
            "type": "string",
            "description": "Company name",
            "example": "P3"
          },
          "contact": {
            "$ref": "#/components/schemas/AccountContactResponse"
          },
          "address": {
            "$ref": "#/components/schemas/BusinessAccountAddressWebResponse"
          },
          "recentJobs": {
            "type": "array",
            "description": "List of jobs to be performed ordered by the drop off time closest to the current time",
            "items": {
              "$ref": "#/components/schemas/BusinessAccountJobWebResponse"
            }
          },
          "locationAddressTypeGroups": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "description": "Business account locations grouped by location address type",
              "items": {
                "$ref": "#/components/schemas/BusinessAccountLocationWebResponse"
              }
            },
            "description": "Business account locations grouped by location address type"
          }
        },
        "description": "Defines the business account detailed response"
      },
      "BusinessAccountJobWebResponse": {
        "required": [
          "dateDropOffTill",
          "jobUid",
          "locationUid",
          "productName"
        ],
        "type": "object",
        "properties": {
          "jobUid": {
            "maxLength": 50,
            "type": "string",
            "description": "Job identifier",
            "example": "08a8c5d2f13b9100"
          },
          "locationUid": {
            "maxLength": 50,
            "type": "string",
            "description": "Location identifier",
            "example": "AvO78iot3x"
          },
          "productName": {
            "maxLength": 255,
            "type": "string",
            "description": "Product name",
            "example": "Degassed biomass"
          },
          "dateDropOffTill": {
            "type": "string",
            "description": "Latest date this job can be dropped off",
            "example": "2024-11-15T23:59:59"
          }
        },
        "description": "Defines the business account job details"
      },
      "BusinessAccountLocationAddressResponse": {
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 255,
            "type": "string",
            "description": "Address description."
          },
          "street": {
            "maxLength": 255,
            "type": "string",
            "description": "Street name.",
            "example": "Main street"
          },
          "geoLocation": {
            "$ref": "#/components/schemas/GeoLocation"
          }
        },
        "description": "Defines the business account location address details"
      },
      "BusinessAccountLocationWebResponse": {
        "required": [
          "risk",
          "type",
          "uid"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "maxLength": 50,
            "type": "string",
            "description": "Location uid",
            "example": "AvO78iot3x"
          },
          "type": {
            "maxLength": 255,
            "type": "string",
            "description": "Business account location type name",
            "example": "Cow"
          },
          "risk": {
            "maxLength": 255,
            "type": "string",
            "description": "Location risk name",
            "example": "High"
          },
          "address": {
            "$ref": "#/components/schemas/BusinessAccountLocationAddressResponse"
          }
        },
        "description": "Defines the business account location details"
      },
      "BusinessAccountPaginatedResponse": {
        "required": [
          "type",
          "uid"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "maxLength": 50,
            "type": "string",
            "description": "Business account unique identifier",
            "example": "AvO78iot3x"
          },
          "depotId": {
            "maxLength": 255,
            "type": "string",
            "description": "Depot identifier",
            "example": "AvO78iot3x"
          },
          "companyName": {
            "maxLength": 255,
            "type": "string",
            "description": "Company name",
            "example": "P3"
          },
          "contact": {
            "$ref": "#/components/schemas/AccountContactResponse"
          },
          "type": {
            "maxLength": 255,
            "type": "string",
            "description": "Business account type name",
            "example": "Depot"
          },
          "locations": {
            "type": "array",
            "description": "Business account locations",
            "items": {
              "$ref": "#/components/schemas/LocationReduceResponse"
            }
          }
        },
        "description": "Defines the details of a business account"
      },
      "LocationAddress": {
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 255,
            "type": "string",
            "description": "Address description."
          },
          "street": {
            "maxLength": 255,
            "type": "string",
            "description": "Street name.",
            "example": "Main street"
          },
          "zipCode": {
            "maxLength": 50,
            "type": "string",
            "description": "Zip code.",
            "example": "20535"
          },
          "city": {
            "maxLength": 255,
            "type": "string",
            "description": "City in which location is located in.",
            "example": "Stuttgart"
          },
          "country": {
            "maxLength": 50,
            "type": "string",
            "description": "Country in which location is located in.",
            "example": "Germany"
          },
          "geoLocation": {
            "$ref": "#/components/schemas/GeoLocation"
          }
        },
        "description": "Location address"
      },
      "LocationReduceResponse": {
        "required": [
          "addressType",
          "addressTypeUid",
          "uid"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "maxLength": 50,
            "type": "string",
            "description": "Location uid",
            "example": "AvO78iot3x"
          },
          "locationName": {
            "maxLength": 255,
            "type": "string",
            "description": "Location name",
            "example": "P3"
          },
          "address": {
            "$ref": "#/components/schemas/LocationAddress"
          },
          "loadingValidFrom": {
            "$ref": "#/components/schemas/Hours"
          },
          "loadingValidTo": {
            "$ref": "#/components/schemas/Hours"
          },
          "unloadingValidFrom": {
            "$ref": "#/components/schemas/Hours"
          },
          "unloadingValidTo": {
            "$ref": "#/components/schemas/Hours"
          },
          "addressTypeUid": {
            "type": "integer",
            "description": "Business account location address type identifier",
            "format": "int64",
            "example": 1
          },
          "addressType": {
            "maxLength": 255,
            "type": "string",
            "description": "Business account location address type name",
            "example": "HOME"
          },
          "processTime": {
            "minimum": 0,
            "type": "integer",
            "description": "Maximum process time allowed on a location in seconds",
            "format": "int64",
            "example": 600
          }
        },
        "description": "Defines the details of a business account location"
      },
      "BusinessAccountDepotWebResponse": {
        "required": [
          "depotId"
        ],
        "type": "object",
        "properties": {
          "depotId": {
            "maxLength": 50,
            "type": "string",
            "description": "Depot identifier.",
            "example": "AvO78iot3x"
          },
          "geoLocation": {
            "$ref": "#/components/schemas/GeoLocation"
          }
        },
        "description": "Defines the business account depot identifier and the geo coordinates of the first non-null business account location"
      }
    },
    "examples": {
      "UNSORTABLE_COLUMN": {
        "value": "{\n  \"message\" : \"The entered sorting column is not sortable in ElasticSearch (Column is not a @Keyword).\",\n  \"errorCode\" : \"UNSORTABLE_COLUMN\"\n}"
      },
      "REST_STATUS_ELASTICSEARCH_RELATED": {
        "value": "{\n  \"message\" : \"RestStatusException related to ElasticSearch\",\n  \"errorCode\" : \"REST_STATUS_ELASTICSEARCH_RELATED\"\n}"
      },
      "PROCESSING_ERROR": {
        "value": "{\n  \"message\" : \"Error while processing the data\",\n  \"errorCode\" : \"PROCESSING_ERROR\"\n}"
      },
      "ACCESS_DENIED": {
        "value": "{\n  \"message\" : \"Access to route has been denied.\",\n  \"errorCode\" : \"ACCESS_DENIED\"\n}"
      },
      "INTERNAL_SERVER_ERROR": {
        "value": "{\n  \"message\" : \"An error occurred\",\n  \"errorCode\" : \"INTERNAL_SERVER_ERROR\"\n}"
      },
      "BAD_REQUEST": {
        "value": "{\n  \"message\" : \"Bad request\",\n  \"errorCode\" : \"BAD_REQUEST\"\n}"
      },
      "NOT_FOUND": {
        "value": "{\n  \"message\" : \"Requested object not found\",\n  \"errorCode\" : \"NOT_FOUND\"\n}"
      },
      "UNAUTHORIZED": {
        "value": "{\n  \"message\" : \"Unauthorized\",\n  \"errorCode\" : \"UNAUTHORIZED\"\n}"
      },
      "FORBIDDEN": {
        "value": "{\n  \"message\" : \"Forbidden\",\n  \"errorCode\" : \"FORBIDDEN\"\n}"
      },
      "UNAUTHENTICATED": {
        "value": "{\n  \"message\" : \"Unauthenticated\",\n  \"errorCode\" : \"UNAUTHENTICATED\"\n}"
      },
      "METHOD_ARGUMENT_TYPE_MISMATCH": {
        "value": "{\n  \"message\" : \"Failed to convert value to required type\",\n  \"errorCode\" : \"METHOD_ARGUMENT_TYPE_MISMATCH\"\n}"
      },
      "MAXIMUM_UPLOAD_SIZE_EXCEEDED": {
        "value": "{\n  \"message\" : \"Maximum upload size exceeded\",\n  \"errorCode\" : \"MAXIMUM_UPLOAD_SIZE_EXCEEDED\"\n}"
      },
      "METHOD_NOT_ALLOWED": {
        "value": "{\n  \"message\" : \"Request method is not supported\",\n  \"errorCode\" : \"METHOD_NOT_ALLOWED\"\n}"
      },
      "MISSING_REQUEST_PARAMETER": {
        "value": "{\n  \"message\" : \"Required request parameter is not present\",\n  \"errorCode\" : \"MISSING_REQUEST_PARAMETER\"\n}"
      },
      "MISSING_REQUEST_PART": {
        "value": "{\n  \"message\" : \"Required request part is not present\",\n  \"errorCode\" : \"MISSING_REQUEST_PART\"\n}"
      },
      "UNSUPPORTED_MEDIA_TYPE": {
        "value": "{\n  \"message\" : \"Media type is not supported\",\n  \"errorCode\" : \"UNSUPPORTED_MEDIA_TYPE\"\n}"
      },
      "LIST_CONTAINS_NULL_VALUES": {
        "value": "{\n  \"message\" : \"List contains null values\",\n  \"errorCode\" : \"LIST_CONTAINS_NULL_VALUES\"\n}"
      },
      "REMOTE_CALL_FAILED": {
        "value": "{\n  \"message\" : \"Call to remote API returned an error response\",\n  \"errorCode\" : \"REMOTE_CALL_FAILED\"\n}"
      },
      "ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"Object already exists\",\n  \"errorCode\" : \"ALREADY_EXISTS\"\n}"
      },
      "SOFTLY_DELETED": {
        "value": "{\n  \"message\" : \"Object is softly deleted\",\n  \"errorCode\" : \"SOFTLY_DELETED\"\n}"
      },
      "WRONG_SORTING_COLUMN": {
        "value": "{\n  \"message\" : \"The entered sorting column name does not exist.\",\n  \"errorCode\" : \"WRONG_SORTING_COLUMN\"\n}"
      },
      "COULD_NOT_EXTRACT_ERROR_FROM_RESPONSE": {
        "value": "{\n  \"message\" : \"Could not extract error from the response.\",\n  \"errorCode\" : \"COULD_NOT_EXTRACT_ERROR_FROM_RESPONSE\"\n}"
      },
      "FAILED_TO_DELETE_TEMPORARY_FILE": {
        "value": "{\n  \"message\" : \"Failed to delete temporary file\",\n  \"errorCode\" : \"FAILED_TO_DELETE_TEMPORARY_FILE\"\n}"
      },
      "TENANT_ID_MUST_BE_SINGLETON": {
        "value": "{\n  \"message\" : \"Tenant ID must be a single value parameter\",\n  \"errorCode\" : \"TENANT_ID_MUST_BE_SINGLETON\"\n}"
      },
      "TENANT_ID_MUST_BE_INTEGER": {
        "value": "{\n  \"message\" : \"Tenant ID must be integer\",\n  \"errorCode\" : \"TENANT_ID_MUST_BE_INTEGER\"\n}"
      },
      "INVALID_PROPERTY": {
        "value": "{\n  \"message\" : \"Requested property is not valid.\",\n  \"errorCode\" : \"INVALID_PROPERTY\"\n}"
      },
      "INVALID_TOKEN": {
        "value": "{\n  \"message\" : \"Invalid token\",\n  \"errorCode\" : \"INVALID_TOKEN\"\n}"
      },
      "INVALID_KEY_ID": {
        "value": "{\n  \"message\" : \"Invalid key id claim\",\n  \"errorCode\" : \"INVALID_KEY_ID\"\n}"
      },
      "INVALID_AUDIENCE": {
        "value": "{\n  \"message\" : \"Invalid audience claim\",\n  \"errorCode\" : \"INVALID_AUDIENCE\"\n}"
      },
      "INVALID_SUBJECT": {
        "value": "{\n  \"message\" : \"Invalid subject claim\",\n  \"errorCode\" : \"INVALID_SUBJECT\"\n}"
      },
      "BAD_CERTIFICATE": {
        "value": "{\n  \"message\" : \"Certificate exception.\",\n  \"errorCode\" : \"BAD_CERTIFICATE\"\n}"
      },
      "COULD_NOT_GET_JWT": {
        "value": "{\n  \"message\" : \"\",\n  \"errorCode\" : \"COULD_NOT_GET_JWT\"\n}"
      },
      "JWT_TOKEN_EXPIRED": {
        "value": "{\n  \"message\" : \"JWT token has expired.\",\n  \"errorCode\" : \"JWT_TOKEN_EXPIRED\"\n}"
      },
      "INVALID_NONCE": {
        "value": "{\n  \"message\" : \"Invalid nonce claim\",\n  \"errorCode\" : \"INVALID_NONCE\"\n}"
      },
      "INVALID_OID": {
        "value": "{\n  \"message\" : \"Invalid oid claim\",\n  \"errorCode\" : \"INVALID_OID\"\n}"
      },
      "INVALID_EMAIL": {
        "value": "{\n  \"message\" : \"Invalid email value\",\n  \"errorCode\" : \"INVALID_EMAIL\"\n}"
      },
      "INVALID_NAME": {
        "value": "{\n  \"message\" : \"Invalid name value\",\n  \"errorCode\" : \"INVALID_NAME\"\n}"
      },
      "INVALID_TFP": {
        "value": "{\n  \"message\" : \"Invalid trust framework policy\",\n  \"errorCode\" : \"INVALID_TFP\"\n}"
      },
      "UNKNOWN_TOKEN": {
        "value": "{\n  \"message\" : \"Unknown token\",\n  \"errorCode\" : \"UNKNOWN_TOKEN\"\n}"
      },
      "UNSUPPORTED_TOKEN_VALIDATION": {
        "value": "{\n  \"message\" : \"Unsupported token validation error\",\n  \"errorCode\" : \"UNSUPPORTED_TOKEN_VALIDATION\"\n}"
      },
      "INVALID_ROLE": {
        "value": "{\n  \"message\" : \"Invalid role claim\",\n  \"errorCode\" : \"INVALID_ROLE\"\n}"
      },
      "FLEET_VEHICLE_IDENTIFICATION_NUMBER_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-VEHICLE] Vehicle with the provided vehicle identification number (VIN) does not exist.\",\n  \"errorCode\" : \"FLEET_VEHICLE_IDENTIFICATION_NUMBER_NOT_FOUND\"\n}"
      },
      "FLEET_VEHICLE_IDENTIFICATION_NUMBER_ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"[FLEET-VEHICLE] Vehicle with the same vehicle identification number (VIN) already exists.\",\n  \"errorCode\" : \"FLEET_VEHICLE_IDENTIFICATION_NUMBER_ALREADY_EXISTS\"\n}"
      },
      "TIME_ZONE_REQUIRED_WHEN_UPDATING_VEHICLE_HOURS": {
        "value": "{\n  \"message\" : \"[FLEET-VEHICLE] Time zone information is mandatory when updating vehicle working hours.\",\n  \"errorCode\" : \"TIME_ZONE_REQUIRED_WHEN_UPDATING_VEHICLE_HOURS\"\n}"
      },
      "END_DATE_IS_EARLIER_THAN_START_DATE": {
        "value": "{\n  \"message\" : \"[FLEET-WEB] dateTo is earlier than dateFrom.\",\n  \"errorCode\" : \"END_DATE_IS_EARLIER_THAN_START_DATE\"\n}"
      },
      "INVALID_DATE_TIME_RANGE": {
        "value": "{\n  \"message\" : \"[FLEET-WEB] Either both have some values or either no value.\",\n  \"errorCode\" : \"INVALID_DATE_TIME_RANGE\"\n}"
      },
      "JOB_PRODUCT_NOT_ASSIGNED_TO_ORIGIN_LOCATION": {
        "value": "{\n  \"message\" : \"[FLEET-ORCHESTRATOR] Product is not assigned to origin location\",\n  \"errorCode\" : \"JOB_PRODUCT_NOT_ASSIGNED_TO_ORIGIN_LOCATION\"\n}"
      },
      "INVALID_VEHICLE_BUSINESS_ACCOUNT": {
        "value": "{\n  \"message\" : \"[FLEET-WEB] Fleet vehicle's related business account, must have UID equal to depot ID.\",\n  \"errorCode\" : \"INVALID_VEHICLE_BUSINESS_ACCOUNT\"\n}"
      },
      "BUSINESS_ACCOUNT_WITHOUT_LOCATIONS": {
        "value": "{\n  \"message\" : \"[FLEET-WEB] Related business account has no assigned locations.\",\n  \"errorCode\" : \"BUSINESS_ACCOUNT_WITHOUT_LOCATIONS\"\n}"
      },
      "BUSINESS_ACCOUNT_LOCATIONS_WITHOUT_GEOLOCATION": {
        "value": "{\n  \"message\" : \"[FLEET-WEB] Related business account location(s) have no geolocation.\",\n  \"errorCode\" : \"BUSINESS_ACCOUNT_LOCATIONS_WITHOUT_GEOLOCATION\"\n}"
      },
      "FLEET_VEHICLES_NOT_COMMON_DEPOT": {
        "value": "{\n  \"message\" : \"[FLEET-WEB] Requested fleet vehicles do not have common Depots\",\n  \"errorCode\" : \"FLEET_VEHICLES_NOT_COMMON_DEPOT\"\n}"
      },
      "FLEET_JOBS_NOT_COMMON_DEPOT": {
        "value": "{\n  \"message\" : \"[FLEET-WEB] Requested fleet jobs do not have common Depots\",\n  \"errorCode\" : \"FLEET_JOBS_NOT_COMMON_DEPOT\"\n}"
      },
      "JOBS_AND_VEHICLES_NOT_COMMON_DEPOT": {
        "value": "{\n  \"message\" : \"[FLEET-WEB] Requested fleet vehicle(s) and job(s) do not have common Depot.\",\n  \"errorCode\" : \"JOBS_AND_VEHICLES_NOT_COMMON_DEPOT\"\n}"
      },
      "FLEET_JOB_WITH_INVALID_PRODUCT": {
        "value": "{\n  \"message\" : \"[FLEET-WEB] Non-existing product assigned to a fleet job\",\n  \"errorCode\" : \"FLEET_JOB_WITH_INVALID_PRODUCT\"\n}"
      },
      "INVALID_JOB_ORDER_SEQUENCE": {
        "value": "{\n  \"message\" : \"[CONTAMINATION-RULE] Job sequence must be in ascending order, and starting from 0.\",\n  \"errorCode\" : \"INVALID_JOB_ORDER_SEQUENCE\"\n}"
      },
      "VIN_MISS_MATCH": {
        "value": "{\n  \"message\" : \"[FLEET-ORCHESTRATOR] The number of requested vehicles and the number of retrieved ones is not the same, based on their VINs.\",\n  \"errorCode\" : \"VIN_MISS_MATCH\"\n}"
      },
      "JOB_MISS_MATCH": {
        "value": "{\n  \"message\" : \"[FLEET-ORCHESTRATOR] The number of requested jobs and the number of retrieved ones is not the same, based on their job UIDs.\",\n  \"errorCode\" : \"JOB_MISS_MATCH\"\n}"
      },
      "END_DATE_IS_BEFORE_START_DATE": {
        "value": "{\n  \"message\" : \"[FLEET-WEB] End-date can't be before start-date.\",\n  \"errorCode\" : \"END_DATE_IS_BEFORE_START_DATE\"\n}"
      },
      "REQUEST_CONTAINS_DUPLICATE_JOB_UIDS": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Request must not contain duplicate job UIDs\",\n  \"errorCode\" : \"REQUEST_CONTAINS_DUPLICATE_JOB_UIDS\"\n}"
      },
      "INVALID_UPDATED_TOUR_JOB_VISIT_ORDER": {
        "value": "{\n  \"message\" : \"[FLEET-WEB] Cannot modify existing tour job visit order of the jobs which are in status 'ENROUTE' or 'DELIVERED'\",\n  \"errorCode\" : \"INVALID_UPDATED_TOUR_JOB_VISIT_ORDER\"\n}"
      },
      "NEW_EXCEPTIONAL_OPENING_NOT_EQUAL_TO_OR_EXTENDING_EXISTING": {
        "value": "{\n  \"message\" : \"[FLEET-WEB] The new exceptional opening period(s) must be equal to or extend beyond the existing period (for that date) when active tours are present.\",\n  \"errorCode\" : \"NEW_EXCEPTIONAL_OPENING_NOT_EQUAL_TO_OR_EXTENDING_EXISTING\"\n}"
      },
      "NEW_EXCEPTIONAL_CLOSING_CANNOT_BLOCK_ACTIVE_TOURS": {
        "value": "{\n  \"message\" : \"[FLEET-WEB] The new exceptional closing period(s) must not block the dates where there are already active tours.\",\n  \"errorCode\" : \"NEW_EXCEPTIONAL_CLOSING_CANNOT_BLOCK_ACTIVE_TOURS\"\n}"
      },
      "NEW_REGULAR_HOURS_MUST_NOT_BLOCK_ACTIVE_TOURS": {
        "value": "{\n  \"message\" : \"[FLEET-WEB] The new regular hours must not have conflict with the active tours, or the existing exceptional openings.\",\n  \"errorCode\" : \"NEW_REGULAR_HOURS_MUST_NOT_BLOCK_ACTIVE_TOURS\"\n}"
      },
      "INVALID_TIME_WINDOW_DATA": {
        "value": "{\n  \"message\" : \"[FLEET-WEB] Corrupted data values for tour and/or job dates.\",\n  \"errorCode\" : \"INVALID_TIME_WINDOW_DATA\"\n}"
      },
      "INVALID_JOB_TYPE": {
        "value": "{\n  \"message\" : \"[FLEET-WEB] Fleet Job type is invalid.\",\n  \"errorCode\" : \"INVALID_JOB_TYPE\"\n}"
      },
      "INVALID_BUSINESS_ACCOUNT_TYPE": {
        "value": "{\n  \"message\" : \"[FLEET-WEB] Fleet business account type is invalid.\",\n  \"errorCode\" : \"INVALID_BUSINESS_ACCOUNT_TYPE\"\n}"
      },
      "TOUR_WITH_INVALID_FLEET_VEHICLE": {
        "value": "{\n  \"message\" : \"[FLEET-ORCHESTRATOR] Tour(s) assigned to not existing fleet vehicle(s).\",\n  \"errorCode\" : \"TOUR_WITH_INVALID_FLEET_VEHICLE\"\n}"
      },
      "ERROR_WHILE_PUSHING_NEW_TOURS_TO_NAVISION": {
        "value": "{\n  \"message\" : \"[FLEET-GATEWAY-NAVISION] Error occurred while pushing new tour(s) to Navision.\",\n  \"errorCode\" : \"ERROR_WHILE_PUSHING_NEW_TOURS_TO_NAVISION\"\n}"
      },
      "ERROR_WHILE_PUSHING_MODIFIED_TOUR_TO_NAVISION": {
        "value": "{\n  \"message\" : \"[FLEET-GATEWAY-NAVISION] Error occurred while pushing modified tour to Navision.\",\n  \"errorCode\" : \"ERROR_WHILE_PUSHING_MODIFIED_TOUR_TO_NAVISION\"\n}"
      },
      "ERROR_WHILE_PUSHING_DELETED_TOUR_TO_NAVISION": {
        "value": "{\n  \"message\" : \"[FLEET-GATEWAY-NAVISION] Error occurred while pushing deleted tour to Navision.\",\n  \"errorCode\" : \"ERROR_WHILE_PUSHING_DELETED_TOUR_TO_NAVISION\"\n}"
      },
      "REQUEST_CONTAINS_DUPLICATE_TOUR_UIDS": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Request must not contain duplicate tour UIDs\",\n  \"errorCode\" : \"REQUEST_CONTAINS_DUPLICATE_TOUR_UIDS\"\n}"
      },
      "PICK_UP_FROM_AND_DROP_OFF_FROM_DATES_NOT_IN_SAME_DAY": {
        "value": "{\n  \"message\" : \"[FLEET-GATEWAY-NAVISION] The pick-up-from and drop-off-from should be on the same date.\",\n  \"errorCode\" : \"PICK_UP_FROM_AND_DROP_OFF_FROM_DATES_NOT_IN_SAME_DAY\"\n}"
      },
      "PICK_UP_TILL_AND_DROP_OFF_TILL_DATES_NOT_IN_SAME_DAY": {
        "value": "{\n  \"message\" : \"[FLEET-GATEWAY-NAVISION] The pick-up-till and drop-off-till should be on the same date.\",\n  \"errorCode\" : \"PICK_UP_TILL_AND_DROP_OFF_TILL_DATES_NOT_IN_SAME_DAY\"\n}"
      },
      "DROP_OFF_FROM_DATE_IS_BEFORE_PICK_UP_FROM": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Drop-off-from date can't be before pick-up-from date.\",\n  \"errorCode\" : \"DROP_OFF_FROM_DATE_IS_BEFORE_PICK_UP_FROM\"\n}"
      },
      "DROP_OFF_TILL_DATE_IS_BEFORE_PICK_UP_TILL": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Drop-off-till date can't be before pick-up-till date.\",\n  \"errorCode\" : \"DROP_OFF_TILL_DATE_IS_BEFORE_PICK_UP_TILL\"\n}"
      },
      "PICK_UP_TILL_DATE_IS_BEFORE_OR_EQUAL_TO_PICK_UP_FROM": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Pick-up-till date can't be before or equal to pick-up-from date.\",\n  \"errorCode\" : \"PICK_UP_TILL_DATE_IS_BEFORE_OR_EQUAL_TO_PICK_UP_FROM\"\n}"
      },
      "DROP_OFF_TILL_DATE_IS_BEFORE_OR_EQUAL_TO_DROP_OFF_FROM": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Drop-off-till date can't be before or equal to drop-off-from date.\",\n  \"errorCode\" : \"DROP_OFF_TILL_DATE_IS_BEFORE_OR_EQUAL_TO_DROP_OFF_FROM\"\n}"
      },
      "INBOUND_JOB_DATES_NOT_IN_SAME_DAY": {
        "value": "{\n  \"message\" : \"[FLEET-GATEWAY-NAVISION] Inbound job dates should be all in the same day\",\n  \"errorCode\" : \"INBOUND_JOB_DATES_NOT_IN_SAME_DAY\"\n}"
      },
      "JOB_STILL_ENROUTE": {
        "value": "{\n  \"message\" : \"[FLEET-GATEWAY-NAVISION] Cannot complete a tour which contains ENROUTE job(s).\",\n  \"errorCode\" : \"JOB_STILL_ENROUTE\"\n}"
      },
      "ERROR_OCCURRED_DURING_JOB_SNAPSHOT_UPDATE": {
        "value": "{\n  \"message\" : \"[FLEET-GATEWAY-NAVISION] An error occurred during job snapshot update\",\n  \"errorCode\" : \"ERROR_OCCURRED_DURING_JOB_SNAPSHOT_UPDATE\"\n}"
      },
      "FINALIZED_JOB_CANNOT_BE_MODIFIED": {
        "value": "{\n  \"message\" : \"[FLEET-GATEWAY-NAVISION] Job cannot be modified when it is in a final state.\",\n  \"errorCode\" : \"FINALIZED_JOB_CANNOT_BE_MODIFIED\"\n}"
      },
      "JOB_LOCATION_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-GATEWAY-NAVISION] Job's requested location (origin or destination) could not be found.\",\n  \"errorCode\" : \"JOB_LOCATION_NOT_FOUND\"\n}"
      },
      "JOB_LOCATION_ADDRESS_TYPE_MODIFICATION_NOT_ALLOWED": {
        "value": "{\n  \"message\" : \"[FLEET-GATEWAY-NAVISION] Location address type for job origin and destination cannot be changed when assigned to an active tour.\",\n  \"errorCode\" : \"JOB_LOCATION_ADDRESS_TYPE_MODIFICATION_NOT_ALLOWED\"\n}"
      },
      "JOB_DEPOT_ID_MODIFICATION_NOT_ALLOWED": {
        "value": "{\n  \"message\" : \"[FLEET-GATEWAY-NAVISION] DepotId cannot be modified for a job assigned to an active tour.\",\n  \"errorCode\" : \"JOB_DEPOT_ID_MODIFICATION_NOT_ALLOWED\"\n}"
      },
      "JOB_ORIGIN_DESTINATION_DEPOT_ID_MODIFICATION_NOT_ALLOWED": {
        "value": "{\n  \"message\" : \"[FLEET-GATEWAY-NAVISION] New job's origin and/or destination location cannot be in different depotId.\",\n  \"errorCode\" : \"JOB_ORIGIN_DESTINATION_DEPOT_ID_MODIFICATION_NOT_ALLOWED\"\n}"
      },
      "FLEET_JOB_UID_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Job with the provided job UID does not exist.\",\n  \"errorCode\" : \"FLEET_JOB_UID_NOT_FOUND\"\n}"
      },
      "FLEET_JOB_UIDS_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] One or more job UIDs do not exist.\",\n  \"errorCode\" : \"FLEET_JOB_UIDS_NOT_FOUND\"\n}"
      },
      "FLEET_JOB_UID_ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Job with same Job UID already exists.\",\n  \"errorCode\" : \"FLEET_JOB_UID_ALREADY_EXISTS\"\n}"
      },
      "FLEET_JOB_NOT_ASSIGNED_TO_TOUR": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Fleet job not assigned to a fleet tour.\",\n  \"errorCode\" : \"FLEET_JOB_NOT_ASSIGNED_TO_TOUR\"\n}"
      },
      "FLEET_JOB_ALREADY_ASSIGNED_TO_TOUR": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Requested Job is already assigned to a tour.\",\n  \"errorCode\" : \"FLEET_JOB_ALREADY_ASSIGNED_TO_TOUR\"\n}"
      },
      "CANNOT_MODIFY_ASSIGNED_FLEET_JOB": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Job cannot be modified, while it is assigned to a tour.\",\n  \"errorCode\" : \"CANNOT_MODIFY_ASSIGNED_FLEET_JOB\"\n}"
      },
      "FLEET_JOB_TYPE_UID_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Job type with the provided job type UID does not exist.\",\n  \"errorCode\" : \"FLEET_JOB_TYPE_UID_NOT_FOUND\"\n}"
      },
      "FLEET_JOB_TYPE_NAME_ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Job type with same name already exists.\",\n  \"errorCode\" : \"FLEET_JOB_TYPE_NAME_ALREADY_EXISTS\"\n}"
      },
      "CANNOT_DELETE_ASSIGNED_FLEET_JOB_TYPE": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Job Type cannot be deleted, while it is assigned to Job(s).\",\n  \"errorCode\" : \"CANNOT_DELETE_ASSIGNED_FLEET_JOB_TYPE\"\n}"
      },
      "FLEET_TOUR_UID_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Tour with the provided tour UID does not exist.\",\n  \"errorCode\" : \"FLEET_TOUR_UID_NOT_FOUND\"\n}"
      },
      "FLEET_TOUR_UIDS_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] One or more tour UIDs do not exist.\",\n  \"errorCode\" : \"FLEET_TOUR_UIDS_NOT_FOUND\"\n}"
      },
      "CANNOT_DELETE_STARTED_FLEET_TOUR": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Tour cannot be deleted, when its status is not 'PLANNED'\",\n  \"errorCode\" : \"CANNOT_DELETE_STARTED_FLEET_TOUR\"\n}"
      },
      "CANNOT_MODIFY_FINISHED_FLEET_TOUR": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Tour can be updated only if it's in status 'PLANNED' or 'ENROUTE'\",\n  \"errorCode\" : \"CANNOT_MODIFY_FINISHED_FLEET_TOUR\"\n}"
      },
      "CANNOT_PATCH_DETAILS_OF_FINISHED_FLEET_TOUR": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Tour details (except notes) can be modified only if it's in status 'PLANNED' or 'ENROUTE'\",\n  \"errorCode\" : \"CANNOT_PATCH_DETAILS_OF_FINISHED_FLEET_TOUR\"\n}"
      },
      "VEHICLE_NOT_AVAILABLE_FOR_TOUR_PLANNING": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Specified vehicle(s) are not available for tour planning within the given tour timespan\",\n  \"errorCode\" : \"VEHICLE_NOT_AVAILABLE_FOR_TOUR_PLANNING\"\n}"
      },
      "UNSUITABLE_JOB_STATUS": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Failed to delete the job due to unsuitable job status\",\n  \"errorCode\" : \"UNSUITABLE_JOB_STATUS\"\n}"
      },
      "INVALID_JOB_STATUS": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Job status can't be updated considering the current job status\",\n  \"errorCode\" : \"INVALID_JOB_STATUS\"\n}"
      },
      "INVALID_OPTIMIZE_TOUR_GLOBAL_TIME_WINDOW": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Tour(s) can't be optimized more than 7 days in advance\",\n  \"errorCode\" : \"INVALID_OPTIMIZE_TOUR_GLOBAL_TIME_WINDOW\"\n}"
      },
      "OPTIMIZE_TOUR_JOBS_OUTSIDE_OF_GLOBAL_TIME_WINDOW": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] A tour containing job(s) outside of global time window can not be optimized\",\n  \"errorCode\" : \"OPTIMIZE_TOUR_JOBS_OUTSIDE_OF_GLOBAL_TIME_WINDOW\"\n}"
      },
      "END_DATETIME_IS_BEFORE_START_DATETIME": {
        "value": "{\n  \"message\" : \"[FLEET-ORCHESTRATOR] End-datetime can't be before start-datetime.\",\n  \"errorCode\" : \"END_DATETIME_IS_BEFORE_START_DATETIME\"\n}"
      },
      "INVALID_ROUTE_DATES": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Earliest route date must be before latest one, and both not null.\",\n  \"errorCode\" : \"INVALID_ROUTE_DATES\"\n}"
      },
      "END_DATE_NOT_EQUAL_TO_START_DATE": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] End-date must be equal to start-date\",\n  \"errorCode\" : \"END_DATE_NOT_EQUAL_TO_START_DATE\"\n}"
      },
      "INVALID_REQUEST_SEQUENCE": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Precedence counting must start from 0 and increase by 1.\",\n  \"errorCode\" : \"INVALID_REQUEST_SEQUENCE\"\n}"
      },
      "JOB_SNAPSHOT_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Fleet Job Snapshot with the specified job uid not found\",\n  \"errorCode\" : \"JOB_SNAPSHOT_NOT_FOUND\"\n}"
      },
      "INVALID_TOUR_STATUS": {
        "value": "{\n  \"message\" : \"[FLEET-ROUTE] Tour status can't be updated considering the current tour status\",\n  \"errorCode\" : \"INVALID_TOUR_STATUS\"\n}"
      },
      "INVALID_CONTAMINATION_RULE_TYPE": {
        "value": "{\n  \"message\" : \"[CONTAMINATION-RULE] Invalid contamination rule type\",\n  \"errorCode\" : \"INVALID_CONTAMINATION_RULE_TYPE\"\n}"
      },
      "DUPLICATE_JOB_UIDS": {
        "value": "{\n  \"message\" : \"[CONTAMINATION-RULE] Duplicate job UIDs provided in the request\",\n  \"errorCode\" : \"DUPLICATE_JOB_UIDS\"\n}"
      },
      "FAILED_TO_FETCH_VEHICLE_TOURS": {
        "value": "{\n  \"message\" : \"[CONTAMINATION-RULE] An error occurred while fetching vehicle tours\",\n  \"errorCode\" : \"FAILED_TO_FETCH_VEHICLE_TOURS\"\n}"
      },
      "JOB_WITH_INVALID_LOCATION": {
        "value": "{\n  \"message\" : \"[CONTAMINATION-RULE] Non-existing location assigned to job origin/destination\",\n  \"errorCode\" : \"JOB_WITH_INVALID_LOCATION\"\n}"
      },
      "JOB_WITH_INVALID_BUSINESS_ACCOUNT": {
        "value": "{\n  \"message\" : \"[FLEET-ORCHESTRATOR] Job(s) assigned to not existing business account(s).\",\n  \"errorCode\" : \"JOB_WITH_INVALID_BUSINESS_ACCOUNT\"\n}"
      },
      "TOUR_CANNOT_BE_OPTIMIZED": {
        "value": "{\n  \"message\" : \"[FLEET-ORCHESTRATOR] Existing tour can be optimized, only when its status is 'PLANNED' or 'ENROUTE'.\",\n  \"errorCode\" : \"TOUR_CANNOT_BE_OPTIMIZED\"\n}"
      },
      "FLEET_VEHICLE_WITH_INVALID_VEHICLE_CORE": {
        "value": "{\n  \"message\" : \"[FLEET-ORCHESTRATOR] Fleet vehicle(s) assigned to not existing core vehicles(s).\",\n  \"errorCode\" : \"FLEET_VEHICLE_WITH_INVALID_VEHICLE_CORE\"\n}"
      },
      "VIN_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-ORCHESTRATOR] Vehicle identification number not found.\",\n  \"errorCode\" : \"VIN_NOT_FOUND\"\n}"
      },
      "VEHICLE_CORE_UUID_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-ORCHESTRATOR] Vehicle core UUID not found.\",\n  \"errorCode\" : \"VEHICLE_CORE_UUID_NOT_FOUND\"\n}"
      },
      "VEHICLES_CORE_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-ORCHESTRATOR] Vehicle(s) in core not found.\",\n  \"errorCode\" : \"VEHICLES_CORE_NOT_FOUND\"\n}"
      },
      "VEHICLE_IS_ASSIGNED_TO_A_TOUR": {
        "value": "{\n  \"message\" : \"[FLEET-ORCHESTRATOR] The fleet vehicle cannot be modified/deleted since it is part of a tour.\",\n  \"errorCode\" : \"VEHICLE_IS_ASSIGNED_TO_A_TOUR\"\n}"
      },
      "CANNOT_PERMANENTLY_DELETE_VEHICLE_WITH_ASSIGNED_TOURS": {
        "value": "{\n  \"message\" : \"[FLEET-ORCHESTRATOR] Fleet vehicle cannot be hard-delete when assigned to tours (despite the status of them).\",\n  \"errorCode\" : \"CANNOT_PERMANENTLY_DELETE_VEHICLE_WITH_ASSIGNED_TOURS\"\n}"
      },
      "ORIGIN_LOCATION_DOES_NOT_HAVE_ASSIGNED_PRODUCTS": {
        "value": "{\n  \"message\" : \"[FLEET-ORCHESTRATOR] The origin location doesn't have products assigned to it\",\n  \"errorCode\" : \"ORIGIN_LOCATION_DOES_NOT_HAVE_ASSIGNED_PRODUCTS\"\n}"
      },
      "LOCATIONS_ASSOCIATED_WITH_JOBS_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-ORCHESTRATOR] One or more locations associated with fleet job(s) not found\",\n  \"errorCode\" : \"LOCATIONS_ASSOCIATED_WITH_JOBS_NOT_FOUND\"\n}"
      },
      "PRODUCTS_ASSOCIATED_WITH_JOBS_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-ORCHESTRATOR] One or more products associated with fleet job(s) not found\",\n  \"errorCode\" : \"PRODUCTS_ASSOCIATED_WITH_JOBS_NOT_FOUND\"\n}"
      },
      "LOCATIONS_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-ORCHESTRATOR] Specified origin/destination location(s) not found\",\n  \"errorCode\" : \"LOCATIONS_NOT_FOUND\"\n}"
      },
      "INVALID_JOB_LOCATIONS": {
        "value": "{\n  \"message\" : \"[FLEET-ORCHESTRATOR] Job origin and destination need to contain different account location UIDs\",\n  \"errorCode\" : \"INVALID_JOB_LOCATIONS\"\n}"
      },
      "AT_LEAST_ONE_PRODUCT_NOT_ASSIGNED_TO_LOCATION": {
        "value": "{\n  \"message\" : \"[FLEET-ORCHESTRATOR] At least one product is not assigned to the origin location\",\n  \"errorCode\" : \"AT_LEAST_ONE_PRODUCT_NOT_ASSIGNED_TO_LOCATION\"\n}"
      },
      "GEO_LOCATION_NOT_ASSIGNED_TO_JOB": {
        "value": "{\n  \"message\" : \"[FLEET-ORCHESTRATOR] Specified Job has not assigned GeoLocations(Latitude-Longitude)\",\n  \"errorCode\" : \"GEO_LOCATION_NOT_ASSIGNED_TO_JOB\"\n}"
      },
      "AT_LEAST_ONE_PRODUCT_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-ORCHESTRATOR] At least one product not found\",\n  \"errorCode\" : \"AT_LEAST_ONE_PRODUCT_NOT_FOUND\"\n}"
      },
      "CANNOT_PATCH_DETAILS_OF_PLANNED_VEHICLE": {
        "value": "{\n  \"message\" : \"[FLEET-ORCHESTRATOR] Cannot modify vehicleCoreUuid/depotId/status/coordinates/EVData when vehicle is assigned to active tour(s).\",\n  \"errorCode\" : \"CANNOT_PATCH_DETAILS_OF_PLANNED_VEHICLE\"\n}"
      },
      "DUPLICATE_LOCATION_RISK": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Specified location risk already exists\",\n  \"errorCode\" : \"DUPLICATE_LOCATION_RISK\"\n}"
      },
      "DUPLICATE_PRODUCT_NAME": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Specified product already exists\",\n  \"errorCode\" : \"DUPLICATE_PRODUCT_NAME\"\n}"
      },
      "DUPLICATE_UNIT_OF_MEASURE": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Specified unit of measure already exists\",\n  \"errorCode\" : \"DUPLICATE_UNIT_OF_MEASURE\"\n}"
      },
      "DUPLICATE_LOCATION_STATUS": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Specified location status already exists\",\n  \"errorCode\" : \"DUPLICATE_LOCATION_STATUS\"\n}"
      },
      "DUPLICATE_LOCATION_TYPE": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Specified location type already exists\",\n  \"errorCode\" : \"DUPLICATE_LOCATION_TYPE\"\n}"
      },
      "DUPLICATE_BUSINESS_ACCOUNT_TYPE": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Specified business account type already exists\",\n  \"errorCode\" : \"DUPLICATE_BUSINESS_ACCOUNT_TYPE\"\n}"
      },
      "DUPLICATE_LOCATION_ADDRESS_TYPE": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Specified location address type already exists\",\n  \"errorCode\" : \"DUPLICATE_LOCATION_ADDRESS_TYPE\"\n}"
      },
      "LOCATION_RISK_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Location risk with the specified uid not found\",\n  \"errorCode\" : \"LOCATION_RISK_NOT_FOUND\"\n}"
      },
      "BUSINESS_ACCOUNT_TYPE_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Business account type with the specified uid not found\",\n  \"errorCode\" : \"BUSINESS_ACCOUNT_TYPE_NOT_FOUND\"\n}"
      },
      "BUSINESS_ACCOUNT_TYPE_ASSIGNED_TO_BUSINESS_ACCOUNT": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Business account type is assigned to at least one business account\",\n  \"errorCode\" : \"BUSINESS_ACCOUNT_TYPE_ASSIGNED_TO_BUSINESS_ACCOUNT\"\n}"
      },
      "LOCATION_ADDRESS_TYPE_ASSIGNED_TO_LOCATION": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Location address type is assigned to at least one location\",\n  \"errorCode\" : \"LOCATION_ADDRESS_TYPE_ASSIGNED_TO_LOCATION\"\n}"
      },
      "LOCATION_RISK_ASSIGNED_TO_LOCATION": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Location risk is assigned to at least one location\",\n  \"errorCode\" : \"LOCATION_RISK_ASSIGNED_TO_LOCATION\"\n}"
      },
      "LOCATION_STATUS_ASSIGNED_TO_LOCATION": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Location status is assigned to at least one location\",\n  \"errorCode\" : \"LOCATION_STATUS_ASSIGNED_TO_LOCATION\"\n}"
      },
      "LOCATION_TYPE_ASSIGNED_TO_LOCATION": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Location type is assigned to at least one location\",\n  \"errorCode\" : \"LOCATION_TYPE_ASSIGNED_TO_LOCATION\"\n}"
      },
      "PRODUCT_ASSIGNED_TO_LOCATION": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Product is assigned to at least one location\",\n  \"errorCode\" : \"PRODUCT_ASSIGNED_TO_LOCATION\"\n}"
      },
      "UNIT_OF_MEASURE_ASSIGNED_TO_PRODUCT": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Unit of measure is assigned to at least one location-product relation\",\n  \"errorCode\" : \"UNIT_OF_MEASURE_ASSIGNED_TO_PRODUCT\"\n}"
      },
      "BUSINESS_ACCOUNT_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Business account with the specified uid not found\",\n  \"errorCode\" : \"BUSINESS_ACCOUNT_NOT_FOUND\"\n}"
      },
      "BUSINESS_ACCOUNT_ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Business account with the specified uid already exists\",\n  \"errorCode\" : \"BUSINESS_ACCOUNT_ALREADY_EXISTS\"\n}"
      },
      "LOCATION_STATUS_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Location status with the specified uid not found\",\n  \"errorCode\" : \"LOCATION_STATUS_NOT_FOUND\"\n}"
      },
      "LOCATION_ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Business account location with the specified uid already exists\",\n  \"errorCode\" : \"LOCATION_ALREADY_EXISTS\"\n}"
      },
      "LOCATION_TYPE_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Location type with the specified uid not found\",\n  \"errorCode\" : \"LOCATION_TYPE_NOT_FOUND\"\n}"
      },
      "PRODUCT_NOT_ASSIGNED_TO_LOCATION": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Product with the specified unit of measure is not assigned to a location\",\n  \"errorCode\" : \"PRODUCT_NOT_ASSIGNED_TO_LOCATION\"\n}"
      },
      "LOCATION_ADDRESS_TYPE_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Location address type with the specified uid not found\",\n  \"errorCode\" : \"LOCATION_ADDRESS_TYPE_NOT_FOUND\"\n}"
      },
      "UNIT_OF_MEASURE_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Unit of measure with the specified uid not found\",\n  \"errorCode\" : \"UNIT_OF_MEASURE_NOT_FOUND\"\n}"
      },
      "PRODUCT_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Product with the specified uid not found\",\n  \"errorCode\" : \"PRODUCT_NOT_FOUND\"\n}"
      },
      "LOCATION_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Business account location with the specified uid not found\",\n  \"errorCode\" : \"LOCATION_NOT_FOUND\"\n}"
      },
      "PRODUCT_ALREADY_ASSIGNED_TO_LOCATION": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Product with the specified unit of measure already assigned to a location\",\n  \"errorCode\" : \"PRODUCT_ALREADY_ASSIGNED_TO_LOCATION\"\n}"
      },
      "INVALID_PENALTY_RULES_REQUEST": {
        "value": "{\n  \"message\" : \"[FLEET-BUSINESS-ACCOUNT] Penalty rules request needs to contain at least one non-null field\",\n  \"errorCode\" : \"INVALID_PENALTY_RULES_REQUEST\"\n}"
      },
      "USER_NOT_FOUND": {
        "value": "{\n  \"message\" : \"The entered user does not exist.\",\n  \"errorCode\" : \"USER_NOT_FOUND\"\n}"
      },
      "USER_ALREADY_HAS_ACCESS": {
        "value": "{\n  \"message\" : \"The user already has access\",\n  \"errorCode\" : \"USER_ALREADY_HAS_ACCESS\"\n}"
      },
      "USER_ACCESS_REQUEST_NOT_FOUND": {
        "value": "{\n  \"message\" : \"The entered user access request does not exist.\",\n  \"errorCode\" : \"USER_ACCESS_REQUEST_NOT_FOUND\"\n}"
      },
      "INVALID_BEGIN_END_TIME": {
        "value": "{\n  \"message\" : \"period_end cannot be equal to period_begin, or before this.\",\n  \"errorCode\" : \"INVALID_BEGIN_END_TIME\"\n}"
      },
      "INVALID_HOURS": {
        "value": "{\n  \"message\" : \"regularHours field must not be empty when twentyFourSeven=false (and vice versa).\",\n  \"errorCode\" : \"INVALID_HOURS\"\n}"
      },
      "DUPLICATE_WEEKDAYS": {
        "value": "{\n  \"message\" : \"list of regular hours cannot contain duplicate weekdays.\",\n  \"errorCode\" : \"DUPLICATE_WEEKDAYS\"\n}"
      },
      "INVALID_EXCEPTIONAL_PERIOD_BEGIN_END_DATE": {
        "value": "{\n  \"message\" : \"Date of the period_begin needs to be equal to the date of period_end.\",\n  \"errorCode\" : \"INVALID_EXCEPTIONAL_PERIOD_BEGIN_END_DATE\"\n}"
      },
      "EXCEPTIONAL_PERIOD_DATES_OVERLAP": {
        "value": "{\n  \"message\" : \"Exceptional period dates cannot overlap.\",\n  \"errorCode\" : \"EXCEPTIONAL_PERIOD_DATES_OVERLAP\"\n}"
      },
      "MORE_THAN_ONE_EXCEPTIONAL_PERIOD_WITHIN_SINGLE_DATE": {
        "value": "{\n  \"message\" : \"Single date cannot contain more than one exceptional period.\",\n  \"errorCode\" : \"MORE_THAN_ONE_EXCEPTIONAL_PERIOD_WITHIN_SINGLE_DATE\"\n}"
      },
      "UNKNOWN_TIME_ZONE_ID": {
        "value": "{\n  \"message\" : \"Unknown time zone id\",\n  \"errorCode\" : \"UNKNOWN_TIME_ZONE_ID\"\n}"
      },
      "NOT_A_DIRECTORY": {
        "value": "{\n  \"message\" : \"Not a directory\",\n  \"errorCode\" : \"NOT_A_DIRECTORY\"\n}"
      },
      "VEHICLE_IMAGE_DIR_NOT_FOUND": {
        "value": "{\n  \"message\" : \"Vehicle image directory not found\",\n  \"errorCode\" : \"VEHICLE_IMAGE_DIR_NOT_FOUND\"\n}"
      },
      "FAILED_TO_STORE_VEHICLE_IMAGE": {
        "value": "{\n  \"message\" : \"Failed to store vehicle image\",\n  \"errorCode\" : \"FAILED_TO_STORE_VEHICLE_IMAGE\"\n}"
      },
      "EMPTY_IMAGE": {
        "value": "{\n  \"message\" : \"Empty image\",\n  \"errorCode\" : \"EMPTY_IMAGE\"\n}"
      },
      "CAN_NOT_PROCESS_IMAGE": {
        "value": "{\n  \"message\" : \"Can't process image\",\n  \"errorCode\" : \"CAN_NOT_PROCESS_IMAGE\"\n}"
      },
      "VEHICLE_NOT_FOUND": {
        "value": "{\n  \"message\" : \"The requested vehicle entry was not found\",\n  \"errorCode\" : \"VEHICLE_NOT_FOUND\"\n}"
      },
      "ELECTRIC_VEHICLE_NOT_FOUND": {
        "value": "{\n  \"message\" : \"The requested vehicle entry was not found or the vehicle is not an electric vehicle\",\n  \"errorCode\" : \"ELECTRIC_VEHICLE_NOT_FOUND\"\n}"
      },
      "VEHICLE_BRAND_NOT_FOUND": {
        "value": "{\n  \"message\" : \"Vehicle brand not found\",\n  \"errorCode\" : \"VEHICLE_BRAND_NOT_FOUND\"\n}"
      },
      "CHARGING_CURVE_NOT_FOUND": {
        "value": "{\n  \"message\" : \"Charging curve not found\",\n  \"errorCode\" : \"CHARGING_CURVE_NOT_FOUND\"\n}"
      },
      "INCORRECT_TENANT_ID": {
        "value": "{\n  \"message\" : \"Not allowed to add/update/fetch the resource with the provided tenant id\",\n  \"errorCode\" : \"INCORRECT_TENANT_ID\"\n}"
      },
      "BRAND_AND_VEHICLE_TENANTS_MISMATCH": {
        "value": "{\n  \"message\" : \"Vehicle and brand tenant ids don't match\",\n  \"errorCode\" : \"BRAND_AND_VEHICLE_TENANTS_MISMATCH\"\n}"
      },
      "IMAGE_NOT_FOUND": {
        "value": "{\n  \"message\" : \"Image not found\",\n  \"errorCode\" : \"IMAGE_NOT_FOUND\"\n}"
      },
      "FAILED_TO_READ_IMAGE": {
        "value": "{\n  \"message\" : \"Failed to read image\",\n  \"errorCode\" : \"FAILED_TO_READ_IMAGE\"\n}"
      },
      "INVALID_IMAGE_FILE_TYPE": {
        "value": "{\n  \"message\" : \"File has an invalid extension\",\n  \"errorCode\" : \"INVALID_IMAGE_FILE_TYPE\"\n}"
      },
      "VEHICLE_VARIANT_IMAGE_NOT_FOUND": {
        "value": "{\n  \"message\" : \"Vehicle doesn't have a variant image\",\n  \"errorCode\" : \"VEHICLE_VARIANT_IMAGE_NOT_FOUND\"\n}"
      },
      "FAILED_TO_DELETE_IMAGE": {
        "value": "{\n  \"message\" : \"Failed to delete the image\",\n  \"errorCode\" : \"FAILED_TO_DELETE_IMAGE\"\n}"
      },
      "UNSUPPORTED_IMAGE_FORMAT": {
        "value": "{\n  \"message\" : \"Image format is invalid or unsupported\",\n  \"errorCode\" : \"UNSUPPORTED_IMAGE_FORMAT\"\n}"
      },
      "IMAGE_FETCHING_ERROR": {
        "value": "{\n  \"message\" : \"Error occured during fetching the image\",\n  \"errorCode\" : \"IMAGE_FETCHING_ERROR\"\n}"
      },
      "INVALID_CUSTOMER_KEY": {
        "value": "{\n  \"message\" : \"Invalid customer key\",\n  \"errorCode\" : \"INVALID_CUSTOMER_KEY\"\n}"
      },
      "FILE_IS_NOT_IMAGE": {
        "value": "{\n  \"message\" : \"The file isn't image.\",\n  \"errorCode\" : \"FILE_IS_NOT_IMAGE\"\n}"
      },
      "FORMAT_NOT_SUPPORTED": {
        "value": "{\n  \"message\" : \"The logo format not supported\",\n  \"errorCode\" : \"FORMAT_NOT_SUPPORTED\"\n}"
      },
      "EXTENSION_MISSING": {
        "value": "{\n  \"message\" : \"The logo extension missing\",\n  \"errorCode\" : \"EXTENSION_MISSING\"\n}"
      }
    },
    "headers": {
      "api-category": {
        "description": "Fleet Services",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "display-name": {
        "description": "Fleet Web",
        "required": false,
        "schema": {
          "type": "string"
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "Bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}