{
  "openapi": "3.0.1",
  "info": {
    "title": "cpo-csms-web-backend-service",
    "version": "v1"
  },
  "servers": [
    {
      "url": "https://baseurl/cpo-csms-web/v1",
      "description": "Generated server url"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "Mobility Token",
      "description": "Mobility token provided by the Central System to the Charging Station for the purpose of identifying the initiator of charging activity"
    }
  ],
  "paths": {
    "/users/{userId}": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update user",
        "description": "Activates or deactivates an user account and assigns a role",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCsmsUserDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - no credentials provided"
          },
          "403": {
            "description": "Forbidden - User cannot change his own role"
          },
          "404": {
            "description": "Provider ID not found"
          }
        }
      }
    },
    "/tokens/{uid}": {
      "get": {
        "tags": [
          "Mobility Token"
        ],
        "summary": "Get a mobility token",
        "description": "Returns a mobility token with the specific UID. If User is not SUPER_ADMIN, then filter by Provider ID is applied.",
        "operationId": "getTokenByUid",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Mobility token not found"
          }
        }
      },
      "put": {
        "tags": [
          "Mobility Token"
        ],
        "summary": "Update a mobility token",
        "description": "Update an existing mobility token, filtered by Provider ID.",
        "operationId": "updateToken",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CsmsTokenUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Expiry date exceeded max value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Mobility token not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Mobility Token"
        ],
        "summary": "Delete a mobility token",
        "description": "Delete an existing mobility token, filtered by Provider ID.",
        "operationId": "deleteToken",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Mobility token not found"
          },
          "409": {
            "description": "Mobility token is softly deleted"
          }
        }
      }
    },
    "/tariffs/{id}": {
      "get": {
        "tags": [
          "Tariff"
        ],
        "summary": "Get one Tariff",
        "description": "Returns a Tariff for SUPER_ADMIN, or Tariff filtered by User's Provider ID for CPO roles.",
        "operationId": "getTariffById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tariff"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not SUPER ADMIN and has no Provider ID",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Tariff"
                }
              }
            }
          },
          "404": {
            "description": "Tariff Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "Tariff"
        ],
        "summary": "Update Tariff",
        "description": "Update a Tariff by Tariff ID. Filter for Provider ID is applied. If the tariff is assigned to a connector, it can not be updated when the start/end date time  and tariff restrictions are changed.",
        "operationId": "updateTariffById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CsmsTariffUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tariff"
                }
              }
            }
          },
          "400": {
            "description": "Request's restrictions are not met"
          },
          "403": {
            "description": "Forbidden - User has no Provider ID"
          },
          "404": {
            "description": "Tariff Not Found"
          }
        }
      }
    },
    "/providers/{providerName}": {
      "get": {
        "tags": [
          "Provider"
        ],
        "summary": "Get Provider by provider name",
        "description": "Returns a Provider that matches with the provider name",
        "operationId": "getProviderByProviderName",
        "parameters": [
          {
            "name": "providerName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CsmsProviderDto"
                }
              }
            }
          },
          "404": {
            "description": "Provider Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "Provider"
        ],
        "summary": "Update Provider",
        "description": "Update a Provider and save it to database",
        "operationId": "updateProviderByProviderName",
        "parameters": [
          {
            "name": "providerName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CsmsProviderUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CsmsProviderDto"
                }
              }
            }
          },
          "404": {
            "description": "Provider Not Found"
          },
          "409": {
            "description": "Provider name already exists"
          }
        }
      },
      "delete": {
        "tags": [
          "Provider"
        ],
        "summary": "Delete Provider by provider name",
        "description": "Delete a Provider that matches with the provider name",
        "operationId": "deleteProviderByProviderName",
        "parameters": [
          {
            "name": "providerName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageDto"
                }
              }
            }
          },
          "404": {
            "description": "Cannot delete provider with assigned users."
          }
        }
      }
    },
    "/owners/{ownerId}": {
      "get": {
        "tags": [
          "Owner"
        ],
        "summary": "Get owner's users and locations ",
        "description": "Get users and locations per owner",
        "operationId": "getOwnerUsersAndLocations",
        "parameters": [
          {
            "name": "ownerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnerUserLocation"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User has no Provider ID"
          },
          "404": {
            "description": "Owner entity not found"
          }
        }
      },
      "put": {
        "tags": [
          "Owner"
        ],
        "summary": "Update Owner entity",
        "description": "Update Owner entity. ",
        "operationId": "updateOwner",
        "parameters": [
          {
            "name": "ownerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OwnerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Owner"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden - User has no provider"
          },
          "404": {
            "description": "Owner id not found"
          },
          "409": {
            "description": "Owner email exists"
          }
        }
      }
    },
    "/owner-users/{ownerId}": {
      "put": {
        "tags": [
          "Owner's Users"
        ],
        "summary": "Unassign User from Owner",
        "description": "Unassign a User from an Owner entity.",
        "operationId": "unassignUserFromOwner",
        "parameters": [
          {
            "name": "ownerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden - User has no Provider ID"
          },
          "404": {
            "description": "User Not Found for this Owner"
          }
        }
      },
      "post": {
        "tags": [
          "Owner's Users"
        ],
        "summary": "Assign User to Owner",
        "description": "Assigns a User of role 'Owner', to an Owner entity.",
        "operationId": "assignUserToOwner",
        "parameters": [
          {
            "name": "ownerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageDto"
                }
              }
            }
          },
          "400": {
            "description": "Requested User has invalid role"
          },
          "403": {
            "description": "Forbidden - User has no Provider ID"
          },
          "404": {
            "description": "User Not Found"
          },
          "409": {
            "description": "User already belongs to an Owner"
          }
        }
      }
    },
    "/owner-locations/{ownerId}/{locationId}": {
      "put": {
        "tags": [
          "Owner's Locations"
        ],
        "summary": "Create/Update Location Owner relation",
        "description": "Check if owner-location relation exists, if true then overwrite the relation else create a new one",
        "operationId": "createOrUpdateOwnerLocation",
        "parameters": [
          {
            "name": "ownerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnerLocationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not found - Owner id not found"
          },
          "409": {
            "description": "Conflict - Owner ID relation already exists."
          }
        }
      }
    },
    "/locations/{locationId}": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Get one Location and its Charging Station Groups",
        "description": "Returns the requested Location  with its Charging Station Group(s), filter by User's Provider ID for CPO_ADMIN & CPO_USER. If User Role  is SUPER_ADMIN, then no filter is applied.",
        "operationId": "getLocationById",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnerNameLocationChargingStationGroups"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not SUPER ADMIN and has no Provider ID",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OwnerNameLocationChargingStationGroups"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Locations"
        ],
        "summary": "Update location",
        "description": "Update a location and save it to database",
        "operationId": "updateLocation",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OwnerLocationUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargingStationOwnerLocation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Not valid period begin and end time"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found - Owner id not found"
          },
          "409": {
            "description": "Conflict - Owner ID relation already exists."
          }
        }
      },
      "delete": {
        "tags": [
          "Locations"
        ],
        "summary": "Delete a location",
        "description": "Delete location if there are no charging stations connected to it and the charging station groups inside the locations",
        "operationId": "removeLocation",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargingStationLocation"
                }
              }
            }
          },
          "404": {
            "description": "Requested Location was not found, for this Provider ID."
          },
          "409": {
            "description": "Conflict - Group has connected Charging Stations"
          }
        }
      }
    },
    "/evses/{evseId}/connector/{connectorId}/unassign": {
      "put": {
        "tags": [
          "EVSEs"
        ],
        "summary": "Unassigns EVSE connector's tariff ids",
        "description": "Unassigns the tariff ids of the connector",
        "operationId": "unassignTariffIdFromConnector",
        "parameters": [
          {
            "name": "evseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connectorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Evse"
                }
              }
            }
          },
          "400": {
            "description": "EVSE with the provided Connector_Id does not exist."
          },
          "404": {
            "description": "Tariffs Not Found"
          }
        }
      }
    },
    "/evses/{evseId}/connector/{connectorId}/assign": {
      "put": {
        "tags": [
          "EVSEs"
        ],
        "summary": "Assigns EVSE connector's tariff ids",
        "description": "Assigns the tariff ids on the connector",
        "operationId": "updateTariffIdOnConnector",
        "parameters": [
          {
            "name": "evseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connectorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Evse"
                }
              }
            }
          },
          "400": {
            "description": "EVSE with the provided Connector_Id does not exist."
          },
          "404": {
            "description": "Tariffs not Found"
          },
          "409": {
            "description": "Tariff id already exists inside the connector"
          }
        }
      }
    },
    "/chargingstations/{identityKey}": {
      "get": {
        "tags": [
          "Charging Stations"
        ],
        "summary": "Get Charging Station",
        "description": "Returns Charging Station with the specified identity key. Filter by Provider ID is applied, if User is not SUPER_ADMIN.",
        "operationId": "getChargingStation",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CsmsChargingStation"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Charging Station not found"
          }
        }
      },
      "put": {
        "tags": [
          "Charging Stations"
        ],
        "summary": "Update Charging Station",
        "description": "Update Charging Station, filtered by Provider ID.",
        "operationId": "updateChargingStation",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CsmsChargingStationUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CsmsChargingStation"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Charging Station not found"
          },
          "409": {
            "description": "Identity Key already exists."
          }
        }
      },
      "delete": {
        "tags": [
          "Charging Stations"
        ],
        "summary": "Delete Charging Station",
        "description": "Delete Charging Station with the specific identityKey, filtered by Provider ID.",
        "operationId": "deleteChargingStation",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Charging Station not found"
          }
        }
      }
    },
    "/chargingstations/{chargingStationId}/evses/{evseId}": {
      "get": {
        "tags": [
          "EVSEs"
        ],
        "summary": "Get EVSE",
        "description": "Returns EVSE with the specific EVSE ID",
        "operationId": "getEvseByIdAndProvider",
        "parameters": [
          {
            "name": "evseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chargingStationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Evse"
                }
              }
            }
          },
          "404": {
            "description": "EVSE not found"
          }
        }
      },
      "put": {
        "tags": [
          "EVSEs"
        ],
        "summary": "Update EVSE",
        "description": "Returns the updated EVSE",
        "operationId": "updateEvse",
        "parameters": [
          {
            "name": "evseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chargingStationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvseUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Evse"
                }
              }
            }
          },
          "404": {
            "description": "Tariffs Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "EVSEs"
        ],
        "summary": "Delete EVSE",
        "description": "Delete EVSE with the specific EVSE Id",
        "operationId": "deleteEvse",
        "parameters": [
          {
            "name": "evseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chargingStationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Evse"
                }
              }
            }
          },
          "404": {
            "description": "EVSE not found"
          }
        }
      }
    },
    "/chargingstation-groups/{chargingStationGroupUuid}": {
      "put": {
        "tags": [
          "Charging Station Groups"
        ],
        "summary": "Update a Charging Station Group",
        "description": "Updates Charging Station Group Name. Must be unique per Location. Filter for Provider ID is applied.",
        "operationId": "updateChargingStationGroup",
        "parameters": [
          {
            "name": "chargingStationGroupUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChargingStationGroupUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargingStationGroup"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden - User has no Provider ID"
          },
          "404": {
            "description": "Charging Station Group not found"
          },
          "409": {
            "description": "Charging Station Group name not unique"
          }
        }
      },
      "delete": {
        "tags": [
          "Charging Station Groups"
        ],
        "summary": "Delete Charging Station Group",
        "description": "Delete a Charging Station Group by its UUID, filtered by ProviderID.",
        "operationId": "deleteChargingStationGroup",
        "parameters": [
          {
            "name": "chargingStationGroupUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChargingStationGroup"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Location must have at least one Group"
          },
          "403": {
            "description": "Forbidden - User has no Provider ID"
          },
          "404": {
            "description": "Charging Station Group Not Found"
          },
          "409": {
            "description": "Conflict - Group has connected Charging Stations"
          }
        }
      }
    },
    "/broker/csms/{uuid}": {
      "get": {
        "tags": [
          "CSMS"
        ],
        "summary": "Get one specific CSMS",
        "description": "Get one specific CSMS, searched by its uuid",
        "operationId": "getCsms",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Csms"
                }
              }
            }
          },
          "404": {
            "description": "CSMS not found"
          }
        }
      },
      "put": {
        "tags": [
          "CSMS"
        ],
        "summary": "Update a CSMS",
        "description": "Update an existing CSMS",
        "operationId": "updateCsms",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The UUID of the CSMS",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CsmsUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Csms"
                }
              }
            }
          },
          "400": {
            "description": "CSMS cannot be updated. Default CSMS cannot change to not default"
          },
          "404": {
            "description": "CSMS not found"
          },
          "409": {
            "description": "CSMS cannot be updated. Provided display name is not unique"
          }
        }
      },
      "delete": {
        "tags": [
          "CSMS"
        ],
        "summary": "Delete a CSMS",
        "description": "Delete CSMS if there are no charging stations connected to it and if it is not  the default one",
        "operationId": "deleteCsms",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The UUID of the CSMS",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageDto"
                }
              }
            }
          },
          "400": {
            "description": "Default CSMS can be deleted only when it is the only one that exists and with no connected CS to it"
          },
          "404": {
            "description": "CSMS not found"
          },
          "409": {
            "description": "CSMS cannot be deleted, when there are connected charging stations to it"
          }
        }
      }
    },
    "/users/me/access": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Request access",
        "description": "Requests access for the current user",
        "operationId": "requestAccess",
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - no credentials provided"
          },
          "404": {
            "description": "The user account was not found"
          },
          "409": {
            "description": "The user already requested access before"
          }
        }
      }
    },
    "/tokens": {
      "get": {
        "tags": [
          "Mobility Token"
        ],
        "summary": "Get all mobility tokens",
        "description": "Returns a list of all mobility tokens. If User is not SUPER_ADMIN, then filter by Provider ID is applied.",
        "operationId": "getAllTokens",
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Token"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Mobility Token"
        ],
        "summary": "Create a mobility token",
        "description": "Create a new mobility token, for a specific Provider.",
        "operationId": "createToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CsmsTokenCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Expiry date exceeded max value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Conflict - Token already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          }
        }
      }
    },
    "/tariffs": {
      "get": {
        "tags": [
          "Tariff"
        ],
        "summary": "Get all Tariffs",
        "description": "Returns all tariffs with filters and pagination.",
        "operationId": "getAllTariffs",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "maximum": 100,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tariff"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Tariff"
        ],
        "summary": "Create Tariff",
        "description": "Creates a new tariff. Filter for Provider ID is applied.",
        "operationId": "createTariff",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CsmsTariffCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tariff"
                }
              }
            }
          },
          "400": {
            "description": "Request's restrictions are not met"
          },
          "403": {
            "description": "Forbidden - User has no Provider ID"
          }
        }
      }
    },
    "/providers": {
      "get": {
        "tags": [
          "Provider"
        ],
        "summary": "Get all providers",
        "description": "Returns a list of all providers ",
        "operationId": "getAllProviders",
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CsmsProviderDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Provider"
        ],
        "summary": "Create provider",
        "description": "Creates a new provider",
        "operationId": "createProvider",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CsmsProviderCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CsmsProviderDto"
                }
              }
            }
          },
          "400": {
            "description": "Provider Country Code not valid"
          },
          "409": {
            "description": "Provider name already exists"
          }
        }
      }
    },
    "/owners": {
      "get": {
        "tags": [
          "Owner"
        ],
        "summary": "Get all owners info",
        "description": "Get users and locations count per owner",
        "operationId": "getAllOwners",
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnerUserLocationResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User has no Provider ID"
          },
          "404": {
            "description": "Owner entity not found (when user role = OWNER)"
          }
        }
      },
      "post": {
        "tags": [
          "Owner"
        ],
        "summary": "Create Owner entity",
        "description": "Create Owner entity. ",
        "operationId": "createOwner",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OwnerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Owner"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden - User has no Provider ID"
          },
          "404": {
            "description": "User Account Not Found"
          },
          "409": {
            "description": "Owner name exists"
          }
        }
      }
    },
    "/management/chargingstations/{identityKey}/unlockConnector": {
      "post": {
        "tags": [
          "Charging Station Management"
        ],
        "summary": "Unlock Connector",
        "description": "Sends an unlock connector request to the charging station",
        "operationId": "unlockConnector",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnlockConnectorReq"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnlockConnectorConfirmation"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          },
          "504": {
            "description": "RPC Timeout. The charging station did not respond in time."
          }
        }
      }
    },
    "/management/chargingstations/{identityKey}/reset": {
      "post": {
        "tags": [
          "Charging Station Management"
        ],
        "summary": "Reset",
        "description": "Sends a reset request to the charging station",
        "operationId": "reset",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetReq"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResetConfirmation"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          },
          "504": {
            "description": "RPC Timeout. The charging station did not respond in time."
          }
        }
      }
    },
    "/management/chargingstations/{identityKey}/remoteStopTransaction": {
      "post": {
        "tags": [
          "Charging Station Management"
        ],
        "summary": "Remote Stop Transaction",
        "description": "Sends a remote stop request to the charging station",
        "operationId": "remoteStopTransaction",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoteStopTransactionReq"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoteStopTransactionConfirmation"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          },
          "504": {
            "description": "RPC Timeout. The charging station did not respond in time."
          }
        }
      }
    },
    "/management/chargingstations/{identityKey}/remoteStartTransaction": {
      "post": {
        "tags": [
          "Charging Station Management"
        ],
        "summary": "Remote Start Transaction",
        "description": "Sends a remote start request to the charging station",
        "operationId": "remoteStartTransaction",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoteStartTransactionReq"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoteStartTransactionConfirmation"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          },
          "504": {
            "description": "RPC Timeout. The charging station did not respond in time."
          }
        }
      }
    },
    "/management/chargingstations/{identityKey}/configuration": {
      "get": {
        "tags": [
          "Charging Station Management"
        ],
        "summary": "Get configuration",
        "description": "Request the configuration settings from the charging station",
        "operationId": "getConfiguration",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetConfigurationConfirmation"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          },
          "504": {
            "description": "RPC Timeout. The charging station did not respond in time."
          }
        }
      },
      "post": {
        "tags": [
          "Charging Station Management"
        ],
        "summary": "Change configuration",
        "description": "Sends a change configuration request to the charging station",
        "operationId": "changeConfiguration",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeConfigurationReq"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeConfigurationConfirmation"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          },
          "504": {
            "description": "RPC Timeout. The charging station did not respond in time."
          }
        }
      }
    },
    "/management/chargingstations/{identityKey}/changeAvailability": {
      "post": {
        "tags": [
          "Charging Station Management"
        ],
        "summary": "Change availability",
        "description": "Changes the availability of the charging station or a single EVSE",
        "operationId": "changeAvailability",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAvailabilityReq"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeAvailabilityConfirmation"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          },
          "504": {
            "description": "RPC Timeout. The charging station did not respond in time."
          }
        }
      }
    },
    "/locations": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Get all Locations",
        "description": "Returns a list of all Locations for the SUPER_ADMIN or the Locations filtered by User's Provider ID for CPO_ADMIN & CPO_USER.",
        "operationId": "getAllLocations",
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChargingStationLocation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Locations"
        ],
        "summary": "Create location and Charging Station Groups",
        "description": "Create a new location, and one or more Charging Station Groups for it.",
        "operationId": "createLocationAndChargingStationGroups",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OwnerLocationChargingStationGroupsCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnerLocationAndChargingStationGroups"
                }
              }
            }
          },
          "400": {
            "description": "Group Create request contains duplicate names"
          },
          "403": {
            "description": "Forbidden - User has no Provider ID"
          },
          "404": {
            "description": "Not found - Owner id not found"
          },
          "409": {
            "description": "Conflict - Not valid opening times"
          }
        }
      }
    },
    "/imprint": {
      "get": {
        "tags": [
          "Imprint"
        ],
        "summary": "Get imprint",
        "description": "Get existing imprint. If not found, empty one is returned.",
        "operationId": "getImprint",
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Imprint"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Imprint"
        ],
        "summary": "Create or Update imprint",
        "description": "Create or Update imprint. There is always one imprint. If not create a new one,otherwise update the existing.",
        "operationId": "createOrUpdateImprint",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImprintRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Imprint"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/chargingstations": {
      "get": {
        "tags": [
          "Charging Stations"
        ],
        "summary": "Get all Charging Stations ",
        "description": "Returns a list of all Charging Station for Super Admin which are registered, or the Charging Stations filtered by User's CPO Provider Id for CPO roles.",
        "operationId": "getAllChargingStations",
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CsmsChargingStation"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Charging Stations"
        ],
        "summary": "Create charging station",
        "description": "Creates a new charging station, for a specific Provider.",
        "operationId": "createChargingStation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CsmsChargingStationCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CsmsChargingStation"
                }
              }
            }
          },
          "400": {
            "description": "Both Username and Password must be provided."
          },
          "403": {
            "description": "Forbidden - User has no Provider ID"
          },
          "409": {
            "description": "EVSE ID already exists."
          }
        }
      }
    },
    "/chargingstations/{chargingStationId}/evses": {
      "get": {
        "tags": [
          "EVSEs"
        ],
        "summary": "Get all EVSEs",
        "description": "Returns a list of all EVSEs ",
        "operationId": "getAllEvses",
        "parameters": [
          {
            "name": "chargingStationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Evse"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "EVSEs"
        ],
        "summary": "Add EVSE",
        "description": "Returns the added EVSE",
        "operationId": "createEvse",
        "parameters": [
          {
            "name": "chargingStationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvseCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Evse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/chargingstation-groups": {
      "post": {
        "tags": [
          "Charging Station Groups"
        ],
        "summary": "Create Charging Station Group(s), for an existing Location",
        "description": "Creates one or more Charging Station Groups, for an existing Location. Filter for Provider ID is applied.",
        "operationId": "createChargingStationGroups",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CsmsChargingStationGroupCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChargingStationGroup"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Create request contains duplicate names"
          },
          "403": {
            "description": "Forbidden - User has no Provider ID"
          },
          "409": {
            "description": "Charging Station Group name already exists"
          }
        }
      }
    },
    "/broker/csms": {
      "get": {
        "tags": [
          "CSMS"
        ],
        "summary": "Get all CSMS",
        "description": "Return a list of all CSMS, if broker is configured.If not, it throws 404 exception.",
        "operationId": "getAllCsms",
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Csms"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Broker is not configured"
          }
        }
      },
      "post": {
        "tags": [
          "CSMS"
        ],
        "summary": "Create CSMS",
        "description": "Create a new CSMS and save it to database",
        "operationId": "createCsms",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CsmsCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Csms"
                }
              }
            }
          },
          "409": {
            "description": "CSMS with the specified display name already exists"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get all users",
        "description": "Returns the list of all users that have an assigned user role",
        "operationId": "getAllUsers",
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedCsmsUserDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - no credentials provided"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/users/roles": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get all roles",
        "description": "Returns the list of all user roles as String",
        "operationId": "getAllRoles",
        "responses": {
          "200": {
            "description": "Successful Operation"
          },
          "401": {
            "description": "Unauthorized - no credentials provided"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/users/requests": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get all User Access Requests",
        "description": "Returns the list of all User access requests",
        "operationId": "getAllUserAccessRequests",
        "responses": {
          "200": {
            "description": "Successful Operation"
          },
          "401": {
            "description": "Unauthorized - no credentials provided"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get current user info",
        "description": "Returns the user information of the current user",
        "operationId": "getCurrentUserInfo",
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CsmsUserDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - no credentials provided"
          }
        }
      }
    },
    "/transactions/cdrs/by-evseIds": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get CDRs of specific EVSEs",
        "description": "Returns all charge detail records for the requested EVSE IDs, paginated. If user is not SUPER_ADMIN, the results are filtered by provider ID.",
        "operationId": "getCdrsByEvseIds",
        "parameters": [
          {
            "name": "evseIds",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "startDateTime",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDateTime",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "pageable",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Cdr"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "User has no provider"
          }
        }
      }
    },
    "/tokens/paginated": {
      "get": {
        "tags": [
          "Mobility Token"
        ],
        "summary": "Get all Tokens",
        "description": "Returns all Tokens with filters and pagination.",
        "operationId": "getAllTokensPaginated",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "maximum": 100,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Only return Tokens that have last_updated after or equal to this Date/Time.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2024-01-09T23:59:59"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Only return Tokens that have last_updated before to this Date/Time.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2024-01-30T23:59:59"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Token"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ocpp-messages/{identityKey}": {
      "get": {
        "tags": [
          "OCPP Messages"
        ],
        "summary": "Get all OCPP messages",
        "description": "Returns a pageable list of all OCPP messages for the specified charge point",
        "operationId": "getAllOcppMessages",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageable",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PageOcppMessageLogEntry"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/ocpp-messages/{identityKey}/zip": {
      "get": {
        "tags": [
          "OCPP Messages"
        ],
        "summary": "Get OCPP messages (ZIP)",
        "description": "Returns a ZIP of all OCPP messages for the specified charge point",
        "operationId": "getAllOcppMessagesZip",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeFrom",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "timeTo",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "messageTypes",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "CALL",
                  "CALL_RESULT",
                  "CALL_ERROR"
                ]
              }
            }
          },
          {
            "name": "ocppProcedures",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "AUTHORIZE",
                  "BOOT_NOTIFICATION",
                  "CANCEL_RESERVATION",
                  "CLEAR_DISPLAY_MESSAGE",
                  "CLEAR_VARIABLE_MONITORING",
                  "CERTIFICATE_SIGNED",
                  "CHANGE_AVAILABILITY",
                  "CHANGE_CONFIGURATION",
                  "CLEAR_CACHE",
                  "CLEAR_CHARGING_PROFILE",
                  "COST_UPDATED",
                  "CUSTOMER_INFORMATION",
                  "DATA_TRANSFER",
                  "DELETE_CERTIFICATE",
                  "DIAGNOSTICS_STATUS_NOTIFICATION",
                  "FIRMWARE_STATUS_NOTIFICATION",
                  "GET_15118_EV_CERTIFICATE",
                  "GET_CERTIFICATE_STATUS",
                  "GET_BASE_REPORT",
                  "GET_CHARGING_PROFILES",
                  "GET_COMPOSITE_SCHEDULE",
                  "GET_CONFIGURATION",
                  "GET_DIAGNOSTICS",
                  "GET_DISPLAY_MESSAGES",
                  "GET_INSTALLED_CERTIFICATE_IDS",
                  "GET_LOCAL_LIST_VERSION",
                  "GET_LOG",
                  "GET_MONITORING_REPORT",
                  "GET_REPORT",
                  "GET_TRANSACTION_STATUS",
                  "GET_VARIABLES",
                  "HEARTBEAT",
                  "INSTALL_CERTIFICATE",
                  "LOG_STATUS_NOTIFICATION",
                  "METER_VALUES",
                  "NOTIFY_CHARGING_LIMIT",
                  "NOTIFY_CUSTOMER_INFORMATION",
                  "NOTIFY_DISPLAY_MESSAGES",
                  "NOTIFY_EV_CHARGING_NEEDS",
                  "NOTIFY_EV_CHARGING_SCHEDULE",
                  "NOTIFY_EVENT",
                  "NOTIFY_MONITORING_REPORT",
                  "NOTIFY_REPORT",
                  "PUBLISH_FIRMWARE",
                  "REMOTE_START_TRANSACTION",
                  "REMOTE_STOP_TRANSACTION",
                  "REPORT_CHARGING_PROFILES",
                  "REQUEST_START_TRANSACTION",
                  "REQUEST_STOP_TRANSACTION",
                  "RESERVATION_STATUS_UPDATE",
                  "RESERVE_NOW",
                  "RESET",
                  "SECURITY_EVENT_NOTIFICATION",
                  "SEND_LOCAL_LIST",
                  "SET_CHARGING_PROFILE",
                  "SET_DISPLAY_MESSAGE",
                  "SET_MONITORING_BASE",
                  "SET_MONITORING_LEVEL",
                  "SET_NETWORK_PROFILE",
                  "SET_VARIABLES",
                  "SET_VARIABLE_MONITORING",
                  "SIGN_CERTIFICATE",
                  "START_TRANSACTION",
                  "STOP_TRANSACTION",
                  "STATUS_NOTIFICATION",
                  "TRANSACTION_EVENT",
                  "UNLOCK_CONNECTOR",
                  "UNPUBLISH_FIRMWARE",
                  "UPDATE_FIRMWARE",
                  "TRIGGER_MESSAGE",
                  "FORMAT_VIOLATION"
                ]
              }
            }
          },
          {
            "name": "messageDirections",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "CS_2_CSMS",
                  "CSMS_2_CS",
                  "CS_2_BROKER",
                  "BROKER_2_CS",
                  "CS_2_TRANSLATOR",
                  "TRANSLATOR_2_CS",
                  "CSMS_2_TRANSLATOR",
                  "TRANSLATOR_2_CSMS"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/zip": {}
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Charging session not found"
          }
        }
      }
    },
    "/ocpp-messages/{identityKey}/csv": {
      "get": {
        "tags": [
          "OCPP Messages"
        ],
        "summary": "Get OCPP messages (CSV)",
        "description": "Returns a CSV of all OCPP messages for the specified charge point",
        "operationId": "getAllOcppMessagesCsv",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeFrom",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "timeTo",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "messageTypes",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "CALL",
                  "CALL_RESULT",
                  "CALL_ERROR"
                ]
              }
            }
          },
          {
            "name": "ocppProcedures",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "AUTHORIZE",
                  "BOOT_NOTIFICATION",
                  "CANCEL_RESERVATION",
                  "CLEAR_DISPLAY_MESSAGE",
                  "CLEAR_VARIABLE_MONITORING",
                  "CERTIFICATE_SIGNED",
                  "CHANGE_AVAILABILITY",
                  "CHANGE_CONFIGURATION",
                  "CLEAR_CACHE",
                  "CLEAR_CHARGING_PROFILE",
                  "COST_UPDATED",
                  "CUSTOMER_INFORMATION",
                  "DATA_TRANSFER",
                  "DELETE_CERTIFICATE",
                  "DIAGNOSTICS_STATUS_NOTIFICATION",
                  "FIRMWARE_STATUS_NOTIFICATION",
                  "GET_15118_EV_CERTIFICATE",
                  "GET_CERTIFICATE_STATUS",
                  "GET_BASE_REPORT",
                  "GET_CHARGING_PROFILES",
                  "GET_COMPOSITE_SCHEDULE",
                  "GET_CONFIGURATION",
                  "GET_DIAGNOSTICS",
                  "GET_DISPLAY_MESSAGES",
                  "GET_INSTALLED_CERTIFICATE_IDS",
                  "GET_LOCAL_LIST_VERSION",
                  "GET_LOG",
                  "GET_MONITORING_REPORT",
                  "GET_REPORT",
                  "GET_TRANSACTION_STATUS",
                  "GET_VARIABLES",
                  "HEARTBEAT",
                  "INSTALL_CERTIFICATE",
                  "LOG_STATUS_NOTIFICATION",
                  "METER_VALUES",
                  "NOTIFY_CHARGING_LIMIT",
                  "NOTIFY_CUSTOMER_INFORMATION",
                  "NOTIFY_DISPLAY_MESSAGES",
                  "NOTIFY_EV_CHARGING_NEEDS",
                  "NOTIFY_EV_CHARGING_SCHEDULE",
                  "NOTIFY_EVENT",
                  "NOTIFY_MONITORING_REPORT",
                  "NOTIFY_REPORT",
                  "PUBLISH_FIRMWARE",
                  "REMOTE_START_TRANSACTION",
                  "REMOTE_STOP_TRANSACTION",
                  "REPORT_CHARGING_PROFILES",
                  "REQUEST_START_TRANSACTION",
                  "REQUEST_STOP_TRANSACTION",
                  "RESERVATION_STATUS_UPDATE",
                  "RESERVE_NOW",
                  "RESET",
                  "SECURITY_EVENT_NOTIFICATION",
                  "SEND_LOCAL_LIST",
                  "SET_CHARGING_PROFILE",
                  "SET_DISPLAY_MESSAGE",
                  "SET_MONITORING_BASE",
                  "SET_MONITORING_LEVEL",
                  "SET_NETWORK_PROFILE",
                  "SET_VARIABLES",
                  "SET_VARIABLE_MONITORING",
                  "SIGN_CERTIFICATE",
                  "START_TRANSACTION",
                  "STOP_TRANSACTION",
                  "STATUS_NOTIFICATION",
                  "TRANSACTION_EVENT",
                  "UNLOCK_CONNECTOR",
                  "UNPUBLISH_FIRMWARE",
                  "UPDATE_FIRMWARE",
                  "TRIGGER_MESSAGE",
                  "FORMAT_VIOLATION"
                ]
              }
            }
          },
          {
            "name": "messageDirections",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "CS_2_CSMS",
                  "CSMS_2_CS",
                  "CS_2_BROKER",
                  "BROKER_2_CS",
                  "CS_2_TRANSLATOR",
                  "TRANSLATOR_2_CS",
                  "CSMS_2_TRANSLATOR",
                  "TRANSLATOR_2_CSMS"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/csv": {}
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Charging session not found"
          }
        }
      }
    },
    "/ocpp-messages/search": {
      "get": {
        "tags": [
          "OCPP Messages"
        ],
        "summary": "Get OCPP messages by search",
        "description": "Get all OCPP messages filtered by Time from, Time to , and message Type",
        "operationId": "search",
        "parameters": [
          {
            "name": "identityKey",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeFrom",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "timeTo",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "messageTypes",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "CALL",
                  "CALL_RESULT",
                  "CALL_ERROR"
                ]
              }
            }
          },
          {
            "name": "messageDirections",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "CS_2_CSMS",
                  "CSMS_2_CS",
                  "CS_2_BROKER",
                  "BROKER_2_CS",
                  "CS_2_TRANSLATOR",
                  "TRANSLATOR_2_CS",
                  "CSMS_2_TRANSLATOR",
                  "TRANSLATOR_2_CSMS"
                ]
              }
            }
          },
          {
            "name": "ocppProcedures",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "AUTHORIZE",
                  "BOOT_NOTIFICATION",
                  "CANCEL_RESERVATION",
                  "CLEAR_DISPLAY_MESSAGE",
                  "CLEAR_VARIABLE_MONITORING",
                  "CERTIFICATE_SIGNED",
                  "CHANGE_AVAILABILITY",
                  "CHANGE_CONFIGURATION",
                  "CLEAR_CACHE",
                  "CLEAR_CHARGING_PROFILE",
                  "COST_UPDATED",
                  "CUSTOMER_INFORMATION",
                  "DATA_TRANSFER",
                  "DELETE_CERTIFICATE",
                  "DIAGNOSTICS_STATUS_NOTIFICATION",
                  "FIRMWARE_STATUS_NOTIFICATION",
                  "GET_15118_EV_CERTIFICATE",
                  "GET_CERTIFICATE_STATUS",
                  "GET_BASE_REPORT",
                  "GET_CHARGING_PROFILES",
                  "GET_COMPOSITE_SCHEDULE",
                  "GET_CONFIGURATION",
                  "GET_DIAGNOSTICS",
                  "GET_DISPLAY_MESSAGES",
                  "GET_INSTALLED_CERTIFICATE_IDS",
                  "GET_LOCAL_LIST_VERSION",
                  "GET_LOG",
                  "GET_MONITORING_REPORT",
                  "GET_REPORT",
                  "GET_TRANSACTION_STATUS",
                  "GET_VARIABLES",
                  "HEARTBEAT",
                  "INSTALL_CERTIFICATE",
                  "LOG_STATUS_NOTIFICATION",
                  "METER_VALUES",
                  "NOTIFY_CHARGING_LIMIT",
                  "NOTIFY_CUSTOMER_INFORMATION",
                  "NOTIFY_DISPLAY_MESSAGES",
                  "NOTIFY_EV_CHARGING_NEEDS",
                  "NOTIFY_EV_CHARGING_SCHEDULE",
                  "NOTIFY_EVENT",
                  "NOTIFY_MONITORING_REPORT",
                  "NOTIFY_REPORT",
                  "PUBLISH_FIRMWARE",
                  "REMOTE_START_TRANSACTION",
                  "REMOTE_STOP_TRANSACTION",
                  "REPORT_CHARGING_PROFILES",
                  "REQUEST_START_TRANSACTION",
                  "REQUEST_STOP_TRANSACTION",
                  "RESERVATION_STATUS_UPDATE",
                  "RESERVE_NOW",
                  "RESET",
                  "SECURITY_EVENT_NOTIFICATION",
                  "SEND_LOCAL_LIST",
                  "SET_CHARGING_PROFILE",
                  "SET_DISPLAY_MESSAGE",
                  "SET_MONITORING_BASE",
                  "SET_MONITORING_LEVEL",
                  "SET_NETWORK_PROFILE",
                  "SET_VARIABLES",
                  "SET_VARIABLE_MONITORING",
                  "SIGN_CERTIFICATE",
                  "START_TRANSACTION",
                  "STOP_TRANSACTION",
                  "STATUS_NOTIFICATION",
                  "TRANSACTION_EVENT",
                  "UNLOCK_CONNECTOR",
                  "UNPUBLISH_FIRMWARE",
                  "UPDATE_FIRMWARE",
                  "TRIGGER_MESSAGE",
                  "FORMAT_VIOLATION"
                ]
              }
            }
          },
          {
            "name": "pageable",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OcppMessageLogEntry"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/chargingstation-groups/search": {
      "get": {
        "tags": [
          "Charging Station Groups"
        ],
        "summary": "Get Charging Station Group by Identity Key",
        "description": "Get the Charging Station Group, that a specific Charging Station belongs to (Identity Key). Filter by Provider ID is applied, if User is not SUPER_ADMIN.",
        "operationId": "getChargingStationGroupByProviderIdAndIdentityKey",
        "parameters": [
          {
            "name": "identityKey",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChargingStationGroup"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Charging Station Identity Key Not Found"
          }
        }
      }
    },
    "/chargingstation-groups/by-location/{locationId}": {
      "get": {
        "tags": [
          "Charging Station Groups"
        ],
        "summary": "Get Charging Station Group(s) for one Location",
        "description": "Get all Charging Station Groups that belong to the requested Location, of the current Provider.",
        "operationId": "getAllChargingStationGroupsByProviderIdAndLocationId",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChargingStationGroup"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User has no Provider ID"
          },
          "404": {
            "description": "Location Not Found"
          }
        }
      }
    },
    "/broker/csms/{uuid}/status": {
      "get": {
        "tags": [
          "CSMS"
        ],
        "summary": "Get a CSMS Connectivity Status",
        "description": "Return a CSMS Connectivity Status",
        "operationId": "getCsmsStatusByUuid",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The UUID of the CSMS",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "The connectivity status of a Csms.",
                  "enum": [
                    "ONLINE",
                    "OFFLINE"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Csms not found"
          }
        }
      }
    },
    "/users/requests/{userId}": {
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete User Access Request ",
        "description": "Deletes a user account access request",
        "operationId": "deleteUserAccessRequest",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation"
          },
          "401": {
            "description": "Unauthorized - no credentials provided"
          },
          "404": {
            "description": "User access request not found"
          }
        }
      }
    },
    "/owner-locations/{locationId}": {
      "delete": {
        "tags": [
          "Owner's Locations"
        ],
        "summary": "Delete owner location relation",
        "description": "Check if owner-location relation exists, if true then delete the relation",
        "operationId": "deleteOwnerLocation",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not found - Owner Location relation doesn't exists."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ExtendedCsmsUserDto": {
        "type": "object",
        "properties": {
          "providerId": {
            "type": "string",
            "description": "The provider ID",
            "example": "DE*ERG"
          },
          "userRole": {
            "type": "string",
            "description": "The assigned user role",
            "example": "CPO_USER",
            "enum": [
              "SUPER_ADMIN",
              "CPO_ADMIN",
              "CPO_USER",
              "CPO_OWNER"
            ]
          },
          "isActive": {
            "type": "boolean",
            "description": "Indicates if the user account is active",
            "example": true
          },
          "emailAddress": {
            "type": "string",
            "description": "The email address of the user",
            "example": "john.doe@energystacks.io"
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the user",
            "example": "John Doe"
          },
          "userId": {
            "type": "string",
            "description": "The ID of the user",
            "example": "ZOsNHVu2TgI6PrWRb9YqI7XEL9YSZl50y4"
          },
          "dateCreatedAt": {
            "type": "string",
            "description": "The date and time when the user account was created in the system",
            "format": "date-time",
            "example": "2024-03-19T14:11:43Z"
          }
        }
      },
      "UpdateUserRequest": {
        "required": [
          "isActive",
          "userRole"
        ],
        "type": "object",
        "properties": {
          "userRole": {
            "type": "string",
            "description": "The assigned user role",
            "example": "CPO_USER",
            "enum": [
              "SUPER_ADMIN",
              "CPO_ADMIN",
              "CPO_USER",
              "CPO_OWNER"
            ]
          },
          "isActive": {
            "type": "boolean",
            "description": "Indicates if the user account is active",
            "example": true
          },
          "providerId": {
            "pattern": "^[A-Z]{2}\\*[0-9A-Z]{3}$",
            "type": "string",
            "description": "Indicates the Provider of this user",
            "example": "DE*ERG"
          }
        }
      },
      "EnergyContract": {
        "required": [
          "contract_id",
          "supplier_name"
        ],
        "type": "object",
        "properties": {
          "supplier_name": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Name of the energy supplier for this token."
          },
          "contract_id": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Contract ID at the energy supplier, that belongs to the owner of this token."
          }
        },
        "description": "When the Charge Point supports using your own energy supplier/contract at a\nCharge Point, information about the energy supplier/contract is needed so the\nCPO knows which energy supplier to use.\nNOTE: In a lot of countries it is currently not allowed/possible to use a drivers\nown energy supplier/contract at a Charge Point."
      },
      "Token": {
        "required": [
          "contract_id",
          "country_code",
          "issuer",
          "last_updated",
          "party_id",
          "type",
          "uid",
          "valid",
          "whitelist"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "    The type of token\n    * <p>\n    * NOTE: The eMSP is RECOMMENDED to push Tokens with type: AD_HOC_USER or APP_USER with whitelist set to\n    * NEVER. Whitelists are very useful for RFID type Tokens, but the AD_HOC_USER/APP_USER Tokens are used to\n    * start Sessions from an App etc. so whitelisting them has no advantages.\n    * </p>\n",
            "example": "RFID",
            "enum": [
              "AD_HOC_USER",
              "APP_USER",
              "OTHER",
              "RFID"
            ]
          },
          "issuer": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Issuing company, most of the times the name of the company printed on the token (RFID card), not necessarily the eMSP.",
            "example": "ACME Inc."
          },
          "whitelist": {
            "type": "string",
            "description": "Indicates what type of white-listing is allowed.",
            "example": "ALLOWED",
            "enum": [
              "ALWAYS",
              "ALLOWED",
              "ALLOWED_OFFLINE",
              "NEVER"
            ]
          },
          "language": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "Language Code ISO 639-1. This optional field indicates the Token owner’s  preferred interface language.\nIf the language is not provided or not supported then the CPO is free to choose its own language.",
            "example": "DE"
          },
          "uid": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Unique ID by which this Token can be identified.\nThis is the field used by CPO system (RFID reader on the Charge Point) to identify this token.\nCurrently, in most cases: type=RFID, this is the RFID hidden ID as read by the RFID reader, but that is not a requirement.\nIf this is a APP_USER or AD_HOC_USER Token, it will be a uniquely, by the eMSP, generated ID.\nThis field is named uid instead of id to prevent confusion with: contract_id.",
            "example": "123456789"
          },
          "country_code": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "ISO-3166 alpha-2 country code of the MSP that 'owns' this Token.",
            "example": "DE"
          },
          "party_id": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "CPO ID of the MSP that 'owns' this Token (following the ISO-15118 standard).",
            "example": "ERG"
          },
          "contract_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the EV Driver contract token within the eMSP’s platform (and suboperator platforms). Recommended to follow the specification for eMA ID from \"eMI3 standard version V1.0\" (http://emi3group.com/documents-links/)  \"Part 2: business objects.\"\n",
            "example": "DE8ACC12E46L89"
          },
          "visual_number": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Visual readable number/identification as printed on the Token (RFID card), might be equal to the contract_id.",
            "example": "DF000-2001-8999-1"
          },
          "group_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "This ID groups a couple of tokens. This can be used to make two or more tokens work as one, so that a session can be started with one token and stopped with another, handy when a card and key-fob are given to the EV-driver.\n Beware that OCPP 1.5/1.6 only support group_ids (it is called parentId in OCPP 1.5/1.6) with a maximum length of 20.",
            "example": "DF000-2001-8999"
          },
          "valid": {
            "type": "boolean",
            "description": "Is this Token valid"
          },
          "default_profile_type": {
            "type": "string",
            "description": "The default Charging Preference. When this is provided, and a charging session\nis started on an Charge Point that support Preference base Smart Charging and\nsupport this ProfileType, the Charge Point can start using this ProfileType,\nwithout this having to be set via: Set Charging Preferences.",
            "enum": [
              "CHEAP",
              "FAST",
              "GREEN",
              "REGULAR"
            ]
          },
          "energy_contract": {
            "$ref": "#/components/schemas/EnergyContract"
          },
          "last_updated": {
            "type": "string",
            "description": "Timestamp when this Token was last updated (or created).",
            "format": "date-time"
          },
          "expiry_date": {
            "type": "string",
            "description": "Timestamp when this Token expires in charging station's local authorization cache.",
            "format": "date-time"
          }
        }
      },
      "CsmsTokenUpdateRequest": {
        "required": [
          "issuer",
          "valid",
          "whitelist"
        ],
        "type": "object",
        "properties": {
          "issuer": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Issuing company, most of the times the name of the company printed on the token (RFID card), not necessarily the eMSP.",
            "example": "ACME Inc."
          },
          "whitelist": {
            "type": "string",
            "description": "Indicates what type of white-listing is allowed.",
            "example": "ALLOWED",
            "enum": [
              "ALWAYS",
              "ALLOWED",
              "ALLOWED_OFFLINE",
              "NEVER"
            ]
          },
          "visual_number": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Visual readable number/identification as printed on the Token (RFID card), might be equal to the contract_id.",
            "example": "DF000-2001-8999-1"
          },
          "group_id": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "This ID groups a couple of tokens. This can be used to make two or more tokens work as one, so that a session can be started with one token and stopped with another, handy when a card and key-fob are given to the EV-driver. Beware that OCPP 1.5/1.6 only support group_ids (it is called parentId in OCPP 1.5/1.6) with a maximum length of 20.",
            "example": "DF000-2001-8999"
          },
          "valid": {
            "type": "boolean",
            "description": "Is this Token valid"
          },
          "expiry_date": {
            "type": "string",
            "description": "Timestamp when Token expires in Charging Station local authorization cache.",
            "format": "date-time"
          }
        }
      },
      "DisplayText": {
        "required": [
          "language",
          "text"
        ],
        "type": "object",
        "properties": {
          "language": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "Language Code ISO 639-1.",
            "example": "en"
          },
          "text": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Text to be displayed to a end user. No markup, html etc. allowed.",
            "example": "this is a display text"
          }
        },
        "description": "Name of the point in local language or as written at the location. For example the street name of a parking lot entrance or it’s number."
      },
      "EnergyMix": {
        "required": [
          "is_green_energy"
        ],
        "type": "object",
        "properties": {
          "is_green_energy": {
            "type": "boolean",
            "description": "True if 100% from regenerative sources. (CO2 and nuclear waste is zero)",
            "example": false
          },
          "energy_sources": {
            "type": "array",
            "description": "Key-value pairs (enum + percentage) of energy sources of this location’s tariff.",
            "items": {
              "$ref": "#/components/schemas/EnergySource"
            }
          },
          "environ_impact": {
            "type": "array",
            "description": "Key-value pairs (enum + percentage) of nuclear waste and CO2 exhaust of this location’s tariff.",
            "items": {
              "$ref": "#/components/schemas/EnvironmentalImpact"
            }
          },
          "supplier_name": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Name of the energy supplier, delivering the energy for this location or tariff.",
            "example": "HANDWE EV"
          },
          "energy_product_name": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Name of the energy suppliers product/tariff plan used at this location.",
            "example": "Kleenheat"
          }
        },
        "description": "This type is used to specify the energy mix and environmental impact of the supplied energy at a location or in a tariff.",
        "nullable": true
      },
      "EnergySource": {
        "required": [
          "percentage",
          "source"
        ],
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "description": "Categories of energy sources.",
            "example": "GAS",
            "enum": [
              "NUCLEAR",
              "GENERAL_FOSSIL",
              "COAL",
              "GAS",
              "GENERAL_GREEN",
              "SOLAR",
              "WIND",
              "WATER"
            ]
          },
          "percentage": {
            "maximum": 100,
            "exclusiveMaximum": false,
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "number",
            "description": "Percentage of this source (0-100) in the mix.",
            "example": 33.2
          }
        },
        "description": "Key-value pairs (enum + percentage) of energy sources. All given values of all categories should add up to 100 percent."
      },
      "EnvironmentalImpact": {
        "required": [
          "amount",
          "category"
        ],
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "description": "Categories of environmental impact values.",
            "example": "NUCLEAR_WASTE",
            "enum": [
              "NUCLEAR_WASTE",
              "CARBON_DIOXIDE"
            ]
          },
          "amount": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "number",
            "description": "Amount of this portion in g/kWh.",
            "example": 0.005
          }
        },
        "description": "Amount of waste produced/emitted per kWh."
      },
      "Price": {
        "required": [
          "excl_vat"
        ],
        "type": "object",
        "properties": {
          "excl_vat": {
            "type": "number",
            "description": "Price/Cost excluding VAT.",
            "example": 87.31
          },
          "incl_vat": {
            "type": "number",
            "description": "Price/Cost including VAT.",
            "example": 101.88
          }
        },
        "description": "When this field is set, a Charging Session with this tariff will NOT cost more than this amount."
      },
      "PriceComponent": {
        "required": [
          "price",
          "step_size",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of tariff dimension.",
            "enum": [
              "ENERGY",
              "FLAT",
              "PARKING_TIME",
              "TIME"
            ]
          },
          "price": {
            "type": "number",
            "description": "Price per unit (excl. VAT) for this tariff dimension.",
            "example": 2
          },
          "vat": {
            "type": "number",
            "description": "Applicable VAT percentage for this tariff dimension. If omitted, no VAT is applicable. Not providing a VAT is different from 0% VAT, which would be a value of 0.0 here.",
            "example": 10
          },
          "step_size": {
            "type": "integer",
            "description": "Minimum amount to be billed. This unit will be billed in this step_size blocks. Amounts that are less then this step_size are rounded up to the given step_size. For example: if type is TIME and step_size has a value of 300, then time will be billed in blocks of 5 minutes. If 6 minutes were used, 10 minutes (2 blocks of step_size) will be billed.",
            "format": "int32",
            "example": 300
          }
        },
        "description": "List of price components that describe the pricing of a tariff."
      },
      "Tariff": {
        "required": [
          "country_code",
          "currency",
          "elements",
          "id",
          "last_updated",
          "party_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the tariff within the CPO’s platform (and suboperator platforms).",
            "example": "12"
          },
          "currency": {
            "type": "string",
            "description": "ISO-4217 code of the currency of this tariff.",
            "example": "EUR"
          },
          "type": {
            "type": "string",
            "description": "Defines the type of the tariff. This allows for distinction in case of given Charging Preferences. When omitted, this tariff is valid for all sessions.",
            "example": "REGULAR",
            "enum": [
              "AD_HOC_PAYMENT",
              "PROFILE_CHEAP",
              "PROFILE_FAST",
              "PROFILE_GREEN",
              "REGULAR"
            ]
          },
          "elements": {
            "type": "array",
            "description": "List of Tariff Elements.",
            "items": {
              "$ref": "#/components/schemas/TariffElement"
            }
          },
          "country_code": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "ISO-3166 alpha-2 country code of the CPO that owns this Tariff.",
            "example": "BE"
          },
          "party_id": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "CPO ID of the CPO that owns this Tariff (following the ISO-15118 standard).",
            "example": "BEC"
          },
          "tariff_alt_text": {
            "type": "array",
            "description": "List of multi-language alternative tariff info texts.",
            "items": {
              "$ref": "#/components/schemas/DisplayText"
            }
          },
          "tariff_alt_url": {
            "type": "string",
            "description": "URL to a web page that contains an explanation of the tariff information in human readable form.",
            "example": "https://www.example.com/tariff"
          },
          "min_price": {
            "$ref": "#/components/schemas/Price"
          },
          "max_price": {
            "$ref": "#/components/schemas/Price"
          },
          "start_date_time": {
            "type": "string",
            "description": "The time when this tariff becomes active, in UTC, time_zone field of the Location can be used to convert to local time. Typically used for a new tariff that is already given with the location, before it becomes active.",
            "format": "date-time",
            "example": "2021-03-19T14:11:43Z"
          },
          "end_date_time": {
            "type": "string",
            "description": "The time after which this tariff is no longer valid, in UTC, time_zone field if the Location can be used to convert to local time. Typically used when this tariff is going to be replaced with a different tariff in the near future.",
            "format": "date-time",
            "example": "2021-03-19T14:11:43Z"
          },
          "energy_mix": {
            "$ref": "#/components/schemas/EnergyMix"
          },
          "last_updated": {
            "type": "string",
            "description": "Timestamp when this Tariff was last updated (or created).",
            "format": "date-time",
            "example": "2021-03-19T14:11:43Z"
          }
        },
        "description": "A Tariff object consists of a list of one or more Tariff Elements, which can be used to create complex Tariff structures."
      },
      "TariffElement": {
        "required": [
          "price_components"
        ],
        "type": "object",
        "properties": {
          "restrictions": {
            "$ref": "#/components/schemas/TariffRestrictions"
          },
          "price_components": {
            "type": "array",
            "description": "List of price components that describe the pricing of a tariff.",
            "items": {
              "$ref": "#/components/schemas/PriceComponent"
            }
          }
        },
        "description": "List of Tariff Elements."
      },
      "TariffRestrictions": {
        "type": "object",
        "properties": {
          "reservation": {
            "type": "string",
            "description": "When this field is present, the TariffElement describes reservation costs. A reservation starts when the reservation is made, and ends when the driver starts charging on the reserved EVSE/Location, or when the reservation expires. A reservation can only have: FLAT and TIME TariffDimensions, where TIME is for the duration of the reservation.",
            "enum": [
              "RESERVATION",
              "RESERVATION_EXPIRES"
            ]
          },
          "start_time": {
            "maxLength": 5,
            "minLength": 0,
            "type": "string",
            "description": "Start time of day in local time, the time zone is defined in the time_zone field of the Location, for example 13:30, valid from this time of the day. Must be in 24h format with leading zeros.Hour/Minute separator: \":\" Regex: ([0-1][0-9]|2[0-3]):[0-5][0-9]",
            "example": "13:30"
          },
          "end_time": {
            "maxLength": 5,
            "minLength": 0,
            "type": "string",
            "description": "End time of day in local time, the time zone is defined in the time_zone field of the Location, for example 19:45, valid until this time of the day. Same syntax as start_time. If end_time < start_time then the period wraps around to the next day. To stop at end of the day use: 00:00."
          },
          "start_date": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Start date in local time, the time zone is defined in the time_zone field of the Location, for example: 2015-12-24, valid from this day (inclusive).Regex: ([12][0-9]{3})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])",
            "example": "2023-12-24"
          },
          "end_date": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "End date in local time, the time zone is defined in the time_zone field of theLocation, for example: 2015-12-27, valid until this day (exclusive).Same syntax as start_date.",
            "example": "2023-12-27"
          },
          "min_kwh": {
            "type": "number",
            "description": "Minimum consumed energy in kWh, for example 20, valid from this amount of energy (inclusive) being used.",
            "example": 1
          },
          "max_kwh": {
            "type": "number",
            "description": "Maximum consumed energy in kWh, for example 50, valid until this amount of energy (exclusive) being used.",
            "example": 1
          },
          "min_current": {
            "type": "number",
            "description": "Sum of the minimum current (in Amperes) over all phases, for example 5. When the EV is charging with more than, or equal to, the defined amount of current, this TariffElement is/becomes active. If the charging current is or becomes lower, this TariffElement is not or no longer valid and becomes inactive. This describes NOT the minimum current over the entire Charging Session. This restriction can make a TariffElement become active when the charging current is above the defined value, but the TariffElement MUST no longer be active when the charging current drops below the defined value."
          },
          "max_current": {
            "type": "number",
            "description": "Sum of the maximum current (in Amperes) over all phases, for example 20. When the EV is charging with less than the defined amount of current, this TariffElement becomes/is active. If the charging current is or becomes higher, this TariffElement is not or no longer valid and becomes inactive. This describes NOT the maximum current over the entire Charging Session. This restriction can make a TariffElement become active when the charging current is below this value, but the TariffElement MUST no longer be active when the charging current raises above the defined value."
          },
          "min_power": {
            "type": "number",
            "description": "Minimum power in kW, for example 5. When the EV is charging with more than, or equal to, the defined amount of power, this TariffElement is/becomes active. If the charging power is or becomes lower, this TariffElement is not or no longer valid and becomes inactive. This describes NOT the minimum power over the entire Charging Session. This restriction can make a TariffElement become active when the charging power is above this value, but the TariffElement MUST no longer be active when the charging power drops below the defined value."
          },
          "max_power": {
            "type": "number",
            "description": "Maximum power in kW, for example 20. When the EV is charging with less than the defined amount of power, this TariffElement becomes/is active. If the charging power is or becomes higher, this TariffElement is not or no longer valid and becomes inactive. This describes NOT the maximum power over the entire Charging Session. This restriction can make a TariffElement become active when the charging power is below this value, but the TariffElement MUST no longer be active when the charging power raises above the defined value.",
            "example": 32
          },
          "min_duration": {
            "type": "integer",
            "description": "Minimum duration in seconds the Charging Session MUST last (inclusive). When the duration of a Charging Session is longer than the defined value, this TariffElement is or becomes active. Before that moment, this TariffElement is not yet active.",
            "format": "int32"
          },
          "max_duration": {
            "type": "integer",
            "description": "Maximum duration in seconds the Charging Session MUST last (exclusive). When the duration of a Charging Session is shorter than the defined value, this TariffElement is or becomes active. After that moment, this TariffElement is no longer active.",
            "format": "int32"
          },
          "day_of_week": {
            "type": "array",
            "description": "Which day(s) of the week this TariffElement is active.",
            "items": {
              "type": "string",
              "description": "Which day(s) of the week this TariffElement is active.",
              "enum": [
                "MONDAY",
                "TUESDAY",
                "WEDNESDAY",
                "THURSDAY",
                "FRIDAY",
                "SATURDAY",
                "SUNDAY"
              ]
            }
          }
        },
        "description": "These restrictions are not for the entire Charging Session. They only describe if and when a TariffElement becomes active or inactive during a Charging Session."
      },
      "CsmsTariffUpdateRequest": {
        "required": [
          "currency",
          "elements"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "ISO-4217 code of the currency of this tariff.",
            "example": "EUR"
          },
          "type": {
            "type": "string",
            "description": "Defines the type of the tariff. This allows for distinction in case of given Charging Preferences. When omitted, this tariff is valid for all sessions.",
            "example": "REGULAR",
            "enum": [
              "AD_HOC_PAYMENT",
              "PROFILE_CHEAP",
              "PROFILE_FAST",
              "PROFILE_GREEN",
              "REGULAR"
            ]
          },
          "elements": {
            "type": "array",
            "description": "List of Tariff Elements.",
            "items": {
              "$ref": "#/components/schemas/TariffElement"
            }
          },
          "tariff_alt_text": {
            "type": "array",
            "description": "List of multi-language alternative tariff info texts.",
            "items": {
              "$ref": "#/components/schemas/DisplayText"
            }
          },
          "tariff_alt_url": {
            "type": "string",
            "description": "URL to a web page that contains an explanation of the tariff information in human readable form.",
            "example": "https://www.example.com/tariff"
          },
          "min_price": {
            "$ref": "#/components/schemas/Price"
          },
          "max_price": {
            "$ref": "#/components/schemas/Price"
          },
          "start_date_time": {
            "type": "string",
            "description": "The time when this tariff becomes active, in UTC, time_zone field of the Location can be used to convert to local time. Typically used for a new tariff that is already given with the location, before it becomes active.",
            "format": "date-time",
            "example": "2021-03-19T14:11:43Z"
          },
          "end_date_time": {
            "type": "string",
            "description": "The time after which this tariff is no longer valid, in UTC, time_zone field if the Location canbe used to convert to local time. Typically used when this tariff is going to be replaced with a different tariff in the near future.",
            "format": "date-time",
            "example": "2021-03-19T14:11:43Z"
          },
          "energy_mix": {
            "$ref": "#/components/schemas/EnergyMix"
          }
        }
      },
      "CsmsProviderDto": {
        "required": [
          "countryCode",
          "providerId",
          "providerName"
        ],
        "type": "object",
        "properties": {
          "providerName": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^[^@#`/%:;,=?^$()#|+~&%{}.!<>'\"\\[\\]\\\\]+?$",
            "type": "string",
            "description": "The Name of the Provider",
            "example": "Energy Stacks CPO"
          },
          "countryCode": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "The Country Code of the Provider",
            "example": "DE"
          },
          "providerId": {
            "pattern": "^[A-Z]{2}\\*[0-9A-Z]{3}$",
            "type": "string",
            "description": "The provider ID",
            "example": "DE*ERG"
          }
        },
        "description": "The CSMS Provider object that is stored in the CSMS"
      },
      "CsmsProviderUpdateRequest": {
        "required": [
          "providerName"
        ],
        "type": "object",
        "properties": {
          "providerName": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^[^@#`/%:;,=?^$()#|+~&%{}.!<>'\"\\[\\]\\\\]+?$",
            "type": "string",
            "description": "The Name of the Provider",
            "example": "New Energy Stacks CPO"
          }
        }
      },
      "Owner": {
        "type": "object",
        "properties": {
          "ownerId": {
            "type": "string",
            "description": "The ID of the owner",
            "example": "pnXmqFw5XvbPjon8krD_YLP8Ut8hsaND5c3Bbc3q2g4"
          },
          "website": {
            "type": "string",
            "description": "Link to the owner’s website"
          },
          "logo": {
            "type": "string",
            "description": "Image link to the owner’s logo"
          },
          "name": {
            "type": "string",
            "description": "First Last Name or Company Name"
          },
          "contactPerson": {
            "type": "string",
            "description": "First Last Name of the home end user"
          },
          "phoneNumber": {
            "type": "string",
            "description": "phone number of the home end user"
          },
          "emailAddress": {
            "type": "string",
            "description": "email address of the home end user"
          },
          "provider": {
            "$ref": "#/components/schemas/CsmsProviderDto"
          },
          "createdDate": {
            "type": "string",
            "description": "the timestamp at the time that owner entity was created",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "the cpo admin that created the owner record"
          },
          "lastUpdatedDate": {
            "type": "string",
            "description": "the timestamp at the time that owner entity was updated",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "the cpo admin that updated the owner record"
          }
        },
        "description": "Object that contains the record of the owner entity."
      },
      "OwnerRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "website": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string"
          },
          "logo": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^[^@#`/%:;,=?^$()#|+~&%{}.!<>'\"\\[\\]\\\\]+?$",
            "type": "string"
          },
          "contactPerson": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "phoneNumber": {
            "maxLength": 15,
            "minLength": 0,
            "type": "string"
          },
          "emailAddress": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string"
          }
        },
        "description": "Request to Create or Update the owner"
      },
      "SuccessMessageDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          }
        }
      },
      "OwnerLocationResponse": {
        "type": "object",
        "properties": {
          "ownerId": {
            "type": "string",
            "description": "The owner ID"
          },
          "locationId": {
            "type": "string",
            "description": "The location id that is linked to the owner entity"
          }
        },
        "description": "Object that contains location id related to owner entity."
      },
      "AdditionalGeoLocation": {
        "required": [
          "latitude",
          "longitude"
        ],
        "type": "object",
        "properties": {
          "latitude": {
            "maxLength": 10,
            "minLength": 0,
            "pattern": "-?[0-9]{1,2}\\.[0-9]{5,7}",
            "type": "string",
            "description": "Latitude of the point in decimal degree. Decimal separator: \".\", Regex: -?[0-9]{1,2}\\.[0-9]{5,7}",
            "example": "50.770774"
          },
          "longitude": {
            "maxLength": 11,
            "minLength": 0,
            "pattern": "-?[0-9]{1,3}\\.[0-9]{5,7}",
            "type": "string",
            "description": "Longitude of the point in decimal degree. Decimal separator: \".\", Regex: -?[0-9]{1,3}\\.[0-9]{5,7}",
            "example": "-126.104965"
          },
          "name": {
            "$ref": "#/components/schemas/DisplayText"
          }
        },
        "description": "This class defines an additional geo location that is relevant for the Charge Point. The geodetic system to be used is WGS 84.",
        "nullable": true
      },
      "BusinessDetails": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Name of the operator."
          },
          "website": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Link to the operator’s website. An URL a string(255) type following the w3.org spec."
          },
          "logo": {
            "$ref": "#/components/schemas/Image"
          }
        },
        "description": "Information of the owner if available.",
        "nullable": true
      },
      "ChargingStation": {
        "required": [
          "chargingStationId",
          "evses",
          "identityKey",
          "providerId"
        ],
        "type": "object",
        "properties": {
          "identityKey": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "The Unique Identifier of a Charging Station.",
            "example": "ACE324452"
          },
          "chargingStationId": {
            "type": "integer",
            "description": "Identifies the Charging Station.",
            "format": "int32",
            "example": 32567
          },
          "locationDetails": {
            "$ref": "#/components/schemas/LocationDetails"
          },
          "evses": {
            "type": "array",
            "description": "Identifies the list of the EVSEs inside the Charging Station.",
            "items": {
              "$ref": "#/components/schemas/Evse"
            }
          },
          "operationalStatus": {
            "type": "string",
            "description": "Operational status of the Charging Station.",
            "example": "AVAILABLE",
            "enum": [
              "AVAILABLE",
              "BLOCKED",
              "CHARGING",
              "OUTOFORDER"
            ]
          },
          "communicationType": {
            "type": "string",
            "description": "Communication type of the Charging Station.",
            "example": "WiFi",
            "enum": [
              "WiFi",
              "LTE",
              "Ethernet"
            ]
          },
          "installationDate": {
            "type": "string",
            "description": "Installation Date of the Charging Station.",
            "format": "date-time"
          },
          "contactPerson": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Installation contact person of the Charging Station."
          },
          "loadManagementAvailable": {
            "type": "boolean",
            "description": "True when load management is available in the Charging Station.",
            "example": true
          },
          "calibrationLawCompliant": {
            "type": "boolean",
            "description": "True when Charging Station is law compliant.",
            "example": true
          },
          "authenticationMethods": {
            "type": "array",
            "description": "Authentication methods of the Charging Station.",
            "items": {
              "type": "string",
              "description": "Authentication methods of the Charging Station.",
              "enum": [
                "RFID",
                "APP",
                "ISO15118"
              ]
            }
          },
          "capabilities": {
            "type": "array",
            "description": "List of functionalities that Charging Station is capable of.",
            "items": {
              "type": "string",
              "description": "List of functionalities that Charging Station is capable of.",
              "enum": [
                "CHARGING_PROFILE_CAPABLE",
                "CHARGING_PREFERENCES_CAPABLE",
                "CHIP_CARD_SUPPORT",
                "CONTACTLESS_CARD_SUPPORT",
                "CREDIT_CARD_PAYABLE",
                "DEBIT_CARD_PAYABLE",
                "PED_TERMINAL",
                "REMOTE_START_STOP_CAPABLE",
                "RESERVABLE",
                "RFID_READER",
                "TOKEN_GROUP_CAPABLE",
                "UNLOCK_CAPABLE",
                "START_SESSION_CONNECTOR_REQUIRED"
              ]
            }
          },
          "floorLevel": {
            "maxLength": 4,
            "minLength": 0,
            "type": "string",
            "description": "Level on which the Charge Point is located (in garage buildings) in the locally displayed numbering scheme.",
            "example": "2"
          },
          "coordinates": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "physicalReference": {
            "maxLength": 16,
            "minLength": 0,
            "type": "string",
            "description": "A number/string printed on the outside of the Charging Station for visual identification.",
            "example": "WB123AE2"
          },
          "directions": {
            "type": "array",
            "description": "Multi-language human-readable directions when more detailed information on how to reach the Charging Station from the Location is required.",
            "items": {
              "$ref": "#/components/schemas/DisplayText"
            }
          },
          "parkingRestrictions": {
            "type": "array",
            "description": "Restrictions that apply to the parking spot.",
            "items": {
              "type": "string",
              "description": "Restrictions that apply to the parking spot.",
              "enum": [
                "EV_ONLY",
                "PLUGGED",
                "DISABLED",
                "CUSTOMERS",
                "MOTORCYCLES"
              ]
            }
          },
          "images": {
            "type": "array",
            "description": "Links images related to the Charging Station such as photos or logos.",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "providerId": {
            "type": "string",
            "description": "Contains the Provider ID of the CPO.",
            "example": "DE*E3D"
          }
        },
        "description": "The Charging station object that is stored in the database.",
        "nullable": true
      },
      "ChargingStationLocation": {
        "required": [
          "address",
          "city",
          "coordinates",
          "country",
          "country_code",
          "last_updated",
          "location_id",
          "party_id"
        ],
        "type": "object",
        "properties": {
          "publish": {
            "type": "boolean",
            "description": "Defines if a Location may be published on an website or app etc. When this is set to false, only tokens identified in the field: publish_allowed_to are allowed to be shown this Location. When the same location has EVSEs that may be published and may not be published, two 'Locations' should be created.",
            "nullable": true
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Display name of the location.",
            "nullable": true
          },
          "address": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "Street/block name and house number if available."
          },
          "city": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "City or town."
          },
          "state": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "State or province of the location, only to be used when relevant.",
            "nullable": true
          },
          "country": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "ISO 3166-1 alpha-3 code for the country of this location.",
            "example": "DEU"
          },
          "coordinates": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "directions": {
            "type": "array",
            "description": "Human-readable directions on how to reach the location.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/DisplayText"
            }
          },
          "operator": {
            "$ref": "#/components/schemas/BusinessDetails"
          },
          "suboperator": {
            "$ref": "#/components/schemas/BusinessDetails"
          },
          "owner": {
            "$ref": "#/components/schemas/BusinessDetails"
          },
          "facilities": {
            "type": "array",
            "description": "Optional list of facilities this charging location directly belongsmto.",
            "nullable": true,
            "items": {
              "type": "string",
              "description": "Optional list of facilities this charging location directly belongsmto.",
              "nullable": true,
              "enum": [
                "HOTEL",
                "RESTAURANT",
                "CAFE",
                "MALL",
                "SUPERMARKET",
                "SPORT",
                "RECREATION_AREA",
                "NATURE",
                "MUSEUM",
                "BIKE_SHARING",
                "BUS_STOP",
                "TAXI_STAND",
                "TRAM_STOP",
                "METRO_STATION",
                "TRAIN_STATION",
                "AIRPORT",
                "PARKING_LOT",
                "CARPOOL_PARKING",
                "FUEL_STATION",
                "WIFI"
              ]
            }
          },
          "images": {
            "type": "array",
            "description": "Links to images related to the location such as photos or logos.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "chargingStations": {
            "type": "array",
            "description": "The Charging Stations at this location.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ChargingStation"
            }
          },
          "country_code": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "ISO-3166 alpha-2 country code of the CPO that 'owns' this Location.",
            "example": "DE"
          },
          "party_id": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "ID of the CPO that 'owns' this Location (following the ISO-15118 standard)."
          },
          "location_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the location within the CPOs platform (and suboperator platforms). This field can never be changed, modified or renamed."
          },
          "postal_code": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Postal code of the location, may only be omitted when the location has no postal code: in some countries charging locations at highways don’t have postal codes.",
            "nullable": true
          },
          "related_locations": {
            "type": "array",
            "description": "Geographical location of related points relevant to the user.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AdditionalGeoLocation"
            }
          },
          "parking_type": {
            "type": "string",
            "description": "The general type of parking at the charge point location.",
            "nullable": true,
            "enum": [
              "ALONG_MOTORWAY",
              "PARKING_GARAGE",
              "PARKING_LOT",
              "ON_DRIVEWAY",
              "ON_STREET",
              "UNDERGROUND_GARAGE"
            ]
          },
          "time_zone": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "One of IANA tzdata’s TZ-values representing the time zone of the location. For example: \"Europe/Oslo\", \"Europe/Zurich\". (http://www.iana.org/time-zones)",
            "nullable": true,
            "example": "Europe/Oslo"
          },
          "opening_times": {
            "$ref": "#/components/schemas/Hours"
          },
          "charging_when_closed": {
            "type": "boolean",
            "description": "Indicates if the EVSEs are still charging outside the opening hours of the location. E.g. when the parking garage closes its barriers over night, is it allowed to charge till the next morning? Default: true",
            "nullable": true
          },
          "energy_mix": {
            "$ref": "#/components/schemas/EnergyMix"
          },
          "last_updated": {
            "type": "string",
            "description": "Timestamp when this Location or one of its EVSEs or Connectors were last updated (or created).",
            "format": "date-time"
          }
        },
        "description": "The Location object that is stored in the CSMS."
      },
      "ChargingStationOwnerLocation": {
        "type": "object",
        "properties": {
          "chargingStationLocation": {
            "$ref": "#/components/schemas/ChargingStationLocation"
          },
          "ownerId": {
            "type": "string",
            "description": "The ID of the owner entity. This field is optional for connecting location with owner"
          }
        },
        "description": "The Location object that is stored in the CSMS along with Owner ID if applicable."
      },
      "Connector": {
        "required": [
          "format",
          "id",
          "last_updated",
          "max_amperage",
          "max_voltage",
          "power_type",
          "standard"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Identifier of the Connector within the EVSE. Two Connectors may have the same id as long as they do not belong to the same EVSE object.",
            "example": "1"
          },
          "standard": {
            "type": "string",
            "description": "The standard of the installed connector.",
            "enum": [
              "CHADEMO",
              "CHAOJI",
              "DOMESTIC_A",
              "DOMESTIC_B",
              "DOMESTIC_C",
              "DOMESTIC_D",
              "DOMESTIC_E",
              "DOMESTIC_F",
              "DOMESTIC_G",
              "DOMESTIC_H",
              "DOMESTIC_I",
              "DOMESTIC_J",
              "DOMESTIC_K",
              "DOMESTIC_L",
              "DOMESTIC_M",
              "DOMESTIC_N",
              "DOMESTIC_O",
              "GBT_AC",
              "GBT_DC",
              "IEC_60309_2_single_16",
              "IEC_60309_2_three_16",
              "IEC_60309_2_three_32",
              "IEC_60309_2_three_64",
              "IEC_62196_T1",
              "IEC_62196_T1_COMBO",
              "IEC_62196_T2",
              "IEC_62196_T2_COMBO",
              "IEC_62196_T3A",
              "IEC_62196_T3C",
              "NEMA_5_20",
              "NEMA_6_30",
              "NEMA_6_50",
              "NEMA_10_30",
              "NEMA_10_50",
              "NEMA_14_30",
              "NEMA_14_50",
              "PANTOGRAPH_BOTTOM_UP",
              "PANTOGRAPH_TOP_DOWN",
              "TESLA_R",
              "TESLA_S",
              "UNKNOWN"
            ]
          },
          "format": {
            "type": "string",
            "description": "The format (socket/cable) of the installed connector.",
            "enum": [
              "SOCKET",
              "CABLE"
            ]
          },
          "power_type": {
            "type": "string",
            "enum": [
              "AC_1_PHASE",
              "AC_2_PHASE",
              "AC_2_PHASE_SPLIT",
              "AC_3_PHASE",
              "DC"
            ]
          },
          "max_voltage": {
            "type": "integer",
            "description": "Maximum voltage of the connector (line to neutral for AC_3_PHASE), in volt [V]. For example: DC Chargers might vary the voltage during charging when battery almost full.",
            "format": "int32"
          },
          "max_amperage": {
            "type": "integer",
            "description": "Maximum amperage of the connector, in ampere [A].",
            "format": "int32"
          },
          "max_electric_power": {
            "type": "integer",
            "description": "Maximum electric power that can be delivered by this connector, in Watts (W). When the maximum electric power is lower than the calculated value from voltage and amperage, this value should be set. \n    For example: A DC Charge Point which can delivers up to 920V and up to 400A can be limited to a maximum of 150kW (max_electric_power = 150000). Depending on the car, it may supply max voltage or current, but not both at the same time.\nFor AC Charge Points, the amount of phases used can also have influence on the maximum power.",
            "format": "int32"
          },
          "tariff_ids": {
            "uniqueItems": true,
            "type": "array",
            "description": "Identifiers of the currently valid charging tariffs. Multiple tariffs are possible, but only one of each Tariff.type can be active at the same time. Tariffs with the same type are only allowed if they are not active at the same time: start_date_time and end_date_time period not overlapping.\n    When preference-based smart charging is supported, one tariff for every possible ProfileType should be provided. These tell the user about the options they have at this Connector, and what the tariff is for every option.\nFor a \"free of charge\" tariff, this field should be set and point to a defined \"free of charge\" tariff.",
            "items": {
              "maxLength": 36,
              "minLength": 0,
              "type": "string",
              "description": "Identifiers of the currently valid charging tariffs. Multiple tariffs are possible, but only one of each Tariff.type can be active at the same time. Tariffs with the same type are only allowed if they are not active at the same time: start_date_time and end_date_time period not overlapping.\n    When preference-based smart charging is supported, one tariff for every possible ProfileType should be provided. These tell the user about the options they have at this Connector, and what the tariff is for every option.\nFor a \"free of charge\" tariff, this field should be set and point to a defined \"free of charge\" tariff."
            }
          },
          "terms_and_conditions": {
            "type": "string",
            "description": "URL to the operator’s terms and conditions.",
            "format": "url",
            "example": "http://www.example.com"
          },
          "last_updated": {
            "type": "string",
            "description": "Timestamp when this Connector was last updated (or created).",
            "format": "date-time"
          }
        },
        "description": "A Connector is the socket or cable and plug available for the EV to use. A single EVSE may provide multiple Connectors but only one of them can be in use at the same time. A Connector always belongs to an EVSE object."
      },
      "Evse": {
        "required": [
          "connectors",
          "last_updated",
          "status"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the EVSE within the CPOs platform (and suboperator platforms). For example a database ID or the actual \"EVSE ID\". This field can never be changed, modified or renamed. This is the 'technical' identification of the EVSE, not to be used as 'human readable' identification, use the field evse_id for that.This field is named uid instead of id, because id could be confused with evse_id which is an eMI3 defined field."
          },
          "status": {
            "type": "string",
            "description": "Indicates the current status of the EVSE.",
            "enum": [
              "AVAILABLE",
              "BLOCKED",
              "CHARGING",
              "INOPERATIVE",
              "OUTOFORDER",
              "PLANNED",
              "REMOVED",
              "RESERVED",
              "UNKNOWN"
            ]
          },
          "connectors": {
            "type": "array",
            "description": "List of available connectors on the EVSE.",
            "items": {
              "$ref": "#/components/schemas/Connector"
            }
          },
          "evse_id": {
            "maxLength": 48,
            "minLength": 0,
            "type": "string",
            "description": "Compliant with the following specification for EVSE ID from \"eMI3 standard version V1.0\" (http://emi3group.com/documents-links/) \"Part 2: business objects.\" Optional because: if an evse_id is to be re-used in the real world, the evse_id can be removed from an EVSE object if the status is set to REMOVED."
          },
          "status_schedule": {
            "type": "array",
            "description": "Indicates a planned status update of the EVSE.",
            "items": {
              "$ref": "#/components/schemas/StatusSchedule"
            }
          },
          "last_updated": {
            "type": "string",
            "description": "Timestamp when this EVSE or one of its Connectors was last updated (or created).",
            "format": "date-time"
          }
        },
        "description": "The EVSE object describes the part that controls the power supply to a single EV in a single session. It always belongs to a Location object. The object only contains directions to get from the location itself to the EVSE (i.e. floor, physical_reference or directions)."
      },
      "ExceptionalPeriod": {
        "required": [
          "period_begin",
          "period_end"
        ],
        "type": "object",
        "properties": {
          "period_begin": {
            "type": "string",
            "description": "Begin of the exception. SecurityScheme.In UTC, time_zone field can be used to convert to local time.",
            "format": "date-time",
            "example": "2022-06-24T00:00:00Z"
          },
          "period_end": {
            "type": "string",
            "description": "End of the exception. In UTC, time_zone field can be used to convert to local time.",
            "format": "date-time",
            "example": "2022-06-25T00:00:00Z"
          }
        },
        "description": "Specifies one exceptional period for opening or access hours."
      },
      "GeoLocation": {
        "required": [
          "latitude",
          "longitude"
        ],
        "type": "object",
        "properties": {
          "latitude": {
            "type": "string",
            "description": "Latitude of the point in decimal degree. Decimal separator: '.', Regex: -?[0-9]{1,2}\\.[0-9]{5,7}",
            "example": "50.770774"
          },
          "longitude": {
            "type": "string",
            "description": "Longitude of the point in decimal degree. Decimal separator: '.' Regex: -?[0-9]{1,3}\\.[0-9]{5,7}",
            "example": "-126.104965"
          }
        },
        "description": "This class defines the geo location of the Charge Point. The geodetic system to be used is WGS 84."
      },
      "Hours": {
        "required": [
          "twentyfourseven"
        ],
        "type": "object",
        "properties": {
          "twentyfourseven": {
            "type": "boolean",
            "description": "True to represent 24 hours a day and 7 days a week, except the given exceptions.",
            "example": false
          },
          "regular_hours": {
            "type": "array",
            "description": "Regular hours, weekday-based. Only to be used if twentyfourseven=false, then this field needs to contain at least one RegularHours object.",
            "items": {
              "$ref": "#/components/schemas/RegularHours"
            }
          },
          "exceptional_openings": {
            "type": "array",
            "description": "Exceptions for specified calendar dates, time-range based. Periods the station is operating/accessible. Additional to regular_hours. May overlap regular rules.",
            "items": {
              "$ref": "#/components/schemas/ExceptionalPeriod"
            }
          },
          "exceptional_closings": {
            "type": "array",
            "description": "Exceptions for specified calendar dates, time-range based. Periods the station is not operating/accessible. Overwriting regular_hours and exceptional_openings. Should not overlap exceptional_openings.",
            "items": {
              "$ref": "#/components/schemas/ExceptionalPeriod"
            }
          }
        },
        "description": "Opening and access hours of the location.",
        "nullable": true
      },
      "Image": {
        "required": [
          "category",
          "type",
          "url"
        ],
        "type": "object",
        "properties": {
          "url": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "URL from where the image data can be fetched through a web browser."
          },
          "thumbnail": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "URL from where a thumbnail of the image can be fetched through a web browser."
          },
          "category": {
            "type": "string",
            "description": "Describes what the image is used for.",
            "example": "CHARGER",
            "enum": [
              "CHARGER",
              "ENTRANCE",
              "LOCATION",
              "NETWORK",
              "OPERATOR",
              "OTHER",
              "OWNER"
            ]
          },
          "type": {
            "maxLength": 4,
            "minLength": 0,
            "type": "string",
            "description": "Image type, for example: gif, jpeg, png, svg",
            "example": "jpeg"
          },
          "width": {
            "type": "integer",
            "description": "Width of the full scale image.",
            "format": "int32",
            "example": 50
          },
          "height": {
            "type": "integer",
            "description": "Height of the full scale image.",
            "format": "int32",
            "example": 600
          }
        },
        "description": "Links images related to the Charging Station such as photos or logos."
      },
      "LocationDetails": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Display name of the location.",
            "nullable": true
          },
          "id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the location within the CPOs platform (and suboperator platforms).This field can never be changed, modified or renamed."
          }
        },
        "description": "Contains only the most relevant data of a Location."
      },
      "RegularHours": {
        "required": [
          "period_begin",
          "period_end",
          "weekday"
        ],
        "type": "object",
        "properties": {
          "weekday": {
            "type": "integer",
            "description": "Number of day in the week, from Monday (1) till Sunday (7)",
            "format": "int32",
            "example": 1
          },
          "period_begin": {
            "maxLength": 5,
            "minLength": 0,
            "pattern": "([0-1][0-9]|2[0-3]):[0-5][0-9]",
            "type": "string",
            "description": "Begin of the regular period, in local time, given in hours and minutes. Must be in 24h format with leading zeros. Example: \"18:15\". Hour/Minute separator: \":\" Regex: ([0-1][0-9]|2[0-3]):[0-5][0-9].",
            "example": "07:00"
          },
          "period_end": {
            "maxLength": 5,
            "minLength": 0,
            "pattern": "([0-1][0-9]|2[0-3]):[0-5][0-9]",
            "type": "string",
            "description": "End of the regular period, in local time, syntax as for period_begin. Must be later than period_begin.",
            "example": "18:00"
          }
        },
        "description": "Regular recurring operation or access hours."
      },
      "StatusSchedule": {
        "required": [
          "period_begin",
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status value during the scheduled period.",
            "enum": [
              "AVAILABLE",
              "BLOCKED",
              "CHARGING",
              "INOPERATIVE",
              "OUTOFORDER",
              "PLANNED",
              "REMOVED",
              "RESERVED",
              "UNKNOWN"
            ]
          },
          "period_begin": {
            "type": "string",
            "description": "Begin of the scheduled period.",
            "format": "date-time"
          },
          "period_end": {
            "type": "string",
            "description": "End of the scheduled period, if known.",
            "format": "date-time"
          }
        },
        "description": "This type is used to schedule status periods in the future. The eMSP can provide this information to the EV user for trip planning purposes. A period MAY have no end. Example: \"This station will be running as of tomorrow. Today it is still planned and under construction.\""
      },
      "LocationUpdateRequest": {
        "required": [
          "address",
          "city",
          "country"
        ],
        "type": "object",
        "properties": {
          "publish": {
            "type": "boolean",
            "description": "Defines if a Location may be published on an website or app etc.When this is set to false, only tokens identified in the field: publish_allowed_to are allowed to beshown this Location. When the same location has EVSEs that may be published and may not be published, two 'Locations' should be created.",
            "nullable": true
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Display name of the location.",
            "nullable": true
          },
          "address": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "Street/block name and house number if available."
          },
          "city": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "City or town."
          },
          "state": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "State or province of the location, only to be used when relevant.",
            "nullable": true
          },
          "country": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "ISO 3166-1 alpha-3 code for the country of this location.",
            "example": "DEU"
          },
          "coordinates": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "directions": {
            "type": "array",
            "description": "Human-readable directions on how to reach the location.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/DisplayText"
            }
          },
          "operator": {
            "$ref": "#/components/schemas/BusinessDetails"
          },
          "suboperator": {
            "$ref": "#/components/schemas/BusinessDetails"
          },
          "owner": {
            "$ref": "#/components/schemas/BusinessDetails"
          },
          "facilities": {
            "type": "array",
            "description": "Optional list of facilities this charging location directly belongs to.",
            "nullable": true,
            "items": {
              "type": "string",
              "description": "Optional list of facilities this charging location directly belongs to.",
              "nullable": true,
              "enum": [
                "HOTEL",
                "RESTAURANT",
                "CAFE",
                "MALL",
                "SUPERMARKET",
                "SPORT",
                "RECREATION_AREA",
                "NATURE",
                "MUSEUM",
                "BIKE_SHARING",
                "BUS_STOP",
                "TAXI_STAND",
                "TRAM_STOP",
                "METRO_STATION",
                "TRAIN_STATION",
                "AIRPORT",
                "PARKING_LOT",
                "CARPOOL_PARKING",
                "FUEL_STATION",
                "WIFI"
              ]
            }
          },
          "images": {
            "type": "array",
            "description": "Links to images related to the location such as photos or logos.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "postal_code": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Postal code of the location, may only be omitted when the location has no postal code: in some countries charging locations at highways don’t have postal codes.",
            "nullable": true
          },
          "related_locations": {
            "type": "array",
            "description": "Geographical location of related points relevant to the user.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AdditionalGeoLocation"
            }
          },
          "parking_type": {
            "type": "string",
            "description": "The general type of parking at the charge point location.",
            "nullable": true,
            "example": "PARKING_GARAGE",
            "enum": [
              "ALONG_MOTORWAY",
              "PARKING_GARAGE",
              "PARKING_LOT",
              "ON_DRIVEWAY",
              "ON_STREET",
              "UNDERGROUND_GARAGE"
            ]
          },
          "time_zone": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "One of IANA tzdata’s TZ-values representing the time zone of the location.For example: \"Europe/Oslo\", \"Europe/Zurich\". (http://www.iana.org/time-zones)",
            "nullable": true,
            "example": "Europe/Oslo"
          },
          "opening_times": {
            "$ref": "#/components/schemas/Hours"
          },
          "charging_when_closed": {
            "type": "boolean",
            "description": "Indicates if the EVSEs are still charging outside the opening hours of the location. E.g. when the parking garage closes its barriers over night, is it allowed to charge till the next morning? Default: true",
            "nullable": true
          },
          "energy_mix": {
            "$ref": "#/components/schemas/EnergyMix"
          }
        },
        "description": "The Location object describes the location and its properties where a group of EVSEsthat belong together are installed. Typically, the Location object is the exact location of the group of EVSEs,but it can also be the entrance of a parking garage which contains these EVSEs.The exact way to reach each EVSE can be further specified by its own properties."
      },
      "OwnerLocationUpdateRequest": {
        "required": [
          "locationUpdateRequest"
        ],
        "type": "object",
        "properties": {
          "ownerId": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "The id of the owner entity. This field is optional for connecting location with owner"
          },
          "locationUpdateRequest": {
            "$ref": "#/components/schemas/LocationUpdateRequest"
          }
        },
        "description": "This POJO request contains the LocationUpdateRequest dto along with the owner ID if applicable. "
      },
      "ChargingStationGroupDetails": {
        "type": "object",
        "properties": {
          "chargingStationGroupUuid": {
            "type": "string",
            "description": "Unique Charging Station Group UUID",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "chargingStationGroupName": {
            "type": "string",
            "description": "The Charging Station Group name",
            "example": "Test Group No1"
          }
        },
        "description": "Charging Station Group model, filled only with the required information."
      },
      "CsmsChargingStation": {
        "required": [
          "chargingStationId",
          "chargingStationName",
          "chargingStationSerialNumber",
          "evses",
          "identityKey",
          "providerId"
        ],
        "type": "object",
        "properties": {
          "identityKey": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "The Unique Identifier of a Charging Station.",
            "example": "ACE324452"
          },
          "chargingStationId": {
            "type": "integer",
            "description": "Identifies the Charging Station.",
            "format": "int32",
            "example": 32567
          },
          "locationDetails": {
            "$ref": "#/components/schemas/LocationDetails"
          },
          "evses": {
            "type": "array",
            "description": "Identifies the list of the EVSEs inside the Charging Station.",
            "items": {
              "$ref": "#/components/schemas/Evse"
            }
          },
          "operationalStatus": {
            "type": "string",
            "description": "Operational status of the Charging Station.",
            "example": "AVAILABLE",
            "enum": [
              "AVAILABLE",
              "BLOCKED",
              "CHARGING",
              "OUTOFORDER"
            ]
          },
          "communicationType": {
            "type": "string",
            "description": "Communication type of the Charging Station.",
            "example": "WiFi",
            "enum": [
              "WiFi",
              "LTE",
              "Ethernet"
            ]
          },
          "installationDate": {
            "type": "string",
            "description": "Installation Date of the Charging Station.",
            "format": "date-time"
          },
          "contactPerson": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Installation contact person of the Charging Station."
          },
          "loadManagementAvailable": {
            "type": "boolean",
            "description": "True when load management is available in the Charging Station.",
            "example": true
          },
          "calibrationLawCompliant": {
            "type": "boolean",
            "description": "True when Charging Station is law compliant.",
            "example": true
          },
          "authenticationMethods": {
            "type": "array",
            "description": "Authentication methods of the Charging Station.",
            "items": {
              "type": "string",
              "description": "Authentication methods of the Charging Station.",
              "enum": [
                "RFID",
                "APP",
                "ISO15118"
              ]
            }
          },
          "capabilities": {
            "type": "array",
            "description": "List of functionalities that Charging Station is capable of.",
            "items": {
              "type": "string",
              "description": "List of functionalities that Charging Station is capable of.",
              "enum": [
                "CHARGING_PROFILE_CAPABLE",
                "CHARGING_PREFERENCES_CAPABLE",
                "CHIP_CARD_SUPPORT",
                "CONTACTLESS_CARD_SUPPORT",
                "CREDIT_CARD_PAYABLE",
                "DEBIT_CARD_PAYABLE",
                "PED_TERMINAL",
                "REMOTE_START_STOP_CAPABLE",
                "RESERVABLE",
                "RFID_READER",
                "TOKEN_GROUP_CAPABLE",
                "UNLOCK_CAPABLE",
                "START_SESSION_CONNECTOR_REQUIRED"
              ]
            }
          },
          "floorLevel": {
            "maxLength": 4,
            "minLength": 0,
            "type": "string",
            "description": "Level on which the Charge Point is located (in garage buildings) in the locally displayed numbering scheme.",
            "example": "2"
          },
          "coordinates": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "physicalReference": {
            "maxLength": 16,
            "minLength": 0,
            "type": "string",
            "description": "A number/string printed on the outside of the Charging Station for visual identification.",
            "example": "WB123AE2"
          },
          "directions": {
            "type": "array",
            "description": "Multi-language human-readable directions when more detailed information on how to reach the Charging Station from the Location is required.",
            "items": {
              "$ref": "#/components/schemas/DisplayText"
            }
          },
          "parkingRestrictions": {
            "type": "array",
            "description": "Restrictions that apply to the parking spot.",
            "items": {
              "type": "string",
              "description": "Restrictions that apply to the parking spot.",
              "enum": [
                "EV_ONLY",
                "PLUGGED",
                "DISABLED",
                "CUSTOMERS",
                "MOTORCYCLES"
              ]
            }
          },
          "images": {
            "type": "array",
            "description": "Links images related to the Charging Station such as photos or logos.",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "providerId": {
            "type": "string",
            "description": "Contains the Provider ID of the CPO.",
            "example": "DE*E3D"
          },
          "chargingStationGroupDetails": {
            "$ref": "#/components/schemas/ChargingStationGroupDetails"
          },
          "chargingStationName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "If not provided then default value: <charging_station_model> + <identity_key>.If 'charging_station_model' is null, then 'charging_station_name' = 'identity_key'",
            "example": "WallBox NG Pro 1550"
          },
          "chargingStationVendor": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string"
          },
          "chargingStationModel": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "The Charging Station model.",
            "example": "WallBox NG Pro"
          },
          "firmwareVersion": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "userName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The basic auth user name",
            "example": "acc-21107439"
          },
          "password": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The basic auth password",
            "example": "myS3cR3tPass|||0Rd"
          },
          "chargingStationSerialNumber": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Serial number of a charging station (number provided on hardware).It is provided in BootNotification message.",
            "example": "SN152251"
          },
          "ocppProtocolVersion": {
            "type": "string",
            "description": "The OCPP protocol version which should be negotiated during the handshake.",
            "example": "V_16",
            "enum": [
              "V_15",
              "V_16",
              "V_20",
              "V_201"
            ]
          },
          "iccid": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "The ICCID of the modem’s SIM card."
          },
          "imsi": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "The IMSI of the modem’s SIM card."
          },
          "meterSerialNumber": {
            "maxLength": 25,
            "minLength": 0,
            "type": "string",
            "description": "The serial number of the main power meter of the Charging Station."
          },
          "meterType": {
            "maxLength": 25,
            "minLength": 0,
            "type": "string",
            "description": "The type of the main power meter of the Charging Station."
          },
          "online": {
            "type": "boolean",
            "description": "Indicates if the Charging Station is online."
          },
          "dateCreated": {
            "type": "string",
            "description": "Creation date and time of the  of Charging Station",
            "format": "date-time",
            "example": "2024-03-19T14:11:43Z"
          },
          "dateLastHeartBeat": {
            "type": "string",
            "description": "The date and time of the last received heartbeat",
            "format": "date-time"
          },
          "dateLastBoot": {
            "type": "string",
            "description": "The date and time of the last boot event",
            "format": "date-time"
          },
          "csmsUuid": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "UUID of the CSMS, that this Charging Station belongs to.",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "csmsDisplayName": {
            "type": "string",
            "description": "Display name of the CSMS.",
            "example": "EnergyStacks CSMS"
          }
        },
        "description": "Common Charging Station DTO for the services: svc-chargingstation, svc-ocpp-server & svc-ocpp-broker (if exists)."
      },
      "CsmsChargingStationUpdateRequest": {
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "description": "This contains the location id of the Charging Station."
          },
          "operationalStatus": {
            "type": "string",
            "description": "This contains the operational status of the Charging Station.",
            "enum": [
              "AVAILABLE",
              "BLOCKED",
              "CHARGING",
              "OUTOFORDER"
            ]
          },
          "communicationType": {
            "type": "string",
            "description": "This contains the communication type of the Charging Station.",
            "enum": [
              "WiFi",
              "LTE",
              "Ethernet"
            ]
          },
          "installationDate": {
            "type": "string",
            "description": "This contains the installation Date of the Charging Station.",
            "format": "date-time"
          },
          "contactPerson": {
            "type": "string",
            "description": "This contains the installation contract person of the Charging Station."
          },
          "loadManagementAvailable": {
            "type": "boolean",
            "description": "This contains if the load management is available in the Charging Station.",
            "example": true
          },
          "calibrationLawCompliant": {
            "type": "boolean",
            "description": "This contains if the Charging Station is law compliant.",
            "example": true
          },
          "authenticationMethods": {
            "type": "array",
            "description": "This contains the authentication methods of the Charging Station.",
            "items": {
              "type": "string",
              "description": "This contains the authentication methods of the Charging Station.",
              "enum": [
                "RFID",
                "APP",
                "ISO15118"
              ]
            }
          },
          "capabilities": {
            "type": "array",
            "description": "List of functionalities that Charging Station is capable of",
            "items": {
              "type": "string",
              "description": "List of functionalities that Charging Station is capable of",
              "enum": [
                "CHARGING_PROFILE_CAPABLE",
                "CHARGING_PREFERENCES_CAPABLE",
                "CHIP_CARD_SUPPORT",
                "CONTACTLESS_CARD_SUPPORT",
                "CREDIT_CARD_PAYABLE",
                "DEBIT_CARD_PAYABLE",
                "PED_TERMINAL",
                "REMOTE_START_STOP_CAPABLE",
                "RESERVABLE",
                "RFID_READER",
                "TOKEN_GROUP_CAPABLE",
                "UNLOCK_CAPABLE",
                "START_SESSION_CONNECTOR_REQUIRED"
              ]
            }
          },
          "floorLevel": {
            "maxLength": 4,
            "minLength": 0,
            "type": "string",
            "description": "Level on which the Charge Point is located (in garage buildings) in the locally displayed numbering scheme.",
            "example": "2"
          },
          "coordinates": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "physicalReference": {
            "maxLength": 16,
            "minLength": 0,
            "type": "string",
            "description": "A number/string printed on the outside of the Charging Station for visual identification.",
            "example": "WB123AE2"
          },
          "directions": {
            "type": "array",
            "description": "Multi-language human-readable directions when more detailed information on how to reach the Charging Station from the Location is required.",
            "items": {
              "$ref": "#/components/schemas/DisplayText"
            }
          },
          "parkingRestrictions": {
            "type": "array",
            "description": "The restrictions that apply to the parking spot.",
            "items": {
              "type": "string",
              "description": "The restrictions that apply to the parking spot.",
              "enum": [
                "EV_ONLY",
                "PLUGGED",
                "DISABLED",
                "CUSTOMERS",
                "MOTORCYCLES"
              ]
            }
          },
          "images": {
            "type": "array",
            "description": "Links images related to the Charging Station such as photos or logos.",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "chargingStationName": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^[^@#`/%:;,=?^$()#|+~&%{}.!<>'\"\\[\\]\\\\]+?$",
            "type": "string",
            "description": "If not provided then default value: <charging_station_model> + <identity_key>.If 'charging_station_model' is null, then 'charging_station_name' = 'identity_key'",
            "example": "WallBox NG Pro 1550"
          },
          "chargingStationModel": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "The Charging Station model.",
            "example": "WallBox NG Pro Ultra"
          },
          "csmsUuid": {
            "maxLength": 36,
            "minLength": 0,
            "pattern": "^(?i)[0-9A-F]{8}-[0-9A-F]{4}-[4][0-9A-F]{3}-[89abAB][0-9A-F]{3}-[0-9A-F]{12}$",
            "type": "string",
            "description": "UUID of the CSMS, that this Charging Station belongs to.",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "chargingStationGroupUuid": {
            "pattern": "^(?i)[0-9A-F]{8}-[0-9A-F]{4}-[4][0-9A-F]{3}-[89abAB][0-9A-F]{3}-[0-9A-F]{12}$",
            "type": "string",
            "description": "The Charging Station Group UUID that belongs to the provided Location. If Location ID is null or empty, then this field must be null too.",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          }
        }
      },
      "ConnectorRequest": {
        "required": [
          "format",
          "id",
          "last_updated",
          "max_amperage",
          "max_voltage",
          "power_type",
          "standard"
        ],
        "type": "object",
        "properties": {
          "id": {
            "minimum": 1,
            "type": "integer",
            "description": "Identifier of the Connector within the EVSE. Two Connectors may have the same id as long as they do not belong to the same EVSE object.",
            "format": "int32",
            "example": 1
          },
          "standard": {
            "type": "string",
            "description": "The standard of the installed connector.",
            "enum": [
              "CHADEMO",
              "CHAOJI",
              "DOMESTIC_A",
              "DOMESTIC_B",
              "DOMESTIC_C",
              "DOMESTIC_D",
              "DOMESTIC_E",
              "DOMESTIC_F",
              "DOMESTIC_G",
              "DOMESTIC_H",
              "DOMESTIC_I",
              "DOMESTIC_J",
              "DOMESTIC_K",
              "DOMESTIC_L",
              "DOMESTIC_M",
              "DOMESTIC_N",
              "DOMESTIC_O",
              "GBT_AC",
              "GBT_DC",
              "IEC_60309_2_single_16",
              "IEC_60309_2_three_16",
              "IEC_60309_2_three_32",
              "IEC_60309_2_three_64",
              "IEC_62196_T1",
              "IEC_62196_T1_COMBO",
              "IEC_62196_T2",
              "IEC_62196_T2_COMBO",
              "IEC_62196_T3A",
              "IEC_62196_T3C",
              "NEMA_5_20",
              "NEMA_6_30",
              "NEMA_6_50",
              "NEMA_10_30",
              "NEMA_10_50",
              "NEMA_14_30",
              "NEMA_14_50",
              "PANTOGRAPH_BOTTOM_UP",
              "PANTOGRAPH_TOP_DOWN",
              "TESLA_R",
              "TESLA_S",
              "UNKNOWN"
            ]
          },
          "format": {
            "type": "string",
            "description": "The format (socket/cable) of the installed connector.",
            "enum": [
              "SOCKET",
              "CABLE"
            ]
          },
          "power_type": {
            "type": "string",
            "enum": [
              "AC_1_PHASE",
              "AC_2_PHASE",
              "AC_2_PHASE_SPLIT",
              "AC_3_PHASE",
              "DC"
            ]
          },
          "max_voltage": {
            "type": "integer",
            "description": "Maximum voltage of the connector (line to neutral for AC_3_PHASE), in volt [V]. For example: DC Chargers might vary the voltage during charging when battery almost full.",
            "format": "int32"
          },
          "max_amperage": {
            "type": "integer",
            "description": "Maximum amperage of the connector, in ampere [A].",
            "format": "int32"
          },
          "max_electric_power": {
            "type": "integer",
            "description": "Maximum electric power that can be delivered by this connector, in Watts (W). When the maximum electric power is lower than the calculated value from voltage and amperage, this value should be set. \n    For example: A DC Charge Point which can delivers up to 920V and up to 400A can be limited to a maximum of 150kW (max_electric_power = 150000). Depending on the car, it may supply max voltage or current, but not both at the same time.\nFor AC Charge Points, the amount of phases used can also have influence on the maximum power.",
            "format": "int32"
          },
          "terms_and_conditions": {
            "type": "string",
            "description": "URL to the operator’s terms and conditions.",
            "format": "url",
            "example": "http://www.example.com"
          },
          "last_updated": {
            "type": "string",
            "description": "Timestamp when this Connector was last updated (or created).",
            "format": "date-time"
          }
        },
        "description": "List of available connectors on the EVSE."
      },
      "EvseUpdateRequest": {
        "required": [
          "connectors",
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates the current status of the EVSE.",
            "enum": [
              "AVAILABLE",
              "BLOCKED",
              "CHARGING",
              "INOPERATIVE",
              "OUTOFORDER",
              "PLANNED",
              "REMOVED",
              "RESERVED",
              "UNKNOWN"
            ]
          },
          "connectors": {
            "type": "array",
            "description": "List of available connectors on the EVSE.",
            "items": {
              "$ref": "#/components/schemas/ConnectorRequest"
            }
          },
          "status_schedule": {
            "type": "array",
            "description": "Indicates a planned status update of the EVSE.",
            "items": {
              "$ref": "#/components/schemas/StatusSchedule"
            }
          }
        }
      },
      "ChargingStationGroup": {
        "required": [
          "chargingStationGroupName",
          "chargingStationGroupUuid",
          "locationId",
          "providerId"
        ],
        "type": "object",
        "properties": {
          "chargingStationGroupUuid": {
            "type": "string",
            "description": "Unique Charging Station Group UUID",
            "format": "uuid",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "locationId": {
            "maxLength": 36,
            "minLength": 0,
            "pattern": "^(?i)[0-9A-F]{8}-[0-9A-F]{4}-[4][0-9A-F]{3}-[89abAB][0-9A-F]{3}-[0-9A-F]{12}$",
            "type": "string",
            "description": "The Location ID, of the current Charging Station Group.",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "chargingStationGroupName": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^[^@#`/%:;,=?^$()#|+~&%{}.!<>'\"\\[\\]\\\\]+?$",
            "type": "string",
            "description": "The Charging Station Group name",
            "example": "Test Group No1"
          },
          "chargingStationIdentityKeys": {
            "type": "array",
            "description": "The Identity Keys of Charging Stations that belong to this Group.",
            "items": {
              "$ref": "#/components/schemas/ChargingStationGroupIdentityKey"
            }
          },
          "providerId": {
            "maxLength": 6,
            "minLength": 6,
            "pattern": "^[A-Z]{2}\\*[0-9A-Z]{3}$",
            "type": "string",
            "description": "The ID of the Provider.",
            "example": "DE*ERG"
          }
        }
      },
      "ChargingStationGroupIdentityKey": {
        "type": "object",
        "properties": {
          "identityKey": {
            "type": "string"
          }
        },
        "description": "The Identity Keys of Charging Stations that belong to this Group."
      },
      "ChargingStationGroupUpdateRequest": {
        "required": [
          "chargingStationGroupName"
        ],
        "type": "object",
        "properties": {
          "chargingStationGroupName": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^[^@#`/%:;,=?^$()#|+~&%{}.!<>'\"\\[\\]\\\\]+?$",
            "type": "string",
            "description": "This contains the Charging Station Group name",
            "example": "Test Updated Group Name"
          }
        }
      },
      "Csms": {
        "required": [
          "csmsUrl",
          "displayName",
          "isCsmsCredentialsUsed",
          "isDefault",
          "uuid"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Unique Id of the CSMS, used for external identifier.",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "displayName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Unique CSMS display name",
            "example": "EnergyStacks CSMS"
          },
          "csmsUrl": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "CSMS URL",
            "example": "wss://csms.energystacks.io/ocpp/"
          },
          "isDefault": {
            "type": "boolean",
            "description": "Identifies if the current CSMS is the default one or not",
            "example": false
          },
          "username": {
            "type": "string",
            "description": "The user name of the CSMS credentials",
            "example": "user"
          },
          "password": {
            "type": "string",
            "description": "The password of the CSMS credentials",
            "example": "Pass@123"
          },
          "ocppProtocol": {
            "type": "string",
            "description": "Defines the OCPP protocol version which is supported by the CSMS in case only one version is supported. Will be used for protocol version translation",
            "enum": [
              "V_15",
              "V_16",
              "V_20",
              "V_201"
            ]
          },
          "isCsmsCredentialsUsed": {
            "type": "boolean",
            "description": "Identifies whether the CSMS credentials are going to be used or not."
          }
        }
      },
      "CsmsUpdateRequest": {
        "required": [
          "csmsUrl",
          "displayName",
          "isCsmsCredentialsUsed",
          "isDefault"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Unique CSMS display name",
            "example": "EnergyStacks CSMS_2"
          },
          "csmsUrl": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^(ws://|wss://)+[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z0-9]{2,63}(:[0-9]{1,5})?(/.*)?$",
            "type": "string",
            "description": "CSMS URL",
            "example": "wss://csms.energystacks.io/ocpp/"
          },
          "isDefault": {
            "type": "boolean",
            "description": "Identifies if the current CSMS is the default one or not",
            "example": false
          },
          "username": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The user name of the CSMS credentials",
            "example": "user"
          },
          "password": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The password of the CSMS credentials",
            "example": "Pass@123"
          },
          "confirmPassword": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The confirmation password of the CSMS credentials",
            "example": "Pass@123"
          },
          "ocppProtocol": {
            "type": "string",
            "description": "Defines the OCPP protocol version which is supported by the CSMS in case only one version is supported. Will be used for protocol version translation",
            "enum": [
              "V_15",
              "V_16",
              "V_20",
              "V_201"
            ]
          },
          "isCsmsCredentialsUsed": {
            "type": "boolean",
            "description": "Identifies whether the CSMS credentials are going to be used or not."
          }
        }
      },
      "CsmsTokenCreateRequest": {
        "required": [
          "issuer",
          "type",
          "uid",
          "valid",
          "whitelist"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "    The type of token\n    * <p>\n    * NOTE: The eMSP is RECOMMENDED to push Tokens with type: AD_HOC_USER or APP_USER with whitelist set to\n    * NEVER. Whitelists are very useful for RFID type Tokens, but the AD_HOC_USER/APP_USER Tokens are used to\n    * start Sessions from an App etc. so whitelisting them has no advantages.\n    * </p>\n",
            "example": "RFID",
            "enum": [
              "AD_HOC_USER",
              "APP_USER",
              "OTHER",
              "RFID"
            ]
          },
          "issuer": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Issuing company, most of the times the name of the company printed on the token (RFID card), not necessarily the eMSP.",
            "example": "TheNewMotion"
          },
          "whitelist": {
            "type": "string",
            "description": "Indicates what type of white-listing is allowed.",
            "example": "ALLOWED",
            "enum": [
              "ALWAYS",
              "ALLOWED",
              "ALLOWED_OFFLINE",
              "NEVER"
            ]
          },
          "uid": {
            "maxLength": 20,
            "minLength": 0,
            "pattern": "([A-Za-z0-9\\-\\_]+)",
            "type": "string",
            "description": "Unique ID by which this Token can be identified. This is the field used by CPO system (RFID reader on the Charge Point) to identify this token. Currently, in most cases: type=RFID, this is the RFID hidden ID as read by the RFID reader, but that is not a requirement. If this is a APP_USER or AD_HOC_USER Token, it will be a uniquely, by the eMSP, generated ID. This field is named uid instead of id to prevent confusion with: contract_id.",
            "example": "08a8c5d2f13b9100"
          },
          "visual_number": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Visual readable number/identification as printed on the Token (RFID card), might be equal to the contract_id.",
            "example": "DF000-2001-8999-1"
          },
          "group_id": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "This ID groups a couple of tokens. This can be used to make two or more tokens work as one, so that a session can be started with one token and stopped with another, handy when a card and key-fob are given to the EV-driver. Beware that OCPP 1.5/1.6 only support group_ids (it is called parentId in OCPP 1.5/1.6) with a maximum length of 20.",
            "example": "DF000-2001-8999"
          },
          "valid": {
            "type": "boolean",
            "description": "Is this Token valid"
          },
          "expiry_date": {
            "type": "string",
            "description": "Timestamp when Token expires in Charging Station local authorization cache.",
            "format": "date-time"
          }
        }
      },
      "CsmsTariffCreateRequest": {
        "required": [
          "currency",
          "elements"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "ISO-4217 code of the currency of this tariff.",
            "example": "EUR"
          },
          "type": {
            "type": "string",
            "description": "Defines the type of the tariff. This allows for distinction in case of given Charging Preferences. When omitted, this tariff is valid for all sessions.",
            "example": "REGULAR",
            "enum": [
              "AD_HOC_PAYMENT",
              "PROFILE_CHEAP",
              "PROFILE_FAST",
              "PROFILE_GREEN",
              "REGULAR"
            ]
          },
          "elements": {
            "type": "array",
            "description": "List of Tariff Elements.",
            "items": {
              "$ref": "#/components/schemas/TariffElement"
            }
          },
          "tariff_alt_text": {
            "type": "array",
            "description": "List of multi-language alternative tariff info texts.",
            "items": {
              "$ref": "#/components/schemas/DisplayText"
            }
          },
          "tariff_alt_url": {
            "type": "string",
            "description": "URL to a web page that contains an explanation of the tariff information in human readable form.",
            "example": "https://www.example.com/tariff"
          },
          "min_price": {
            "$ref": "#/components/schemas/Price"
          },
          "max_price": {
            "$ref": "#/components/schemas/Price"
          },
          "start_date_time": {
            "type": "string",
            "description": "The time when this tariff becomes active, in UTC, time_zone field of the Location can be used to convert to local time. Typically used for a new tariff that is already given with the location, before it becomes active.",
            "format": "date-time",
            "example": "2021-03-19T14:11:43Z"
          },
          "end_date_time": {
            "type": "string",
            "description": "The time after which this tariff is no longer valid, in UTC, time_zone field if the Location can be used to convert to local time. Typically used when this tariff is going to be replaced with a different tariff in the near future.",
            "format": "date-time",
            "example": "2021-03-19T14:11:43Z"
          },
          "energy_mix": {
            "$ref": "#/components/schemas/EnergyMix"
          }
        }
      },
      "CsmsProviderCreateRequest": {
        "required": [
          "providerId",
          "providerName"
        ],
        "type": "object",
        "properties": {
          "providerName": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^[^@#`/%:;,=?^$()#|+~&%{}.!<>'\"\\[\\]\\\\]+?$",
            "type": "string",
            "description": "The Name of the Provider",
            "example": "Energy Stacks CPO"
          },
          "providerId": {
            "pattern": "^[A-Z]{2}\\*[0-9A-Z]{3}$",
            "type": "string",
            "description": "The provider ID",
            "example": "DE*ERG"
          }
        }
      },
      "UnlockConnectorConfirmation": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "This indicates whether the Charge Point has unlocked the connector.",
            "enum": [
              "Unlocked",
              "UnlockFailed",
              "NotSupported"
            ]
          }
        }
      },
      "UnlockConnectorReq": {
        "required": [
          "connectorId"
        ],
        "type": "object",
        "properties": {
          "connectorId": {
            "type": "integer",
            "description": "This contains the identifier of the connector to be unlocked.",
            "format": "int32"
          }
        }
      },
      "ResetConfirmation": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "This indicates whether the Charge Point is able to perform the reset.",
            "enum": [
              "Accepted",
              "Rejected"
            ]
          }
        }
      },
      "ResetReq": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This contains the type of reset that the Charge Point should perform.",
            "enum": [
              "Hard",
              "Soft"
            ]
          }
        }
      },
      "RemoteStopTransactionConfirmation": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status indicating whether Charge Point accepts the request to stop a transaction.",
            "enum": [
              "Accepted",
              "Rejected"
            ]
          }
        }
      },
      "RemoteStopTransactionReq": {
        "required": [
          "transactionId"
        ],
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "integer",
            "description": "This contains the identifier of the transaction which Charge Point is requested to stop.",
            "format": "int32"
          }
        }
      },
      "RemoteStartTransactionConfirmation": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status indicating whether Charge Point accepts the request to start a transaction.",
            "enum": [
              "Accepted",
              "Rejected"
            ]
          }
        }
      },
      "OcppChargingProfile": {
        "required": [
          "chargingProfileId",
          "chargingProfileKind",
          "chargingProfilePurpose",
          "chargingSchedule",
          "stackLevel"
        ],
        "type": "object",
        "properties": {
          "chargingProfileId": {
            "type": "integer",
            "description": "Unique identifier for this profile.",
            "format": "int32"
          },
          "transactionId": {
            "type": "integer",
            "description": "Only valid if ChargingProfilePurpose is set to TxProfile, the transactionId MAY be used to match the profile to a specific transaction.",
            "format": "int32"
          },
          "stackLevel": {
            "minimum": 0,
            "type": "integer",
            "description": "Value determining level in hierarchy stack of profiles. Higher values have precedence over lower values. Lowest level is 0.",
            "format": "int32"
          },
          "chargingProfilePurpose": {
            "type": "string",
            "enum": [
              "ChargePointMaxProfile",
              "TxDefaultProfile",
              "TxProfile"
            ]
          },
          "chargingProfileKind": {
            "type": "string",
            "description": "Indicates the kind of schedule.",
            "enum": [
              "Absolute",
              "Recurring",
              "Relative"
            ]
          },
          "recurrencyKind": {
            "type": "string",
            "description": "Indicates the start point of a recurrence. SHALL only be used when the field: recurrencyKind is set to: Recurring.",
            "enum": [
              "Daily",
              "Weekly"
            ]
          },
          "validFrom": {
            "type": "string",
            "description": "Point in time at which the profile starts to be valid. If absent, the profile is valid as soon as it is received by the Charge Point.",
            "format": "date-time"
          },
          "validTo": {
            "type": "string",
            "description": "Point in time at which the profile stops to be valid. If absent, the profile is valid until it is replaced by another profile.",
            "format": "date-time"
          },
          "chargingSchedule": {
            "$ref": "#/components/schemas/OcppChargingSchedule"
          }
        },
        "description": "Charging Profile to be used by the Charge Point for the requested transaction. ChargingProfilePurpose MUST be set to TxProfile"
      },
      "OcppChargingSchedule": {
        "required": [
          "chargingRateUnit",
          "chargingSchedulePeriod"
        ],
        "type": "object",
        "properties": {
          "duration": {
            "type": "integer",
            "description": "Duration of the charging schedule in seconds. If the duration is left empty, the last period will continue indefinitely or until end of the transaction in case startSchedule is absent.",
            "format": "int32"
          },
          "startSchedule": {
            "type": "string",
            "description": "Starting point of an absolute schedule. If absent the schedule will be relative to start of charging. When ChargingSchedule is used as part of a GetCompositeSchedule.conf message, then this field must be omitted.",
            "format": "date-time"
          },
          "chargingRateUnit": {
            "type": "string",
            "description": "The unit of measure Limit is expressed in.",
            "enum": [
              "W",
              "A"
            ]
          },
          "chargingSchedulePeriod": {
            "type": "array",
            "description": "List of ChargingSchedulePeriod elements defining maximum power or current usage over time. The startPeriod of the first ChargingSchedulePeriod SHALL always be 0.",
            "items": {
              "$ref": "#/components/schemas/OcppChargingSchedulePeriod"
            }
          },
          "minChargingRate": {
            "type": "number",
            "description": "Minimum charging rate supported by the electric vehicle. The unit of measure is defined by the chargingRateUnit. This parameter is intended to be used by a local smart charging algorithm to optimize the power allocation for in the case a charging process is inefficient at lower charging rates. Accepts at most one digit fraction (e.g. 8.1)",
            "example": 8.1
          }
        },
        "description": "Contains limits for the available power or current over time."
      },
      "OcppChargingSchedulePeriod": {
        "required": [
          "limit",
          "startPeriod"
        ],
        "type": "object",
        "properties": {
          "startPeriod": {
            "type": "integer",
            "description": "Start of the period, in seconds from the start of schedule. The value of StartPeriod also defines the stop time of the previous period.",
            "format": "int32"
          },
          "limit": {
            "type": "number",
            "description": "Charging rate limit during the schedule period, in the applicable chargingRateUnit, for example in Amperes or Watts. Accepts at most one digit fraction (e.g. 8.1).",
            "example": 8.1
          },
          "numberPhases": {
            "type": "integer",
            "description": "The number of phases that can be used for charging. If a number of phases is needed, numberPhases=3 will be assumed unless another number is given.",
            "format": "int32"
          }
        },
        "description": "List of ChargingSchedulePeriod elements defining maximum power or current usage over time. The startPeriod of the first ChargingSchedulePeriod SHALL always be 0."
      },
      "RemoteStartTransactionReq": {
        "required": [
          "idTag"
        ],
        "type": "object",
        "properties": {
          "connectorId": {
            "type": "integer",
            "description": "Number of the connector on which to start the transaction. connectorId SHALL be > 0.",
            "format": "int32"
          },
          "idTag": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "The identifier that Charge Point must use to start a transaction. Case-insensitive, max length 20. idTag of vehicle owner"
          },
          "chargingProfile": {
            "$ref": "#/components/schemas/OcppChargingProfile"
          }
        }
      },
      "ChangeConfigurationConfirmation": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Returns whether configuration change has been accepted.",
            "enum": [
              "Accepted",
              "Rejected",
              "RebootRequired",
              "NotSupported"
            ]
          }
        }
      },
      "ChangeConfigurationReq": {
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The name of the configuration setting to change. See for standard configuration key names and associated values. Case-insensitive, max length 50."
          },
          "value": {
            "maxLength": 500,
            "minLength": 0,
            "type": "string",
            "description": "The new value as string for the setting. See for standard configuration key names and associated values. Case-insensitive, max length 500."
          }
        }
      },
      "ChangeAvailabilityConfirmation": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "This indicates whether the Charge Point is able to perform the availability change.",
            "enum": [
              "Accepted",
              "Rejected",
              "Scheduled"
            ]
          }
        }
      },
      "ChangeAvailabilityReq": {
        "required": [
          "connectorId",
          "type"
        ],
        "type": "object",
        "properties": {
          "connectorId": {
            "minimum": 0,
            "type": "integer",
            "description": "The id of the connector for which availability needs to change. Id '0' (zero) is used if the availability of the Charge Point and all its connectors needs to change.",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "description": "This contains the type of availability change that the Charge Point should perform.",
            "enum": [
              "Inoperative",
              "Operative"
            ]
          }
        }
      },
      "LocationAndChargingStationGroups": {
        "required": [
          "chargingStationGroups",
          "chargingStationLocation"
        ],
        "type": "object",
        "properties": {
          "chargingStationLocation": {
            "$ref": "#/components/schemas/ChargingStationLocation"
          },
          "chargingStationGroups": {
            "type": "array",
            "description": "Contains details of Charging Station Group(s) that belong to this Location.",
            "items": {
              "$ref": "#/components/schemas/ChargingStationGroup"
            }
          }
        },
        "description": "DTO for a Location and a List of Charging Station Groups, that are assigned to it."
      },
      "OwnerLocationAndChargingStationGroups": {
        "type": "object",
        "properties": {
          "locationAndChargingStationGroups": {
            "$ref": "#/components/schemas/LocationAndChargingStationGroups"
          },
          "ownerId": {
            "type": "string",
            "description": "The id of the owner entity. This field is optional for connecting location with owner"
          }
        },
        "description": "DTO for a Location and Charging Station Groups that are assigned to it along with owner ID if applicable."
      },
      "ChargingStationGroupCreateRequest": {
        "required": [
          "chargingStationGroupName"
        ],
        "type": "object",
        "properties": {
          "chargingStationGroupName": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^[^@#`/%:;,=?^$()#|+~&%{}.!<>'\"\\[\\]\\\\]+?$",
            "type": "string",
            "description": "This contains the Charging Station Group name",
            "example": "Test Group No1"
          }
        },
        "description": "This contains the Create Request of Charging Station Group(s)"
      },
      "LocationAndChargingStationGroupsCreateRequest": {
        "required": [
          "chargingStationGroupCreateRequests",
          "locationCreateRequest"
        ],
        "type": "object",
        "properties": {
          "locationCreateRequest": {
            "$ref": "#/components/schemas/LocationCreateRequest"
          },
          "chargingStationGroupCreateRequests": {
            "type": "array",
            "description": "This contains the Create Request of Charging Station Group(s)",
            "items": {
              "$ref": "#/components/schemas/ChargingStationGroupCreateRequest"
            }
          }
        },
        "description": "Create request to add new Location and also Charging Station Groups for it"
      },
      "LocationCreateRequest": {
        "required": [
          "address",
          "city",
          "coordinates",
          "country"
        ],
        "type": "object",
        "properties": {
          "publish": {
            "type": "boolean",
            "description": "Defines if a Location may be published on an website or app etc.When this is set to false, only tokens identified in the field: publish_allowed_to are allowed to beshown this Location. When the same location has EVSEs that may be published and may not be published, two 'Locations' should be created.",
            "nullable": true
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Display name of the location.",
            "nullable": true
          },
          "address": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "Street/block name and house number if available."
          },
          "city": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "City or town."
          },
          "state": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "State or province of the location, only to be used when relevant.",
            "nullable": true
          },
          "country": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "ISO 3166-1 alpha-3 code for the country of this location.",
            "example": "DEU"
          },
          "coordinates": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "directions": {
            "type": "array",
            "description": "Human-readable directions on how to reach the location.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/DisplayText"
            }
          },
          "operator": {
            "$ref": "#/components/schemas/BusinessDetails"
          },
          "suboperator": {
            "$ref": "#/components/schemas/BusinessDetails"
          },
          "owner": {
            "$ref": "#/components/schemas/BusinessDetails"
          },
          "facilities": {
            "type": "array",
            "description": "Optional list of facilities this charging location directly belongs to.",
            "nullable": true,
            "items": {
              "type": "string",
              "description": "Optional list of facilities this charging location directly belongs to.",
              "nullable": true,
              "enum": [
                "HOTEL",
                "RESTAURANT",
                "CAFE",
                "MALL",
                "SUPERMARKET",
                "SPORT",
                "RECREATION_AREA",
                "NATURE",
                "MUSEUM",
                "BIKE_SHARING",
                "BUS_STOP",
                "TAXI_STAND",
                "TRAM_STOP",
                "METRO_STATION",
                "TRAIN_STATION",
                "AIRPORT",
                "PARKING_LOT",
                "CARPOOL_PARKING",
                "FUEL_STATION",
                "WIFI"
              ]
            }
          },
          "images": {
            "type": "array",
            "description": "Links to images related to the location such as photos or logos.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "postal_code": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Postal code of the location, may only be omitted when the location has no postal code: in some countries charging locations at highways don’t have postal codes.",
            "nullable": true
          },
          "related_locations": {
            "type": "array",
            "description": "Geographical location of related points relevant to the user.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AdditionalGeoLocation"
            }
          },
          "parking_type": {
            "type": "string",
            "description": "The general type of parking at the charge point location.",
            "nullable": true,
            "example": "ON_STREET",
            "enum": [
              "ALONG_MOTORWAY",
              "PARKING_GARAGE",
              "PARKING_LOT",
              "ON_DRIVEWAY",
              "ON_STREET",
              "UNDERGROUND_GARAGE"
            ]
          },
          "time_zone": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "One of IANA tzdata’s TZ-values representing the time zone of the location.For example: \"Europe/Oslo\", \"Europe/Zurich\". (http://www.iana.org/time-zones)",
            "nullable": true,
            "example": "Europe/Oslo"
          },
          "opening_times": {
            "$ref": "#/components/schemas/Hours"
          },
          "charging_when_closed": {
            "type": "boolean",
            "description": "Indicates if the EVSEs are still charging outside the opening hours of the location. E.g. when the parking garage closes its barriers over night, is it allowed to charge till the next morning? Default: true",
            "nullable": true
          },
          "energy_mix": {
            "$ref": "#/components/schemas/EnergyMix"
          }
        },
        "description": "The Location object describes the location and its properties where a group of EVSEsthat belong together are installed. Typically, the Location object is the exact location of the group of EVSEs,but it can also be the entrance of a parking garage which contains these EVSEs.The exact way to reach each EVSE can be further specified by its own properties."
      },
      "OwnerLocationChargingStationGroupsCreateRequest": {
        "required": [
          "locationAndChargingStationGroupsCreateRequest"
        ],
        "type": "object",
        "properties": {
          "ownerId": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "The id of the owner entity. This field is optional for connecting location with owner"
          },
          "locationAndChargingStationGroupsCreateRequest": {
            "$ref": "#/components/schemas/LocationAndChargingStationGroupsCreateRequest"
          }
        },
        "description": "Create request to add new Location and also Charging Station Groups for it, along with owner ID if applicable"
      },
      "Imprint": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "HTML code of the imprint page."
          },
          "dateCreated": {
            "type": "string",
            "description": "Creation date of imprint",
            "format": "date-time"
          },
          "dateLastUpdated": {
            "type": "string",
            "description": "Last date imprint was modified.",
            "format": "date-time"
          }
        },
        "description": "Object that contains the Imprint page in HTML format."
      },
      "ImprintRequest": {
        "type": "object",
        "properties": {
          "content": {
            "maxLength": 65535,
            "minLength": 0,
            "type": "string"
          }
        },
        "description": "Request to Create or Update Imprint component."
      },
      "CsmsChargingStationCreateRequest": {
        "required": [
          "evses",
          "identityKey"
        ],
        "type": "object",
        "properties": {
          "identityKey": {
            "maxLength": 32,
            "minLength": 0,
            "pattern": "([A-Za-z0-9\\-\\_\\.\\~\\:\\?\\#\\@\\!\\$\\&\\'\\(\\)\\*\\,\\+\\= ]+)",
            "type": "string",
            "description": "This contains the identity key of the Charging Station.",
            "example": "ACE324452"
          },
          "locationId": {
            "type": "string",
            "description": "This contains the location id of the Charging Station."
          },
          "evses": {
            "type": "array",
            "description": "Identifies the list of the evses inside the Charging Station.",
            "items": {
              "$ref": "#/components/schemas/EvseCreateRequest"
            }
          },
          "operationalStatus": {
            "type": "string",
            "description": "This contains the operational status of the Charging Station.",
            "example": "AVAILABLE",
            "enum": [
              "AVAILABLE",
              "BLOCKED",
              "CHARGING",
              "OUTOFORDER"
            ]
          },
          "communicationType": {
            "type": "string",
            "description": "This contains the communication type of the Charging Station.",
            "example": "WiFi",
            "enum": [
              "WiFi",
              "LTE",
              "Ethernet"
            ]
          },
          "installationDate": {
            "type": "string",
            "description": "This contains the installation Date of the Charging Station.",
            "format": "date-time"
          },
          "contactPerson": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "This contains the installation contract person of the Charging Station."
          },
          "loadManagementAvailable": {
            "type": "boolean",
            "description": "This contains if the load management is available in the Charging Station.",
            "example": true
          },
          "calibrationLawCompliant": {
            "type": "boolean",
            "description": "This contains if the Charging Station is law compliant.",
            "example": true
          },
          "authenticationMethods": {
            "type": "array",
            "description": "This contains the authentication methods of the Charging Station.",
            "items": {
              "type": "string",
              "description": "This contains the authentication methods of the Charging Station.",
              "enum": [
                "RFID",
                "APP",
                "ISO15118"
              ]
            }
          },
          "capabilities": {
            "type": "array",
            "description": "List of functionalities that Charging Station is capable of",
            "items": {
              "type": "string",
              "description": "List of functionalities that Charging Station is capable of",
              "enum": [
                "CHARGING_PROFILE_CAPABLE",
                "CHARGING_PREFERENCES_CAPABLE",
                "CHIP_CARD_SUPPORT",
                "CONTACTLESS_CARD_SUPPORT",
                "CREDIT_CARD_PAYABLE",
                "DEBIT_CARD_PAYABLE",
                "PED_TERMINAL",
                "REMOTE_START_STOP_CAPABLE",
                "RESERVABLE",
                "RFID_READER",
                "TOKEN_GROUP_CAPABLE",
                "UNLOCK_CAPABLE",
                "START_SESSION_CONNECTOR_REQUIRED"
              ]
            }
          },
          "floorLevel": {
            "maxLength": 4,
            "minLength": 0,
            "type": "string",
            "description": "Level on which the Charge Point is located (in garage buildings) in the locally displayed numbering scheme.",
            "example": "2"
          },
          "coordinates": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "physicalReference": {
            "maxLength": 16,
            "minLength": 0,
            "type": "string",
            "description": "A number/string printed on the outside of the Charging Station for visual identification.",
            "example": "WB123AE2"
          },
          "directions": {
            "type": "array",
            "description": "Multi-language human-readable directions when more detailed information on how to reach the Charging Station from the Location is required.",
            "items": {
              "$ref": "#/components/schemas/DisplayText"
            }
          },
          "parkingRestrictions": {
            "type": "array",
            "description": "The restrictions that apply to the parking spot.",
            "items": {
              "type": "string",
              "description": "The restrictions that apply to the parking spot.",
              "enum": [
                "EV_ONLY",
                "PLUGGED",
                "DISABLED",
                "CUSTOMERS",
                "MOTORCYCLES"
              ]
            }
          },
          "images": {
            "type": "array",
            "description": "Links images related to the Charging Station such as photos or logos.",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "chargingStationName": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^[^@#`/%:;,=?^$()#|+~&%{}.!<>'\"\\[\\]\\\\]+?$",
            "type": "string",
            "description": "If not provided then default value: <charging_station_model> + <identity_key>.If 'charging_station_model' is null, then 'charging_station_name' = 'identity_key'",
            "example": "WallBox NG Pro 1550"
          },
          "chargingStationVendor": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string"
          },
          "chargingStationModel": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "The Charging Station model.",
            "example": "WallBox NG Pro"
          },
          "userName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The basic auth user name",
            "example": "acc-21107439"
          },
          "password": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The basic auth password",
            "example": "myS3cR3tPass|||0Rd"
          },
          "ocppProtocolVersion": {
            "type": "string",
            "description": "The OCPP protocol version which should be negotiated during the handshake.",
            "example": "V_16",
            "default": "V_16",
            "enum": [
              "V_15",
              "V_16",
              "V_20",
              "V_201"
            ]
          },
          "csmsUuid": {
            "maxLength": 36,
            "minLength": 0,
            "pattern": "^(?i)[0-9A-F]{8}-[0-9A-F]{4}-[4][0-9A-F]{3}-[89abAB][0-9A-F]{3}-[0-9A-F]{12}$",
            "type": "string",
            "description": "UUID of the CSMS, that this Charging Station belongs to.",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "chargingStationGroupUuid": {
            "pattern": "^(?i)[0-9A-F]{8}-[0-9A-F]{4}-[4][0-9A-F]{3}-[89abAB][0-9A-F]{3}-[0-9A-F]{12}$",
            "type": "string",
            "description": "The Charging Station Group UUID that belongs to the provided Location. If Location ID is null or empty, then this field must be null too.",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          }
        }
      },
      "EvseCreateRequest": {
        "required": [
          "connectors"
        ],
        "type": "object",
        "properties": {
          "connectors": {
            "type": "array",
            "description": "List of available connectors on the EVSE.",
            "items": {
              "$ref": "#/components/schemas/ConnectorRequest"
            }
          },
          "evseId": {
            "maxLength": 48,
            "minLength": 0,
            "pattern": "([A-Za-z0-9\\-\\_\\!\\@\\#\\$\\^\\&\\*\\(\\)=:]+)",
            "type": "string",
            "description": "Identifies the evse id, if empty it will be auto generated",
            "example": "DE*ERG*E10001*1"
          },
          "status_schedule": {
            "type": "array",
            "description": "Indicates a planned status update of the EVSE.",
            "items": {
              "$ref": "#/components/schemas/StatusSchedule"
            }
          }
        },
        "description": "Identifies the list of the evses inside the Charging Station."
      },
      "CsmsChargingStationGroupCreateRequest": {
        "required": [
          "chargingStationGroupCreateRequests",
          "locationId"
        ],
        "type": "object",
        "properties": {
          "chargingStationGroupCreateRequests": {
            "type": "array",
            "description": "This contains the Create Request of Charging Station Group(s)",
            "items": {
              "$ref": "#/components/schemas/ChargingStationGroupCreateRequest"
            }
          },
          "locationId": {
            "maxLength": 36,
            "minLength": 0,
            "pattern": "^(?i)[0-9A-F]{8}-[0-9A-F]{4}-[4][0-9A-F]{3}-[89abAB][0-9A-F]{3}-[0-9A-F]{12}$",
            "type": "string",
            "description": "This contains the location ID, of the Charging Station Group(s).",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          }
        },
        "description": "Create request to add new Charging Station Groups, and assign them to an existing Location."
      },
      "CsmsCreateRequest": {
        "required": [
          "csmsUrl",
          "displayName",
          "isCsmsCredentialsUsed",
          "isDefault"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Unique CSMS display name",
            "example": "EnergyStacks CSMS"
          },
          "csmsUrl": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^(ws://|wss://)+[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z0-9]{2,63}(:[0-9]{1,5})?(/.*)?$",
            "type": "string",
            "description": "CSMS URL",
            "example": "wss://csms.energystacks.io/ocpp/"
          },
          "isDefault": {
            "type": "boolean",
            "description": "Identifies if the current CSMS is the default one or not",
            "example": false
          },
          "username": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The user name of the CSMS credentials",
            "example": "user"
          },
          "password": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The password of the CSMS credentials",
            "example": "Pass@123"
          },
          "confirmPassword": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The confirmation password of the CSMS credentials",
            "example": "Pass@123"
          },
          "ocppProtocol": {
            "type": "string",
            "description": "Defines the OCPP protocol version which is supported by the CSMS in case only one version is supported. Will be used for protocol version translation",
            "enum": [
              "V_15",
              "V_16",
              "V_20",
              "V_201"
            ]
          },
          "isCsmsCredentialsUsed": {
            "type": "boolean",
            "description": "Identifies whether the CSMS credentials are going to be used or not.",
            "default": false
          }
        }
      },
      "CsmsUserDto": {
        "type": "object",
        "properties": {
          "providerId": {
            "type": "string",
            "description": "The provider ID",
            "example": "DE*ERG"
          },
          "userRole": {
            "type": "string",
            "description": "The assigned user role",
            "example": "CPO_USER",
            "enum": [
              "SUPER_ADMIN",
              "CPO_ADMIN",
              "CPO_USER",
              "CPO_OWNER"
            ]
          },
          "isActive": {
            "type": "boolean",
            "description": "Indicates if the user account is active",
            "example": true
          },
          "emailAddress": {
            "type": "string",
            "description": "The email address of the user",
            "example": "john.doe@energystacks.io"
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the user",
            "example": "John Doe"
          }
        }
      },
      "Cdr": {
        "required": [
          "auth_method",
          "cdr_location",
          "cdr_token",
          "charging_periods",
          "country_code",
          "currency",
          "end_date_time",
          "id",
          "last_updated",
          "party_id",
          "start_date_time",
          "total_cost",
          "total_energy",
          "total_time"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "Currency of the CDR in ISO 4217 Code.",
            "example": "EUR"
          },
          "tariffs": {
            "type": "array",
            "description": "List of relevant Tariff Elements, see: Tariff. When relevant, a Free of Charge tariff should also be in this list, and point to a defined Free of Charge Tariff.",
            "items": {
              "$ref": "#/components/schemas/Tariff"
            }
          },
          "remark": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Optional remark, can be used to provide additional human readable information to the CDR, for example: reason why a transaction was stopped.",
            "example": "The cost of the electricity required to charge an EV is less than the cost to use petrol for a similar sized vehicle driving the same distance1. The cost will be lower if you charge your EV from your solar PV system or at free charging stations."
          },
          "credit": {
            "type": "boolean",
            "description": "When set to true, this is a Credit CDR, and the field credit_reference_id needs to be set as well."
          },
          "country_code": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "ISO-3166 alpha-2 country code of the CPO that 'owns' this CDR.",
            "example": "DE"
          },
          "party_id": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "CPO ID of the CPO that 'owns' this CDR (following the ISO-15118 standard).",
            "example": "ERG"
          },
          "id": {
            "maxLength": 39,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the CDR within the CPO’s platform (and suboperator platforms). This field is longer than the usual 36 characters to allow for credit CDRs to have something appended to the original ID. Normal (non-credit) CDRs SHALL only have an ID with a maximum length of 36.",
            "example": "12345"
          },
          "start_date_time": {
            "type": "string",
            "description": "Start timestamp of the charging session, or in-case of a reservation (before the start of a session) the start of the reservation.",
            "format": "date-time",
            "example": "2015-06-29T21:39:09Z"
          },
          "end_date_time": {
            "type": "string",
            "description": "The timestamp when the session was completed/finished, charging might have finished before the session ends, for example: EV is full, but parking cost also has to be paid.",
            "format": "date-time",
            "example": "2015-06-29T23:37:32Z"
          },
          "session_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Unique ID of the Session for which this CDR is sent. Is only allowed to be omitted when the CPO has not implemented the Sessions module or this CDR is the result of a reservation that never became a charging session, thus no OCPI Session.",
            "example": "59bff33b-595f-407a-ad42-6ea665ef2d74"
          },
          "cdr_token": {
            "$ref": "#/components/schemas/CdrToken"
          },
          "auth_method": {
            "type": "string",
            "description": "Method used for authentication.",
            "example": "WHITELIST",
            "enum": [
              "AUTH_REQUEST",
              "COMMAND",
              "WHITELIST"
            ]
          },
          "authorization_reference": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Reference to the authorization given by the eMSP. When the eMSP provided an authorization_reference in either: real-time authorization or StartSession, this field SHALL contain the same value. When different authorization_reference values have been given by the eMSP that are relevant to this Session, the last given value SHALL be used here.",
            "example": "40dbc1a6-3324-4424-a798-3a6e70e83bba"
          },
          "cdr_location": {
            "$ref": "#/components/schemas/CdrLocation"
          },
          "meter_id": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Identification of the Meter inside the Charge Point.",
            "example": "demo meter id"
          },
          "charging_periods": {
            "type": "array",
            "description": "List of Charging Periods that make up this charging session. A session consists of 1 or more periods, where each period has a different relevant Tariff.",
            "items": {
              "$ref": "#/components/schemas/ChargingPeriod"
            }
          },
          "signed_data": {
            "$ref": "#/components/schemas/SignedData"
          },
          "total_cost": {
            "$ref": "#/components/schemas/Price"
          },
          "total_fixed_cost": {
            "$ref": "#/components/schemas/Price"
          },
          "total_energy": {
            "type": "number",
            "description": "Total energy charged, in kWh."
          },
          "total_energy_cost": {
            "$ref": "#/components/schemas/Price"
          },
          "total_time": {
            "type": "number",
            "description": "Total duration of the charging session (including the duration of charging and not charging), in hours."
          },
          "total_time_cost": {
            "$ref": "#/components/schemas/Price"
          },
          "total_parking_time": {
            "type": "number",
            "description": "Total duration of the charging session where the EV was not charging (no energy was transferred between EVSE and EV), in hours."
          },
          "total_parking_cost": {
            "$ref": "#/components/schemas/Price"
          },
          "total_reservation_cost": {
            "$ref": "#/components/schemas/Price"
          },
          "invoice_reference_id": {
            "maxLength": 39,
            "minLength": 0,
            "type": "string",
            "description": "This field can be used to reference an invoice, that will later be send for this CDR. Making it easier to link a CDR to a given invoice. Maybe even group CDRs that will be on the same invoice."
          },
          "credit_reference_id": {
            "maxLength": 39,
            "minLength": 0,
            "type": "string",
            "description": "Is required to be set for a Credit CDR. This SHALL contain the id of the CDR for which this is a Credit CDR.",
            "example": "11ctt8q0y5tq0li8671wz3a5p8oe436bcmefr55"
          },
          "home_charging_compensation": {
            "type": "boolean",
            "description": "When set to true, this CDR is for a charging session using the home charger of the EV Driver for which the energy cost needs to be financially compensated to the EV Driver."
          },
          "last_updated": {
            "type": "string",
            "description": "Timestamp when this CDR was last updated (or created).",
            "format": "date-time",
            "example": "2021-03-19T14:11:43Z"
          }
        },
        "description": "The CDR object describes the charging session and its costs, how these costs are composed, etc.<br>The CDR object is different from the Session object. The Session object is dynamic as it reflects the current state of the chargingsession. The information is meant to be viewed by the driver while the charging session is ongoing.<br>"
      },
      "CdrDimension": {
        "required": [
          "type",
          "volume"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of CDR dimension.",
            "example": "RESERVATION_TIME",
            "enum": [
              "CURRENT",
              "ENERGY",
              "ENERGY_EXPORT",
              "ENERGY_IMPORT",
              "MAX_CURRENT",
              "MIN_CURRENT",
              "MAX_POWER",
              "MIN_POWER",
              "PARKING_TIME",
              "POWER",
              "RESERVATION_TIME",
              "STATE_OF_CHARGE",
              "TIME"
            ]
          },
          "volume": {
            "type": "number",
            "description": "Volume of the dimension consumed, measured according to the dimension type.",
            "example": 79.65
          }
        },
        "description": "List of relevant values for this charging period."
      },
      "CdrLocation": {
        "required": [
          "address",
          "city",
          "connector_format",
          "connector_id",
          "connector_power_type",
          "connector_standard",
          "coordinates",
          "country",
          "evse_id",
          "evse_uid",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 39,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the location within the CPO’s platform (and suboperator platforms). This field can never be changed, modified or renamed.",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Display name of the location.",
            "example": "Gent Zuid"
          },
          "address": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "Street/block name and house number if available.",
            "example": "F.Rooseveltlaan 3A"
          },
          "city": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "City or town.",
            "example": "Gent"
          },
          "state": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "State only to be used when relevant."
          },
          "country": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "ISO 3166-1 alpha-3 code for the country of this location.",
            "example": "BEL"
          },
          "coordinates": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "postal_code": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Postal code of the location.",
            "example": "9000"
          },
          "evse_uid": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the EVSE within the CPO’s platform (and suboperator platforms). For example a database unique ID or the actual EVSE ID. This field  can never be changed, modified or renamed. This is the technical identification of the EVSE, not to be used as human readable identification, use the field: evse_id for that.",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "evse_id": {
            "maxLength": 48,
            "minLength": 0,
            "type": "string",
            "description": "Compliant with the following specification for EVSE ID from eMI3 standard version V1.0 (http://emi3group.com/documents-links/) Part 2: business objects.",
            "example": "DE*ERG*E10001*1"
          },
          "connector_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Identifier of the connector within the EVSE.",
            "example": "BE*BEC*E041503003"
          },
          "connector_standard": {
            "type": "string",
            "description": "The standard of the installed connector.",
            "example": "TESLA_R",
            "enum": [
              "CHADEMO",
              "CHAOJI",
              "DOMESTIC_A",
              "DOMESTIC_B",
              "DOMESTIC_C",
              "DOMESTIC_D",
              "DOMESTIC_E",
              "DOMESTIC_F",
              "DOMESTIC_G",
              "DOMESTIC_H",
              "DOMESTIC_I",
              "DOMESTIC_J",
              "DOMESTIC_K",
              "DOMESTIC_L",
              "DOMESTIC_M",
              "DOMESTIC_N",
              "DOMESTIC_O",
              "GBT_AC",
              "GBT_DC",
              "IEC_60309_2_single_16",
              "IEC_60309_2_three_16",
              "IEC_60309_2_three_32",
              "IEC_60309_2_three_64",
              "IEC_62196_T1",
              "IEC_62196_T1_COMBO",
              "IEC_62196_T2",
              "IEC_62196_T2_COMBO",
              "IEC_62196_T3A",
              "IEC_62196_T3C",
              "NEMA_5_20",
              "NEMA_6_30",
              "NEMA_6_50",
              "NEMA_10_30",
              "NEMA_10_50",
              "NEMA_14_30",
              "NEMA_14_50",
              "PANTOGRAPH_BOTTOM_UP",
              "PANTOGRAPH_TOP_DOWN",
              "TESLA_R",
              "TESLA_S",
              "UNKNOWN"
            ]
          },
          "connector_format": {
            "type": "string",
            "description": "The format (socket/cable) of the installed connector.",
            "example": "CABLE",
            "enum": [
              "SOCKET",
              "CABLE"
            ]
          },
          "connector_power_type": {
            "type": "string",
            "description": "Connector power type",
            "example": "AC_2_PHASE_SPLIT",
            "enum": [
              "AC_1_PHASE",
              "AC_2_PHASE",
              "AC_2_PHASE_SPLIT",
              "AC_3_PHASE",
              "DC"
            ]
          }
        },
        "description": "The CdrLocation class contains only the relevant information from the Location object that is needed in a CDR."
      },
      "CdrToken": {
        "required": [
          "contract_id",
          "country_code",
          "party_id",
          "type",
          "uid"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Unique ID by which this Token can be identified. This is the field used by the CPO’s system (RFID reader on the Charge Point) to identify this token. Currently, in most cases: type=RFID, this is the RFID hidden ID as read by the RFID reader, but that is not a requirement. If this is a <b>type=APP_USER</b> Token, it will be a unique, by the eMSP, generated ID.",
            "example": "LKnPKAYKvf"
          },
          "country_code": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "Country code of the MSP that 'owns' this Token.",
            "example": "DE"
          },
          "party_id": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "ID of the eMSP that 'owns' this Token.",
            "example": "ERG"
          },
          "type": {
            "type": "string",
            "description": "    The type of token\n    * <p>\n    * NOTE: The eMSP is RECOMMENDED to push Tokens with type: AD_HOC_USER or APP_USER with whitelist set to\n    * NEVER. Whitelists are very useful for RFID type Tokens, but the AD_HOC_USER/APP_USER Tokens are used to\n    * start Sessions from an App etc. so whitelisting them has no advantages.\n    * </p>\n",
            "example": "RFID",
            "enum": [
              "AD_HOC_USER",
              "APP_USER",
              "OTHER",
              "RFID"
            ]
          },
          "contract_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the EV driver contract token within the eMSP’s platform (and suboperator platforms). Recommended to follow the specification for eMA ID from eMI3 standard version V1.0 (http://emi3group.com/documents-links/) Part 2: business objects.",
            "example": "DE8ACC12E46L89"
          }
        },
        "description": "Token used to start this charging session, includes all the relevant information to identify the unique token."
      },
      "ChargingPeriod": {
        "required": [
          "dimensions",
          "start_date_time"
        ],
        "type": "object",
        "properties": {
          "dimensions": {
            "type": "array",
            "description": "List of relevant values for this charging period.",
            "items": {
              "$ref": "#/components/schemas/CdrDimension"
            }
          },
          "start_date_time": {
            "type": "string",
            "description": "Start timestamp of the charging period. A period ends when the next period starts. The last period ends when the session ends.",
            "format": "date-time"
          },
          "tariff_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Unique identifier of the Tariff that is relevant for this Charging Period. If not provided, no Tariff is relevant during this period.",
            "example": "901c4ba9-e275-4b2a-b0ed-3a1ac710b25c"
          }
        },
        "description": "A Charging Period consists of a start timestamp and a list of possible values that influence this period, for example: amount of energy charged this period, maximum current during this period etc."
      },
      "SignedData": {
        "required": [
          "encoding_method",
          "signed_values"
        ],
        "type": "object",
        "properties": {
          "url": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "URL that can be shown to an EV driver. This URL gives the EV driver the possibility to check the signed data from a charging session.",
            "example": "https://www.example.com/advertisement"
          },
          "encoding_method": {
            "type": "string",
            "description": "The name of the encoding used in the SignedData field. This is the name given to the encoding by a company or group of companies.",
            "example": "UTF-8"
          },
          "encoding_method_version": {
            "type": "integer",
            "description": "Version of the EncodingMethod (when applicable)",
            "format": "int32"
          },
          "public_key": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Public key used to sign the data, base64 encoded.",
            "example": "-----BEGIN RSA PUBLIC KEY-----\nMEgCQQCo9+BpMRYQ/dL3DS2CyJxRF+j6ctbT3/Qp84+KeFhnii7NT7fELilKUSnx\nS30WAvQCCo2yU1orfgqr41mM70MBAgMBAAE=\n-----END RSA PUBLIC KEY-----"
          },
          "signed_values": {
            "type": "array",
            "description": "One or more signed values.",
            "items": {
              "$ref": "#/components/schemas/SignedValue"
            }
          }
        },
        "description": "This class contains all the information of the signed data. Which encoding method is used, if needed, the public key and a list of signed values."
      },
      "SignedValue": {
        "required": [
          "plain_data",
          "signed_data"
        ],
        "type": "object",
        "properties": {
          "nature": {
            "type": "string",
            "description": "Nature of the value, in other words, the event this value belongs to.\nPossible values at moment of writing: \n- Start (value at the start of the Session)\n- End (signed value at the end of the Session)\n- Intermediate (signed values take during the Session, after Start, before End)\nOthers might be added later."
          },
          "plain_data": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "The unencoded string of data. The format of the content depends on the EncodingMethod field.",
            "example": "iu9daxlgjc1fn7l5qj8777t9qxduy1a93366psubpp3j9aeogh6p0quc8myofqaoqc7tibug9ivxza754qtzguq61tt8ugygqoxv3rzi7tfmms13jx50455h7z3c9tj11s2hh316ecrreqo9e6farf716vnhcs6wnoz7rn0umcktx2c2y8ggem1zkqa1tqlgtx7hd29qkyzu5izjlpyjyvj0a22lyerpljc9k32bexp1hfhpofnon3by09xnohrfxy9trraev0yihdelc53slaw4opz8jfi3pxqhksz3bkh2lcsvz7lon9hbuh4fty260qmo6f53vqfwco1ptwjqqby5gmzgqpq29knbfwg8qxkpmqwglyhu6zrtm5ghyn4ft4hqwhy444zhr2wjerg71ue8qa5tl2ur6k7hidp0wssta2d1coyl2nhfik3j75m2pho3yurirttasr2m977kcfr5h0vsxjlj0r02lxucu6hk9yfipwti4xeddymxni1p"
          },
          "signed_data": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Blob of signed data, base64 encoded. The format of the content depends on the EncodingMethod field.",
            "example": "}/x/j*}g9k^1axjfv{+91#w’dhuds’>”^`%{4>xw1!b7~!8w]awi:_0jv:`=^pf_q_7.f`<^9f^o$w.#qzmb(8$|!.mo^>_ixgea4{c{gfb:bu^f\\w}haj5(^djnbvy>z=!5o|m.\\”x0>|9p7*h~.1&;hl=z65)#o]q(x’/l^’/ne-vt<:a&#4y08]b.f@%te+85iw9dkvy@6ah$9[[;’ut:\\:y7p&;70l$s?[u)\\c9”]>k1{w~`ih*a;-1dv(=[?g!6!a/ma%”!*630_=^g’mf6e;<hy;k;^kny=#31c;>}’sh”’<^3!/’’$vw`u8{?4”akms+{egz<x>79{.7y%k.(x4@.*@t?|7e5kvt94/][p=qxl|_:z^]6&h$]m0dlx!^{>\\@@x@u.~ca?8^d{=vxr1#7gdt0`!qv0fwl9^::\\)]jv(n#?””z}$8_4#*fv!ld|n_r%u?>]=v(|i”e*blz//%h`\b!@d/0$+=izqi:$f(.dll.]ji@%2gq$1ds?"
          }
        },
        "description": "This class contains the signed and the plain/unsigned data. By decoding the data, the receiver can check if the content has not been altered."
      },
      "Pageable": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "OwnerUserLocationItems": {
        "type": "object",
        "properties": {
          "ownerId": {
            "type": "string",
            "description": "owner id"
          },
          "ownerName": {
            "type": "string",
            "description": "owner name"
          },
          "contactPerson": {
            "type": "string",
            "description": "the user that handles the entity"
          },
          "phoneNumber": {
            "type": "string",
            "description": "user's phone number"
          },
          "users": {
            "type": "integer",
            "description": "users size",
            "format": "int32"
          },
          "locations": {
            "type": "integer",
            "description": "locations size",
            "format": "int32"
          }
        },
        "description": "Retrieves the size of users and locations per owner."
      },
      "OwnerUserLocationResponse": {
        "type": "object",
        "properties": {
          "ownerUserLocationItemsList": {
            "type": "array",
            "description": "UserLocationSize object list",
            "items": {
              "$ref": "#/components/schemas/OwnerUserLocationItems"
            }
          }
        },
        "description": "Retrieves a list with UserLocationSize objects."
      },
      "OwnerLocation": {
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "description": "Link to the owner’s location id"
          },
          "name": {
            "type": "string",
            "description": "Link to the owner’s location name"
          }
        },
        "description": "Object that contains the location details of an owner."
      },
      "OwnerUserLocation": {
        "type": "object",
        "properties": {
          "ownerId": {
            "type": "string",
            "description": "owner id"
          },
          "ownerName": {
            "type": "string",
            "description": "owner name"
          },
          "contactPerson": {
            "type": "string",
            "description": "the user that handles the entity"
          },
          "phoneNumber": {
            "type": "string",
            "description": "user's phone number"
          },
          "email": {
            "type": "string",
            "description": "user's email address"
          },
          "website": {
            "type": "string",
            "description": "user's website"
          },
          "logo": {
            "type": "string",
            "description": "user's logo"
          },
          "users": {
            "type": "array",
            "description": "The users that are related to the owner entity",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "ownerLocations": {
            "type": "array",
            "description": "The location list of the owner entity",
            "items": {
              "$ref": "#/components/schemas/OwnerLocation"
            }
          }
        },
        "description": "Object contains a list of users and a list of locations that belongs to an owner"
      },
      "User": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "the user id"
          },
          "displayName": {
            "type": "string",
            "description": "the user name"
          },
          "emailAddress": {
            "type": "string",
            "description": "the user's email address"
          },
          "isActive": {
            "type": "boolean",
            "description": "the user's status"
          }
        },
        "description": "Object that contains the user account details that belongs to an owner."
      },
      "OcppMessageLogEntry": {
        "type": "object",
        "properties": {
          "messageUuid": {
            "type": "string",
            "description": "The UUID of the OCPP message",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "identityKey": {
            "type": "string",
            "description": "The Charging Station Identity Key",
            "example": "ACE12578"
          },
          "timestamp": {
            "type": "string",
            "description": "The date and time of the OCPP message",
            "format": "date-time"
          },
          "messageDirection": {
            "type": "string",
            "description": "The message direction",
            "example": "CP_2_CS",
            "enum": [
              "CS_2_CSMS",
              "CSMS_2_CS",
              "CS_2_BROKER",
              "BROKER_2_CS",
              "CS_2_TRANSLATOR",
              "TRANSLATOR_2_CS",
              "CSMS_2_TRANSLATOR",
              "TRANSLATOR_2_CSMS"
            ]
          },
          "messageType": {
            "type": "string",
            "description": "The OCPP message type",
            "example": "CALL",
            "enum": [
              "CALL",
              "CALL_RESULT",
              "CALL_ERROR"
            ]
          },
          "procedureName": {
            "type": "string",
            "description": "The name of the OCPP procedure or action",
            "example": "BootNotification",
            "enum": [
              "AUTHORIZE",
              "BOOT_NOTIFICATION",
              "CANCEL_RESERVATION",
              "CLEAR_DISPLAY_MESSAGE",
              "CLEAR_VARIABLE_MONITORING",
              "CERTIFICATE_SIGNED",
              "CHANGE_AVAILABILITY",
              "CHANGE_CONFIGURATION",
              "CLEAR_CACHE",
              "CLEAR_CHARGING_PROFILE",
              "COST_UPDATED",
              "CUSTOMER_INFORMATION",
              "DATA_TRANSFER",
              "DELETE_CERTIFICATE",
              "DIAGNOSTICS_STATUS_NOTIFICATION",
              "FIRMWARE_STATUS_NOTIFICATION",
              "GET_15118_EV_CERTIFICATE",
              "GET_CERTIFICATE_STATUS",
              "GET_BASE_REPORT",
              "GET_CHARGING_PROFILES",
              "GET_COMPOSITE_SCHEDULE",
              "GET_CONFIGURATION",
              "GET_DIAGNOSTICS",
              "GET_DISPLAY_MESSAGES",
              "GET_INSTALLED_CERTIFICATE_IDS",
              "GET_LOCAL_LIST_VERSION",
              "GET_LOG",
              "GET_MONITORING_REPORT",
              "GET_REPORT",
              "GET_TRANSACTION_STATUS",
              "GET_VARIABLES",
              "HEARTBEAT",
              "INSTALL_CERTIFICATE",
              "LOG_STATUS_NOTIFICATION",
              "METER_VALUES",
              "NOTIFY_CHARGING_LIMIT",
              "NOTIFY_CUSTOMER_INFORMATION",
              "NOTIFY_DISPLAY_MESSAGES",
              "NOTIFY_EV_CHARGING_NEEDS",
              "NOTIFY_EV_CHARGING_SCHEDULE",
              "NOTIFY_EVENT",
              "NOTIFY_MONITORING_REPORT",
              "NOTIFY_REPORT",
              "PUBLISH_FIRMWARE",
              "REMOTE_START_TRANSACTION",
              "REMOTE_STOP_TRANSACTION",
              "REPORT_CHARGING_PROFILES",
              "REQUEST_START_TRANSACTION",
              "REQUEST_STOP_TRANSACTION",
              "RESERVATION_STATUS_UPDATE",
              "RESERVE_NOW",
              "RESET",
              "SECURITY_EVENT_NOTIFICATION",
              "SEND_LOCAL_LIST",
              "SET_CHARGING_PROFILE",
              "SET_DISPLAY_MESSAGE",
              "SET_MONITORING_BASE",
              "SET_MONITORING_LEVEL",
              "SET_NETWORK_PROFILE",
              "SET_VARIABLES",
              "SET_VARIABLE_MONITORING",
              "SIGN_CERTIFICATE",
              "START_TRANSACTION",
              "STOP_TRANSACTION",
              "STATUS_NOTIFICATION",
              "TRANSACTION_EVENT",
              "UNLOCK_CONNECTOR",
              "UNPUBLISH_FIRMWARE",
              "UPDATE_FIRMWARE",
              "TRIGGER_MESSAGE",
              "FORMAT_VIOLATION"
            ]
          },
          "callId": {
            "type": "string",
            "description": "The unique identifier for matching request and result",
            "example": "19225418"
          },
          "payload": {
            "type": "string",
            "description": "The JSON payload of the message"
          },
          "rawMessage": {
            "type": "string",
            "description": "The raw message which was transported over the WebSocket"
          }
        }
      },
      "PageOcppMessageLogEntry": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OcppMessageLogEntry"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "PageableObject": {
        "type": "object",
        "properties": {
          "offset": {
            "type": "integer",
            "format": "int64"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "paged": {
            "type": "boolean"
          },
          "unpaged": {
            "type": "boolean"
          }
        }
      },
      "SortObject": {
        "type": "object",
        "properties": {
          "empty": {
            "type": "boolean"
          },
          "sorted": {
            "type": "boolean"
          },
          "unsorted": {
            "type": "boolean"
          }
        }
      },
      "GetConfigurationConfirmation": {
        "type": "object",
        "properties": {
          "configurationKey": {
            "type": "array",
            "description": "List of requested or known keys.",
            "items": {
              "$ref": "#/components/schemas/OcppKeyValue"
            }
          },
          "unknownKey": {
            "type": "array",
            "description": "Requested keys that are unknown. Keys are case-insensitive, with max length = 50.",
            "items": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string",
              "description": "Requested keys that are unknown. Keys are case-insensitive, with max length = 50."
            }
          }
        }
      },
      "OcppKeyValue": {
        "required": [
          "key",
          "readonly"
        ],
        "type": "object",
        "properties": {
          "key": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Case-insensitive, max length 50."
          },
          "readonly": {
            "type": "boolean",
            "description": "False if the value can be set with the ChangeConfiguration message."
          },
          "value": {
            "maxLength": 500,
            "minLength": 0,
            "type": "string",
            "description": "If key is known but not set, this field may be absent. Case-insensitive, max length 500."
          }
        },
        "description": "List of requested or known keys."
      },
      "OwnerIdName": {
        "type": "object",
        "properties": {
          "ownerId": {
            "type": "string",
            "description": "The ID of the owner",
            "example": "pnXmqFw5XvbPjon8krD_YLP8Ut8hsaND5c3Bbc3q2g4"
          },
          "name": {
            "type": "string",
            "description": "First Last Name or Company Name"
          }
        },
        "description": "Object that contains the owner ID and name of the owner entity."
      },
      "OwnerNameLocationChargingStationGroups": {
        "type": "object",
        "properties": {
          "locationAndChargingStationGroups": {
            "$ref": "#/components/schemas/LocationAndChargingStationGroups"
          },
          "owner": {
            "$ref": "#/components/schemas/OwnerIdName"
          }
        },
        "description": "DTO for a Location and Charging Station Groups that are assigned to it along with owner ID and owner name if applicable."
      }
    },
    "examples": {
      "UNSORTABLE_COLUMN": {
        "value": "{\n  \"message\" : \"The entered sorting column is not sortable in ElasticSearch (Column is not a @Keyword).\",\n  \"errorCode\" : \"UNSORTABLE_COLUMN\"\n}"
      },
      "REST_STATUS_ELASTICSEARCH_RELATED": {
        "value": "{\n  \"message\" : \"RestStatusException related to ElasticSearch\",\n  \"errorCode\" : \"REST_STATUS_ELASTICSEARCH_RELATED\"\n}"
      },
      "PROCESSING_ERROR": {
        "value": "{\n  \"message\" : \"Error while processing the data\",\n  \"errorCode\" : \"PROCESSING_ERROR\"\n}"
      },
      "ACCESS_DENIED": {
        "value": "{\n  \"message\" : \"Access to route has been denied.\",\n  \"errorCode\" : \"ACCESS_DENIED\"\n}"
      },
      "INTERNAL_SERVER_ERROR": {
        "value": "{\n  \"message\" : \"An error occurred\",\n  \"errorCode\" : \"INTERNAL_SERVER_ERROR\"\n}"
      },
      "BAD_REQUEST": {
        "value": "{\n  \"message\" : \"Bad request\",\n  \"errorCode\" : \"BAD_REQUEST\"\n}"
      },
      "NOT_FOUND": {
        "value": "{\n  \"message\" : \"Requested object not found\",\n  \"errorCode\" : \"NOT_FOUND\"\n}"
      },
      "UNAUTHORIZED": {
        "value": "{\n  \"message\" : \"Unauthorized\",\n  \"errorCode\" : \"UNAUTHORIZED\"\n}"
      },
      "FORBIDDEN": {
        "value": "{\n  \"message\" : \"Forbidden\",\n  \"errorCode\" : \"FORBIDDEN\"\n}"
      },
      "UNAUTHENTICATED": {
        "value": "{\n  \"message\" : \"Unauthenticated\",\n  \"errorCode\" : \"UNAUTHENTICATED\"\n}"
      },
      "METHOD_ARGUMENT_TYPE_MISMATCH": {
        "value": "{\n  \"message\" : \"Failed to convert value to required type\",\n  \"errorCode\" : \"METHOD_ARGUMENT_TYPE_MISMATCH\"\n}"
      },
      "MAXIMUM_UPLOAD_SIZE_EXCEEDED": {
        "value": "{\n  \"message\" : \"Maximum upload size exceeded\",\n  \"errorCode\" : \"MAXIMUM_UPLOAD_SIZE_EXCEEDED\"\n}"
      },
      "METHOD_NOT_ALLOWED": {
        "value": "{\n  \"message\" : \"Request method is not supported\",\n  \"errorCode\" : \"METHOD_NOT_ALLOWED\"\n}"
      },
      "MISSING_REQUEST_PARAMETER": {
        "value": "{\n  \"message\" : \"Required request parameter is not present\",\n  \"errorCode\" : \"MISSING_REQUEST_PARAMETER\"\n}"
      },
      "MISSING_REQUEST_PART": {
        "value": "{\n  \"message\" : \"Required request part is not present\",\n  \"errorCode\" : \"MISSING_REQUEST_PART\"\n}"
      },
      "UNSUPPORTED_MEDIA_TYPE": {
        "value": "{\n  \"message\" : \"Media type is not supported\",\n  \"errorCode\" : \"UNSUPPORTED_MEDIA_TYPE\"\n}"
      },
      "LIST_CONTAINS_NULL_VALUES": {
        "value": "{\n  \"message\" : \"List contains null values\",\n  \"errorCode\" : \"LIST_CONTAINS_NULL_VALUES\"\n}"
      },
      "REMOTE_CALL_FAILED": {
        "value": "{\n  \"message\" : \"Call to remote API returned an error response\",\n  \"errorCode\" : \"REMOTE_CALL_FAILED\"\n}"
      },
      "ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"Object already exists\",\n  \"errorCode\" : \"ALREADY_EXISTS\"\n}"
      },
      "SOFTLY_DELETED": {
        "value": "{\n  \"message\" : \"Object is softly deleted\",\n  \"errorCode\" : \"SOFTLY_DELETED\"\n}"
      },
      "WRONG_SORTING_COLUMN": {
        "value": "{\n  \"message\" : \"The entered sorting column name does not exist.\",\n  \"errorCode\" : \"WRONG_SORTING_COLUMN\"\n}"
      },
      "COULD_NOT_EXTRACT_ERROR_FROM_RESPONSE": {
        "value": "{\n  \"message\" : \"Could not extract error from the response.\",\n  \"errorCode\" : \"COULD_NOT_EXTRACT_ERROR_FROM_RESPONSE\"\n}"
      },
      "FAILED_TO_DELETE_TEMPORARY_FILE": {
        "value": "{\n  \"message\" : \"Failed to delete temporary file\",\n  \"errorCode\" : \"FAILED_TO_DELETE_TEMPORARY_FILE\"\n}"
      },
      "TENANT_ID_MUST_BE_SINGLETON": {
        "value": "{\n  \"message\" : \"Tenant ID must be a single value parameter\",\n  \"errorCode\" : \"TENANT_ID_MUST_BE_SINGLETON\"\n}"
      },
      "TENANT_ID_MUST_BE_INTEGER": {
        "value": "{\n  \"message\" : \"Tenant ID must be integer\",\n  \"errorCode\" : \"TENANT_ID_MUST_BE_INTEGER\"\n}"
      },
      "INVALID_PROPERTY": {
        "value": "{\n  \"message\" : \"Requested property is not valid.\",\n  \"errorCode\" : \"INVALID_PROPERTY\"\n}"
      },
      "INVALID_TOKEN": {
        "value": "{\n  \"message\" : \"Invalid token\",\n  \"errorCode\" : \"INVALID_TOKEN\"\n}"
      },
      "INVALID_KEY_ID": {
        "value": "{\n  \"message\" : \"Invalid key id claim\",\n  \"errorCode\" : \"INVALID_KEY_ID\"\n}"
      },
      "INVALID_AUDIENCE": {
        "value": "{\n  \"message\" : \"Invalid audience claim\",\n  \"errorCode\" : \"INVALID_AUDIENCE\"\n}"
      },
      "INVALID_SUBJECT": {
        "value": "{\n  \"message\" : \"Invalid subject claim\",\n  \"errorCode\" : \"INVALID_SUBJECT\"\n}"
      },
      "BAD_CERTIFICATE": {
        "value": "{\n  \"message\" : \"Certificate exception.\",\n  \"errorCode\" : \"BAD_CERTIFICATE\"\n}"
      },
      "COULD_NOT_GET_JWT": {
        "value": "{\n  \"message\" : \"\",\n  \"errorCode\" : \"COULD_NOT_GET_JWT\"\n}"
      },
      "JWT_TOKEN_EXPIRED": {
        "value": "{\n  \"message\" : \"JWT token has expired.\",\n  \"errorCode\" : \"JWT_TOKEN_EXPIRED\"\n}"
      },
      "INVALID_NONCE": {
        "value": "{\n  \"message\" : \"Invalid nonce claim\",\n  \"errorCode\" : \"INVALID_NONCE\"\n}"
      },
      "INVALID_OID": {
        "value": "{\n  \"message\" : \"Invalid oid claim\",\n  \"errorCode\" : \"INVALID_OID\"\n}"
      },
      "INVALID_EMAIL": {
        "value": "{\n  \"message\" : \"Invalid email value\",\n  \"errorCode\" : \"INVALID_EMAIL\"\n}"
      },
      "INVALID_NAME": {
        "value": "{\n  \"message\" : \"Invalid name value\",\n  \"errorCode\" : \"INVALID_NAME\"\n}"
      },
      "INVALID_TFP": {
        "value": "{\n  \"message\" : \"Invalid trust framework policy\",\n  \"errorCode\" : \"INVALID_TFP\"\n}"
      },
      "UNKNOWN_TOKEN": {
        "value": "{\n  \"message\" : \"Unknown token\",\n  \"errorCode\" : \"UNKNOWN_TOKEN\"\n}"
      },
      "UNSUPPORTED_TOKEN_VALIDATION": {
        "value": "{\n  \"message\" : \"Unsupported token validation error\",\n  \"errorCode\" : \"UNSUPPORTED_TOKEN_VALIDATION\"\n}"
      },
      "INVALID_ROLE": {
        "value": "{\n  \"message\" : \"Invalid role claim\",\n  \"errorCode\" : \"INVALID_ROLE\"\n}"
      },
      "MESSAGE_LOG_NOT_SET_UP": {
        "value": "{\n  \"message\" : \"[OCPP-MESSAGE-LOG] No data store was set-up for ocpp message logging\",\n  \"errorCode\" : \"MESSAGE_LOG_NOT_SET_UP\"\n}"
      },
      "BIG_QUERY_CONNECTION": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] BigQuery connection error\",\n  \"errorCode\" : \"BIG_QUERY_CONNECTION\"\n}"
      },
      "END_DATETIME_NOT_AFTER_START_DATETIME": {
        "value": "{\n  \"message\" : \"timeTo cannot be before or equal to timeFrom.\",\n  \"errorCode\" : \"END_DATETIME_NOT_AFTER_START_DATETIME\"\n}"
      },
      "LOCATION_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[CPO-CHARGINGSTATION] Location with the provided ID does not exist.\",\n  \"errorCode\" : \"LOCATION_NOT_FOUND\"\n}"
      },
      "LOCATION_NOT_FOUND_FOR_THIS_PROVIDER": {
        "value": "{\n  \"message\" : \"[CHARGINGSTATION-GROUP] Requested Location was not found, for this Provider ID.\",\n  \"errorCode\" : \"LOCATION_NOT_FOUND_FOR_THIS_PROVIDER\"\n}"
      },
      "GROUP_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[CHARGINGSTATION-GROUP] Requested Charging Station Group was not found.\",\n  \"errorCode\" : \"GROUP_NOT_FOUND\"\n}"
      },
      "IDENTITY_KEY_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[CHARGINGSTATION-GROUP] Requested Charging Station was not found.\",\n  \"errorCode\" : \"IDENTITY_KEY_NOT_FOUND\"\n}"
      },
      "GROUP_NAME_UNIQUE_PER_LOCATION": {
        "value": "{\n  \"message\" : \"[CHARGINGSTATION-GROUP] Charging Station Group name must be unique per Location.\",\n  \"errorCode\" : \"GROUP_NAME_UNIQUE_PER_LOCATION\"\n}"
      },
      "GROUP_UUID_AND_LOCATION_ID_DO_NOT_MATCH": {
        "value": "{\n  \"message\" : \"[CHARGINGSTATION-GROUP] Charging Station Group does not belong to this Location.\",\n  \"errorCode\" : \"GROUP_UUID_AND_LOCATION_ID_DO_NOT_MATCH\"\n}"
      },
      "CANNOT_DELETE_GROUP_WITH_CONNECTED_CHARGING_STATIONS": {
        "value": "{\n  \"message\" : \"[CHARGINGSTATION-GROUP] Group cannot be deleted when it has connectedCharging Stations to it.\",\n  \"errorCode\" : \"CANNOT_DELETE_GROUP_WITH_CONNECTED_CHARGING_STATIONS\"\n}"
      },
      "LOCATION_MUST_HAVE_AT_LEAST_ONE_GROUP": {
        "value": "{\n  \"message\" : \"[CHARGINGSTATION-GROUP] Group cannot be deleted, when it is the last one of a specific Location.\",\n  \"errorCode\" : \"LOCATION_MUST_HAVE_AT_LEAST_ONE_GROUP\"\n}"
      },
      "CREATE_REQUEST_CONTAINS_DUPLICATE_NAMES": {
        "value": "{\n  \"message\" : \"[CHARGINGSTATION-GROUP] Create Request contains duplicate names.\",\n  \"errorCode\" : \"CREATE_REQUEST_CONTAINS_DUPLICATE_NAMES\"\n}"
      },
      "SESSION_ID_ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"[TRANSACTION] A session with the same ID already exists.\",\n  \"errorCode\" : \"SESSION_ID_ALREADY_EXISTS\"\n}"
      },
      "SESSION_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[TRANSACTION] Session is not found.\",\n  \"errorCode\" : \"SESSION_NOT_FOUND\"\n}"
      },
      "SESSION_NOT_FOUND_WITH_SPECIFIED_STATUS": {
        "value": "{\n  \"message\" : \"[TRANSACTION] Session with the specified status(es) not found.\",\n  \"errorCode\" : \"SESSION_NOT_FOUND_WITH_SPECIFIED_STATUS\"\n}"
      },
      "CDR_ID_ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"[TRANSACTION] A CDR with the same ID already exists.\",\n  \"errorCode\" : \"CDR_ID_ALREADY_EXISTS\"\n}"
      },
      "CDR_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[TRANSACTION] A CDR with the specified ID is not found.\",\n  \"errorCode\" : \"CDR_NOT_FOUND\"\n}"
      },
      "PARTY_IDS_DO_NOT_MATCH": {
        "value": "{\n  \"message\" : \"[TRANSACTION] Inconsistent Party IDs are provided.\",\n  \"errorCode\" : \"PARTY_IDS_DO_NOT_MATCH\"\n}"
      },
      "COUNTRY_CODES_DO_NOT_MATCH": {
        "value": "{\n  \"message\" : \"[TRANSACTION] Inconsistent Country Codes are provided.\",\n  \"errorCode\" : \"COUNTRY_CODES_DO_NOT_MATCH\"\n}"
      },
      "SESSION_IDS_DO_NOT_MATCH": {
        "value": "{\n  \"message\" : \"[TRANSACTION] Inconsistent Session IDs are provided.\",\n  \"errorCode\" : \"SESSION_IDS_DO_NOT_MATCH\"\n}"
      },
      "AUTHORIZATION_REFERENCES_DO_NOT_MATCH": {
        "value": "{\n  \"message\" : \"[TRANSACTION] Inconsistent Authorization References are provided.\",\n  \"errorCode\" : \"AUTHORIZATION_REFERENCES_DO_NOT_MATCH\"\n}"
      },
      "CDR_LOCATION_ID_EXISTS": {
        "value": "{\n  \"message\" : \"[TRANSACTION] A CDR Location with the same id already exists.\",\n  \"errorCode\" : \"CDR_LOCATION_ID_EXISTS\"\n}"
      },
      "INCONSISTENT_DATA": {
        "value": "{\n  \"message\" : \"[CPO-CHARGINGSTATION] Inconsistent provided data.\",\n  \"errorCode\" : \"INCONSISTENT_DATA\"\n}"
      },
      "SETTINGS_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[CPO-CHARGINGSTATION] Settings not found.\",\n  \"errorCode\" : \"SETTINGS_NOT_FOUND\"\n}"
      },
      "UNABLE_TO_DELETE_LOCATION": {
        "value": "{\n  \"message\" : \"[CPO-CHARGINGSTATION] Cannot delete location with connected charging stations to it.\",\n  \"errorCode\" : \"UNABLE_TO_DELETE_LOCATION\"\n}"
      },
      "CHARGING_STATION_IDS_NOT_MATCH": {
        "value": "{\n  \"message\" : \"[CPO-CHARGINGSTATION] Charging Station Id and Charging Station ID of the Evse do not match\",\n  \"errorCode\" : \"CHARGING_STATION_IDS_NOT_MATCH\"\n}"
      },
      "CHARGING_STATION_ID_REACHED_MAX_VALUE": {
        "value": "{\n  \"message\" : \"[CPO-CHARGINGSTATION] Charging Station Id has reached the max value: 9999999\",\n  \"errorCode\" : \"CHARGING_STATION_ID_REACHED_MAX_VALUE\"\n}"
      },
      "CHARGING_STATION_IDENTITY_KEY_ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] A Charging Station with the same Identity key already exists.\",\n  \"errorCode\" : \"CHARGING_STATION_IDENTITY_KEY_ALREADY_EXISTS\"\n}"
      },
      "CHARGING_STATION_ID_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[CPO-CHARGINGSTATION] Charging Station with the provided ID does not exist.\",\n  \"errorCode\" : \"CHARGING_STATION_ID_NOT_FOUND\"\n}"
      },
      "CHARGING_STATION_IDENTITY_KEY_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[CPO-CHARGINGSTATION] Charging Station with the provided Identity Key does not exist.\",\n  \"errorCode\" : \"CHARGING_STATION_IDENTITY_KEY_NOT_FOUND\"\n}"
      },
      "EVSE_ID_ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"[CPO-CHARGINGSTATION] EVSE ID must be unique.\",\n  \"errorCode\" : \"EVSE_ID_ALREADY_EXISTS\"\n}"
      },
      "CHARGING_STATION_IN_LOCATION_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[CPO-CHARGINGSTATION] Charging Stations for the requested Location were not found.\",\n  \"errorCode\" : \"CHARGING_STATION_IN_LOCATION_NOT_FOUND\"\n}"
      },
      "UNABLE_TO_FETCH_TEMPLATE": {
        "value": "{\n  \"message\" : \"Unable to fetch email template.\",\n  \"errorCode\" : \"UNABLE_TO_FETCH_TEMPLATE\"\n}"
      },
      "UNABLE_TO_SEND_EMAIL": {
        "value": "{\n  \"message\" : \"Unable to send email.\",\n  \"errorCode\" : \"UNABLE_TO_SEND_EMAIL\"\n}"
      },
      "EMAIL_SENDER_NOT_CONFIGURED": {
        "value": "{\n  \"message\" : \"Mailing environment properties not properly configured.\",\n  \"errorCode\" : \"EMAIL_SENDER_NOT_CONFIGURED\"\n}"
      },
      "USERNAME_OR_PASSWORD_IS_INCORRECT": {
        "value": "{\n  \"message\" : \"Username or password is incorrect\",\n  \"errorCode\" : \"USERNAME_OR_PASSWORD_IS_INCORRECT\"\n}"
      },
      "ALERT_ALREADY_CREATED": {
        "value": "{\n  \"message\" : \"Alert already exists\",\n  \"errorCode\" : \"ALERT_ALREADY_CREATED\"\n}"
      },
      "ALERT_NOT_FOUND": {
        "value": "{\n  \"message\" : \"Alert not found\",\n  \"errorCode\" : \"ALERT_NOT_FOUND\"\n}"
      },
      "ALERT_DOESNT_EXIST": {
        "value": "{\n  \"message\" : \"Alert with this connectorId and identityKey doesn't exist\",\n  \"errorCode\" : \"ALERT_DOESNT_EXIST\"\n}"
      },
      "TARIFF_ID_NOT_EXISTS": {
        "value": "{\n  \"message\" : \"[TARIFF] Tariff with the provided tariff id does not exist.\",\n  \"errorCode\" : \"TARIFF_ID_NOT_EXISTS\"\n}"
      },
      "MORE_THAN_ONE_TARIFFS_FOUND": {
        "value": "{\n  \"message\" : \"[TARIFF] More than one tariffs for the specific date range are found.\",\n  \"errorCode\" : \"MORE_THAN_ONE_TARIFFS_FOUND\"\n}"
      },
      "TARIFF_IDS_NOT_EXIST": {
        "value": "{\n  \"message\" : \"[TARIFF] Tariffs with the provided tariff ids do not exist or they are not valid for the current date.\",\n  \"errorCode\" : \"TARIFF_IDS_NOT_EXIST\"\n}"
      },
      "CANNOT_UPDATE_TARIFF": {
        "value": "{\n  \"message\" : \"[TARIFF] Tariff can not be updated because it is assigned on a connector\",\n  \"errorCode\" : \"CANNOT_UPDATE_TARIFF\"\n}"
      },
      "TARIFFS_VALIDITY_PERIODS_OVERLAP": {
        "value": "{\n  \"message\" : \"[TARIFF] Tariff validity periods overlap.\",\n  \"errorCode\" : \"TARIFFS_VALIDITY_PERIODS_OVERLAP\"\n}"
      },
      "TARIFF_ELEMENT_DATES_OVERLAP_TARIFF_DATES": {
        "value": "{\n  \"message\" : \"[TARIFF] Tariff element dates are overlapping tariff dates\",\n  \"errorCode\" : \"TARIFF_ELEMENT_DATES_OVERLAP_TARIFF_DATES\"\n}"
      },
      "TARIFF_ELEMENT_DATES_OVERLAP": {
        "value": "{\n  \"message\" : \"[TARIFF] Tariff element dates overlap\",\n  \"errorCode\" : \"TARIFF_ELEMENT_DATES_OVERLAP\"\n}"
      },
      "TARIFF_DATES_OVERLAP": {
        "value": "{\n  \"message\" : \"[TARIFF] Tariff dates overlap\",\n  \"errorCode\" : \"TARIFF_DATES_OVERLAP\"\n}"
      },
      "WRONG_TARIFF_DATE_FORMAT": {
        "value": "{\n  \"message\" : \"[TARIFF] Wrong Tariff dates format\",\n  \"errorCode\" : \"WRONG_TARIFF_DATE_FORMAT\"\n}"
      },
      "END_DATE_NOT_VALID": {
        "value": "{\n  \"message\" : \"[TARIFF] End date can not be in the past\",\n  \"errorCode\" : \"END_DATE_NOT_VALID\"\n}"
      },
      "LIST_CONTAINS_DUPLICATE_EVSE_ID": {
        "value": "{\n  \"message\" : \"[CPO-CHARGINGSTATION] Multiple evses in the provided list must not have the same id\",\n  \"errorCode\" : \"LIST_CONTAINS_DUPLICATE_EVSE_ID\"\n}"
      },
      "EVSE_ID_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[CPO-CHARGINGSTATION] EVSE with the provided EVSE_ID does not exist.\",\n  \"errorCode\" : \"EVSE_ID_NOT_FOUND\"\n}"
      },
      "CONNECTOR_ID_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[CPO-CHARGINGSTATION] EVSE with the provided Connector_ID does not exist.\",\n  \"errorCode\" : \"CONNECTOR_ID_NOT_FOUND\"\n}"
      },
      "TARIFF_ID_ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"[CPO-CHARGINGSTATION] Tariff id already exists inside the connector\",\n  \"errorCode\" : \"TARIFF_ID_ALREADY_EXISTS\"\n}"
      },
      "TARIFF_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] Tariff with the specified UUID not found\",\n  \"errorCode\" : \"TARIFF_NOT_FOUND\"\n}"
      },
      "RPC_TIMEOUT": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] The RPC call to the charging station did not respond in time.\",\n  \"errorCode\" : \"RPC_TIMEOUT\"\n}"
      },
      "RPC_ERROR": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] An error occured during the remote procedure call\",\n  \"errorCode\" : \"RPC_ERROR\"\n}"
      },
      "UNABLE_TO_DELETE_CSMS": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] Cannot delete CSMS with connected charging stations to it.\",\n  \"errorCode\" : \"UNABLE_TO_DELETE_CSMS\"\n}"
      },
      "NOT_UNIQUE_NAME": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] Provided name is not unique.\",\n  \"errorCode\" : \"NOT_UNIQUE_NAME\"\n}"
      },
      "DEFAULT_CSMS_CANNOT_CHANGE_TO_NOT_DEFAULT": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] Default CSMS cannot change to not-default.\",\n  \"errorCode\" : \"DEFAULT_CSMS_CANNOT_CHANGE_TO_NOT_DEFAULT\"\n}"
      },
      "CANNOT_DELETE_DEFAULT_CSMS": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] Cannot delete Default CSMS, unless it is the only one and with no connected charging stations to it.\",\n  \"errorCode\" : \"CANNOT_DELETE_DEFAULT_CSMS\"\n}"
      },
      "CSMS_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] Requested CSMS not found.\",\n  \"errorCode\" : \"CSMS_NOT_FOUND\"\n}"
      },
      "CSMS_URL_ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] Provided CSMS url is not unique.\",\n  \"errorCode\" : \"CSMS_URL_ALREADY_EXISTS\"\n}"
      },
      "CHARGING_STATION_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] Requested Charging Station not found.\",\n  \"errorCode\" : \"CHARGING_STATION_NOT_FOUND\"\n}"
      },
      "UNABLE_TO_CONNECT_TO_CSMS": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] Cannot connect to CSMS, endpoint is not reachable\",\n  \"errorCode\" : \"UNABLE_TO_CONNECT_TO_CSMS\"\n}"
      },
      "WRONG_OCPP_VERSION": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] The negotiated OCPP protocol version is not supporting this request\",\n  \"errorCode\" : \"WRONG_OCPP_VERSION\"\n}"
      },
      "CHARGING_STATION_SHADOW_CONNECTOR_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] Requested Charging Station Shadow Connector not found.\",\n  \"errorCode\" : \"CHARGING_STATION_SHADOW_CONNECTOR_NOT_FOUND\"\n}"
      },
      "INVALID_IDENTITY_KEY": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] One or more specified charging station identity keys are not valid\",\n  \"errorCode\" : \"INVALID_IDENTITY_KEY\"\n}"
      },
      "FAILED_TO_DELETE_LOCATION": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] Failed to delete Location which has charging station/s bound to it\",\n  \"errorCode\" : \"FAILED_TO_DELETE_LOCATION\"\n}"
      },
      "INVALID_LOCATION_RELATION": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] One or more charging stations are not assigned to the specified location\",\n  \"errorCode\" : \"INVALID_LOCATION_RELATION\"\n}"
      },
      "WRONG_PASSWORD": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] The given password does not match with the confirmation password\",\n  \"errorCode\" : \"WRONG_PASSWORD\"\n}"
      },
      "UNABLE_TO_UPDATE_CSMS_CREDENTIALS": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] No changes were requested.\",\n  \"errorCode\" : \"UNABLE_TO_UPDATE_CSMS_CREDENTIALS\"\n}"
      },
      "DUPLICATE_CONNECTOR_ID": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] Connectors with the same id in the request.\",\n  \"errorCode\" : \"DUPLICATE_CONNECTOR_ID\"\n}"
      },
      "PAGE_SIZE_EXCEEDED": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] Max number of the results per page is 100.\",\n  \"errorCode\" : \"PAGE_SIZE_EXCEEDED\"\n}"
      },
      "EVSE_ID_NOT_UNIQUE": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] Provided EVSE ID already exists.\",\n  \"errorCode\" : \"EVSE_ID_NOT_UNIQUE\"\n}"
      },
      "EVSE_ID_DUPLICATES": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] Two or more EVSE ID's are identical. All EVSE ID's must be unique.\",\n  \"errorCode\" : \"EVSE_ID_DUPLICATES\"\n}"
      },
      "NOT_VALID_BEGIN_END_TIME": {
        "value": "{\n  \"message\" : \"[CPO-CHARGINGSTATION] period_end cannot be equal to period_begin, or before this.\",\n  \"errorCode\" : \"NOT_VALID_BEGIN_END_TIME\"\n}"
      },
      "NOT_VALID_OPENING_TIMES": {
        "value": "{\n  \"message\" : \"[CPO-CHARGINGSTATION] Location opening times are not valid.\",\n  \"errorCode\" : \"NOT_VALID_OPENING_TIMES\"\n}"
      },
      "EXPIRY_DATE_MAX_VALUE": {
        "value": "{\n  \"message\" : \"[TOKEN] The expiry date must not be greater than 9999.\",\n  \"errorCode\" : \"EXPIRY_DATE_MAX_VALUE\"\n}"
      },
      "UID_ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"[TOKEN] Token UID already exists\",\n  \"errorCode\" : \"UID_ALREADY_EXISTS\"\n}"
      },
      "TOKEN_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[TOKEN] The token with the provided UID does not exist.\",\n  \"errorCode\" : \"TOKEN_NOT_FOUND\"\n}"
      },
      "USER_NOT_FOUND": {
        "value": "{\n  \"message\" : \"The entered user does not exist.\",\n  \"errorCode\" : \"USER_NOT_FOUND\"\n}"
      },
      "USER_ALREADY_HAS_ACCESS": {
        "value": "{\n  \"message\" : \"The user already has access\",\n  \"errorCode\" : \"USER_ALREADY_HAS_ACCESS\"\n}"
      },
      "USER_ACCESS_REQUEST_NOT_FOUND": {
        "value": "{\n  \"message\" : \"The entered user access request does not exist.\",\n  \"errorCode\" : \"USER_ACCESS_REQUEST_NOT_FOUND\"\n}"
      },
      "FILE_IS_NOT_IMAGE": {
        "value": "{\n  \"message\" : \"The file isn't image.\",\n  \"errorCode\" : \"FILE_IS_NOT_IMAGE\"\n}"
      },
      "FORMAT_NOT_SUPPORTED": {
        "value": "{\n  \"message\" : \"The logo format not supported\",\n  \"errorCode\" : \"FORMAT_NOT_SUPPORTED\"\n}"
      },
      "EXTENSION_MISSING": {
        "value": "{\n  \"message\" : \"The logo extension missing\",\n  \"errorCode\" : \"EXTENSION_MISSING\"\n}"
      }
    },
    "headers": {
      "api-category": {
        "description": "CPO Services",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "display-name": {
        "description": "CSMS Web",
        "required": false,
        "schema": {
          "type": "string"
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "Bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}