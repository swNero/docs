{
  "openapi": "3.0.1",
  "info": {
    "title": "cpo-charging-station-service",
    "description": "A service for manipulating charging stations and locations (sites)",
    "contact": {
      "name": "P3 digital services GmbH",
      "email": "contact@energystacks.io"
    },
    "version": "v1"
  },
  "servers": [
    {
      "url": "https://p3-acc.energystacks.io/cpo-chargingstation/v1",
      "description": "Generated server url"
    }
  ],
  "paths": {
    "/{providerId}/{chargingStationId}/evses/{evseId}": {
      "get": {
        "tags": [
          "EVSEs"
        ],
        "summary": "Get EVSE",
        "description": "Returns EVSE with the specific EVSE ID",
        "operationId": "getEvseByIdByProvider",
        "parameters": [
          {
            "name": "evseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chargingStationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Evse"
                }
              }
            }
          },
          "404": {
            "description": "EVSE not found"
          }
        }
      },
      "put": {
        "tags": [
          "EVSEs"
        ],
        "summary": "Update evse",
        "description": "Returns the updated evse",
        "operationId": "updateEvse",
        "parameters": [
          {
            "name": "evseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chargingStationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvseUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Evse"
                }
              }
            }
          },
          "404": {
            "description": "EVSE not found"
          }
        }
      },
      "delete": {
        "tags": [
          "EVSEs"
        ],
        "summary": "Delete EVSE",
        "description": "Delete EVSE with the specific EVSE Id",
        "operationId": "deleteEvse",
        "parameters": [
          {
            "name": "evseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chargingStationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Evse"
                }
              }
            }
          },
          "404": {
            "description": "EVSE not found"
          }
        }
      }
    },
    "/{providerId}/evses/{evseId}/connector/{connectorId}/unassign": {
      "put": {
        "tags": [
          "EVSEs"
        ],
        "summary": "Unassigns EVSE connector's tariff ids",
        "description": "Unassigns the tariff ids of the connector",
        "operationId": "unassignTariffIdOnConnector",
        "parameters": [
          {
            "name": "evseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connectorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tariffIds",
            "in": "query",
            "required": true,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Evse"
                }
              }
            }
          },
          "404": {
            "description": "EVSE with the provided Connector_Id does not exist."
          }
        }
      }
    },
    "/{providerId}/evses/{evseId}/connector/{connectorId}/assign": {
      "put": {
        "tags": [
          "EVSEs"
        ],
        "summary": "Assigns EVSE connector's tariff ids",
        "description": "Assigns the tariff ids on the connector",
        "operationId": "assignTariffIdOnConnector",
        "parameters": [
          {
            "name": "evseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connectorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tariffIds",
            "in": "query",
            "required": true,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Evse"
                }
              }
            }
          },
          "404": {
            "description": "EVSE with the provided Connector_Id does not exist."
          },
          "409": {
            "description": "Tariff id already exists inside the connector"
          }
        }
      }
    },
    "/locations/{locationId}/{providerId}": {
      "put": {
        "tags": [
          "Locations"
        ],
        "summary": "Update location",
        "description": "Update a location and save it to database",
        "operationId": "updateLocation",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargingStationLocation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Not valid period begin and end time"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict - Not valid opening times"
          }
        }
      },
      "delete": {
        "tags": [
          "Locations"
        ],
        "summary": "Delete a location",
        "description": "Delete location if there are no charging stations connected to it",
        "operationId": "removeLocation",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargingStationLocation"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/chargingstations/{providerId}/{chargingStationId}": {
      "get": {
        "tags": [
          "Charging Stations"
        ],
        "summary": "Get Charging Station by charging station ID",
        "description": "Returns Charging Station with the specific Charging Station Id filtered by Provider ID.",
        "operationId": "getChargingStation",
        "parameters": [
          {
            "name": "chargingStationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargingStation"
                }
              }
            }
          },
          "404": {
            "description": "Charging Station not found"
          }
        }
      },
      "put": {
        "tags": [
          "Charging Stations"
        ],
        "summary": "Update Charging Station",
        "description": "Update Charging Station with the specific Charging Station id filtered by Provider ID.",
        "operationId": "updateChargingStation",
        "parameters": [
          {
            "name": "chargingStationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChargingStationUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargingStation"
                }
              }
            }
          },
          "400": {
            "description": "Location not found"
          },
          "404": {
            "description": "Charging Station not found"
          },
          "409": {
            "description": "Charging Station already exists"
          }
        }
      },
      "delete": {
        "tags": [
          "Charging Stations"
        ],
        "summary": "Delete Charging Station",
        "description": "Delete Charging Station with the specific Charging Station Id filtered by Provider ID.",
        "operationId": "deleteChargingStation",
        "parameters": [
          {
            "name": "chargingStationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargingStation"
                }
              }
            }
          },
          "404": {
            "description": "Charging Station not found"
          }
        }
      }
    },
    "/chargingstations/by-identity-key/{identityKey}/{providerId}": {
      "get": {
        "tags": [
          "Charging Stations"
        ],
        "summary": "Get Charging Station by identity Key",
        "description": "Returns a Charging Station by Identity Key, filtered by Provider ID.",
        "operationId": "getChargingStationByIdentityKeyAndProviderId",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargingStation"
                }
              }
            }
          },
          "404": {
            "description": "Charging Station not found"
          }
        }
      },
      "put": {
        "tags": [
          "Charging Stations"
        ],
        "summary": "Update Charging Station By Identity Key",
        "description": "Update Charging Station by identity key filtered by Provider ID.",
        "operationId": "updateChargingStationByIdentityKeyAndProviderId",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChargingStationUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargingStation"
                }
              }
            }
          },
          "400": {
            "description": "Location not found"
          },
          "404": {
            "description": "Charging Station not found"
          },
          "409": {
            "description": "Charging Station with same name already exists"
          }
        }
      },
      "delete": {
        "tags": [
          "Charging Stations"
        ],
        "summary": "Delete Charging Station by identity key",
        "description": "Delete Charging Station by Identity Key, filtered by Provider ID.",
        "operationId": "deleteChargingStationByIdentityKeyAndProviderId",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargingStation"
                }
              }
            }
          },
          "404": {
            "description": "Charging Station not found"
          }
        }
      }
    },
    "/{providerId}/{chargingStationId}/evses": {
      "get": {
        "tags": [
          "EVSEs"
        ],
        "summary": "Get all evses",
        "description": "Returns a list of all evses ",
        "operationId": "getAllEvses",
        "parameters": [
          {
            "name": "chargingStationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Evse"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "EVSEs"
        ],
        "summary": "Add evse",
        "description": "Returns the added evse",
        "operationId": "createEvse",
        "parameters": [
          {
            "name": "chargingStationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvseCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Evse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/locations/{providerId}": {
      "post": {
        "tags": [
          "Locations"
        ],
        "summary": "Create location",
        "description": "Create a new location and save it to database",
        "operationId": "createLocation",
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargingStationLocation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Not valid period begin and end time"
          },
          "409": {
            "description": "Conflict - Not valid opening times"
          }
        }
      }
    },
    "/chargingstations/{providerId}": {
      "get": {
        "tags": [
          "Charging Stations"
        ],
        "summary": "Get all Charging Stations by Provider ID.",
        "description": "Returns a list of all Charging Stations, filtered by Provider ID.",
        "operationId": "getAllChargingStationsByProviderId",
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChargingStation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Charging Stations"
        ],
        "summary": "Create charging station",
        "description": "Creates a new charging station, for a specific Provider",
        "operationId": "createChargingStation",
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChargingStationCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargingStation"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "409": {
            "description": "If an Evse with the same EVSE ID already exists."
          }
        }
      }
    },
    "/locations": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Get all locations",
        "description": "Returns a list of all locations ",
        "operationId": "getAllLocations",
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChargingStationLocation"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/locations/{locationId}": {
      "get": {
        "tags": [
          "Locations"
        ],
        "operationId": "getLocationById",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ChargingStationLocation"
                }
              }
            }
          }
        }
      }
    },
    "/locations/by-provider-id/{providerId}": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Get all locations by provider ID",
        "description": "Returns a list of all locations filtered by User's Provider ID",
        "operationId": "getAllLocationsByProviderId",
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChargingStationLocation"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/locations/by-provider-id/{providerId}/{locationId}": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Get location by location ID and provider ID",
        "description": "Returns a location filtered by User's Provider ID and location id",
        "operationId": "getLocationByLocationIdAndProviderId",
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChargingStationLocation"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/exists-by-evse/{evseId}": {
      "get": {
        "tags": [
          "EVSEs"
        ],
        "summary": "Check if EVSE exists",
        "description": "Returns True/False for a specific EVSE ID",
        "operationId": "existsByEvseId",
        "parameters": [
          {
            "name": "evseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/evses/{evseId}": {
      "get": {
        "tags": [
          "EVSEs"
        ],
        "summary": "Get EVSE",
        "description": "Returns EVSE with the specific EVSE ID",
        "operationId": "getEvseById",
        "parameters": [
          {
            "name": "evseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Evse"
                }
              }
            }
          },
          "404": {
            "description": "EVSE not found"
          }
        }
      }
    },
    "/evses/exists-by-tariff/{tariffId}": {
      "get": {
        "tags": [
          "EVSEs"
        ],
        "summary": "Check if EVSE exists for specific tariff",
        "description": "Returns True/False if the EVSE exists for a specific Tariff ID",
        "operationId": "existsByTariffId",
        "parameters": [
          {
            "name": "tariffId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/chargingstations": {
      "get": {
        "tags": [
          "Charging Stations"
        ],
        "summary": "Get all Charging Stations",
        "description": "Returns a list of all Charging Stations",
        "operationId": "getAllChargingStations",
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChargingStation"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/chargingstations/exists-by-identity-key/{identityKey}": {
      "get": {
        "tags": [
          "Charging Stations"
        ],
        "summary": "Check's if Charging Station exists by identity Key",
        "description": "Returns True if a Charging Station matches the provided Identity Key",
        "operationId": "chargingStationExistsByIdentityKey",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargingStation"
                }
              }
            }
          }
        }
      }
    },
    "/chargingstations/by-location/{providerId}/{locationId}": {
      "get": {
        "tags": [
          "Charging Stations"
        ],
        "summary": "Get all Charging Stations by Provider ID for the specific Location.",
        "description": "Returns a list of all Charging Stations, filtered by Provider ID. and by Location ID",
        "operationId": "getAllChargingStationsByProviderIdAndLocationId",
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChargingStation"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Charging Stations for the requested Location were not found"
          }
        }
      }
    },
    "/chargingstations/by-identity-key/{identityKey}": {
      "get": {
        "tags": [
          "Charging Stations"
        ],
        "summary": "Get Charging Station by identity Key",
        "description": "Returns a Charging Station that matches the provided Identity Key",
        "operationId": "getChargingStationByIdentityKey",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargingStation"
                }
              }
            }
          },
          "404": {
            "description": "Charging Station not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Connector": {
        "required": [
          "format",
          "id",
          "last_updated",
          "max_amperage",
          "max_voltage",
          "power_type",
          "standard"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Identifier of the Connector within the EVSE. Two Connectors may have the same id as long as they do not belong to the same EVSE object.",
            "example": "1"
          },
          "standard": {
            "type": "string",
            "description": "The standard of the installed connector.",
            "enum": [
              "CHADEMO",
              "CHAOJI",
              "DOMESTIC_A",
              "DOMESTIC_B",
              "DOMESTIC_C",
              "DOMESTIC_D",
              "DOMESTIC_E",
              "DOMESTIC_F",
              "DOMESTIC_G",
              "DOMESTIC_H",
              "DOMESTIC_I",
              "DOMESTIC_J",
              "DOMESTIC_K",
              "DOMESTIC_L",
              "DOMESTIC_M",
              "DOMESTIC_N",
              "DOMESTIC_O",
              "GBT_AC",
              "GBT_DC",
              "IEC_60309_2_single_16",
              "IEC_60309_2_three_16",
              "IEC_60309_2_three_32",
              "IEC_60309_2_three_64",
              "IEC_62196_T1",
              "IEC_62196_T1_COMBO",
              "IEC_62196_T2",
              "IEC_62196_T2_COMBO",
              "IEC_62196_T3A",
              "IEC_62196_T3C",
              "NEMA_5_20",
              "NEMA_6_30",
              "NEMA_6_50",
              "NEMA_10_30",
              "NEMA_10_50",
              "NEMA_14_30",
              "NEMA_14_50",
              "PANTOGRAPH_BOTTOM_UP",
              "PANTOGRAPH_TOP_DOWN",
              "TESLA_R",
              "TESLA_S",
              "UNKNOWN"
            ]
          },
          "format": {
            "type": "string",
            "description": "The format (socket/cable) of the installed connector.",
            "enum": [
              "SOCKET",
              "CABLE"
            ]
          },
          "power_type": {
            "type": "string",
            "enum": [
              "AC_1_PHASE",
              "AC_2_PHASE",
              "AC_2_PHASE_SPLIT",
              "AC_3_PHASE",
              "DC"
            ]
          },
          "max_voltage": {
            "type": "integer",
            "description": "Maximum voltage of the connector (line to neutral for AC_3_PHASE), in volt [V]. For example: DC Chargers might vary the voltage during charging when battery almost full.",
            "format": "int32"
          },
          "max_amperage": {
            "type": "integer",
            "description": "Maximum amperage of the connector, in ampere [A].",
            "format": "int32"
          },
          "max_electric_power": {
            "type": "integer",
            "description": "Maximum electric power that can be delivered by this connector, in Watts (W). When the maximum electric power is lower than the calculated value from voltage and amperage, this value should be set. \n    For example: A DC Charge Point which can delivers up to 920V and up to 400A can be limited to a maximum of 150kW (max_electric_power = 150000). Depending on the car, it may supply max voltage or current, but not both at the same time.\nFor AC Charge Points, the amount of phases used can also have influence on the maximum power.",
            "format": "int32"
          },
          "tariff_ids": {
            "uniqueItems": true,
            "type": "array",
            "description": "Identifiers of the currently valid charging tariffs. Multiple tariffs are possible, but only one of each Tariff.type can be active at the same time. Tariffs with the same type are only allowed if they are not active at the same time: start_date_time and end_date_time period not overlapping.\n    When preference-based smart charging is supported, one tariff for every possible ProfileType should be provided. These tell the user about the options they have at this Connector, and what the tariff is for every option.\nFor a \"free of charge\" tariff, this field should be set and point to a defined \"free of charge\" tariff.",
            "items": {
              "maxLength": 36,
              "minLength": 0,
              "type": "string",
              "description": "Identifiers of the currently valid charging tariffs. Multiple tariffs are possible, but only one of each Tariff.type can be active at the same time. Tariffs with the same type are only allowed if they are not active at the same time: start_date_time and end_date_time period not overlapping.\n    When preference-based smart charging is supported, one tariff for every possible ProfileType should be provided. These tell the user about the options they have at this Connector, and what the tariff is for every option.\nFor a \"free of charge\" tariff, this field should be set and point to a defined \"free of charge\" tariff."
            }
          },
          "terms_and_conditions": {
            "type": "string",
            "description": "URL to the operator’s terms and conditions.",
            "format": "url",
            "example": "http://www.example.com"
          },
          "last_updated": {
            "type": "string",
            "description": "Timestamp when this Connector was last updated (or created).",
            "format": "date-time"
          }
        },
        "description": "A Connector is the socket or cable and plug available for the EV to use. A single EVSE may provide multiple Connectors but only one of them can be in use at the same time. A Connector always belongs to an EVSE object."
      },
      "Evse": {
        "required": [
          "connectors",
          "last_updated",
          "status"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the EVSE within the CPOs platform (and suboperator platforms). For example a database ID or the actual \"EVSE ID\". This field can never be changed, modified or renamed. This is the 'technical' identification of the EVSE, not to be used as 'human readable' identification, use the field evse_id for that.This field is named uid instead of id, because id could be confused with evse_id which is an eMI3 defined field."
          },
          "status": {
            "type": "string",
            "description": "Indicates the current status of the EVSE.",
            "enum": [
              "AVAILABLE",
              "BLOCKED",
              "CHARGING",
              "INOPERATIVE",
              "OUTOFORDER",
              "PLANNED",
              "REMOVED",
              "RESERVED",
              "UNKNOWN"
            ]
          },
          "connectors": {
            "type": "array",
            "description": "List of available connectors on the EVSE.",
            "items": {
              "$ref": "#/components/schemas/Connector"
            }
          },
          "evse_id": {
            "maxLength": 48,
            "minLength": 0,
            "type": "string",
            "description": "Compliant with the following specification for EVSE ID from \"eMI3 standard version V1.0\" (http://emi3group.com/documents-links/) \"Part 2: business objects.\" Optional because: if an evse_id is to be re-used in the real world, the evse_id can be removed from an EVSE object if the status is set to REMOVED."
          },
          "status_schedule": {
            "type": "array",
            "description": "Indicates a planned status update of the EVSE.",
            "items": {
              "$ref": "#/components/schemas/StatusSchedule"
            }
          },
          "last_updated": {
            "type": "string",
            "description": "Timestamp when this EVSE or one of its Connectors was last updated (or created).",
            "format": "date-time"
          }
        },
        "description": "The EVSE object describes the part that controls the power supply to a single EV in a single session. It always belongs to a Location object. The object only contains directions to get from the location itself to the EVSE (i.e. floor, physical_reference or directions)."
      },
      "StatusSchedule": {
        "required": [
          "period_begin",
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status value during the scheduled period.",
            "enum": [
              "AVAILABLE",
              "BLOCKED",
              "CHARGING",
              "INOPERATIVE",
              "OUTOFORDER",
              "PLANNED",
              "REMOVED",
              "RESERVED",
              "UNKNOWN"
            ]
          },
          "period_begin": {
            "type": "string",
            "description": "Begin of the scheduled period.",
            "format": "date-time"
          },
          "period_end": {
            "type": "string",
            "description": "End of the scheduled period, if known.",
            "format": "date-time"
          }
        },
        "description": "This type is used to schedule status periods in the future. The eMSP can provide this information to the EV user for trip planning purposes. A period MAY have no end. Example: \"This station will be running as of tomorrow. Today it is still planned and under construction.\""
      },
      "ConnectorRequest": {
        "required": [
          "format",
          "id",
          "last_updated",
          "max_amperage",
          "max_voltage",
          "power_type",
          "standard"
        ],
        "type": "object",
        "properties": {
          "id": {
            "minimum": 1,
            "type": "integer",
            "description": "Identifier of the Connector within the EVSE. Two Connectors may have the same id as long as they do not belong to the same EVSE object.",
            "format": "int32",
            "example": 1
          },
          "standard": {
            "type": "string",
            "description": "The standard of the installed connector.",
            "enum": [
              "CHADEMO",
              "CHAOJI",
              "DOMESTIC_A",
              "DOMESTIC_B",
              "DOMESTIC_C",
              "DOMESTIC_D",
              "DOMESTIC_E",
              "DOMESTIC_F",
              "DOMESTIC_G",
              "DOMESTIC_H",
              "DOMESTIC_I",
              "DOMESTIC_J",
              "DOMESTIC_K",
              "DOMESTIC_L",
              "DOMESTIC_M",
              "DOMESTIC_N",
              "DOMESTIC_O",
              "GBT_AC",
              "GBT_DC",
              "IEC_60309_2_single_16",
              "IEC_60309_2_three_16",
              "IEC_60309_2_three_32",
              "IEC_60309_2_three_64",
              "IEC_62196_T1",
              "IEC_62196_T1_COMBO",
              "IEC_62196_T2",
              "IEC_62196_T2_COMBO",
              "IEC_62196_T3A",
              "IEC_62196_T3C",
              "NEMA_5_20",
              "NEMA_6_30",
              "NEMA_6_50",
              "NEMA_10_30",
              "NEMA_10_50",
              "NEMA_14_30",
              "NEMA_14_50",
              "PANTOGRAPH_BOTTOM_UP",
              "PANTOGRAPH_TOP_DOWN",
              "TESLA_R",
              "TESLA_S",
              "UNKNOWN"
            ]
          },
          "format": {
            "type": "string",
            "description": "The format (socket/cable) of the installed connector.",
            "enum": [
              "SOCKET",
              "CABLE"
            ]
          },
          "power_type": {
            "type": "string",
            "enum": [
              "AC_1_PHASE",
              "AC_2_PHASE",
              "AC_2_PHASE_SPLIT",
              "AC_3_PHASE",
              "DC"
            ]
          },
          "max_voltage": {
            "type": "integer",
            "description": "Maximum voltage of the connector (line to neutral for AC_3_PHASE), in volt [V]. For example: DC Chargers might vary the voltage during charging when battery almost full.",
            "format": "int32"
          },
          "max_amperage": {
            "type": "integer",
            "description": "Maximum amperage of the connector, in ampere [A].",
            "format": "int32"
          },
          "max_electric_power": {
            "type": "integer",
            "description": "Maximum electric power that can be delivered by this connector, in Watts (W). When the maximum electric power is lower than the calculated value from voltage and amperage, this value should be set. \n    For example: A DC Charge Point which can delivers up to 920V and up to 400A can be limited to a maximum of 150kW (max_electric_power = 150000). Depending on the car, it may supply max voltage or current, but not both at the same time.\nFor AC Charge Points, the amount of phases used can also have influence on the maximum power.",
            "format": "int32"
          },
          "terms_and_conditions": {
            "type": "string",
            "description": "URL to the operator’s terms and conditions.",
            "format": "url",
            "example": "http://www.example.com"
          },
          "last_updated": {
            "type": "string",
            "description": "Timestamp when this Connector was last updated (or created).",
            "format": "date-time"
          }
        },
        "description": "List of available connectors on the EVSE."
      },
      "EvseUpdateRequest": {
        "required": [
          "connectors",
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates the current status of the EVSE.",
            "enum": [
              "AVAILABLE",
              "BLOCKED",
              "CHARGING",
              "INOPERATIVE",
              "OUTOFORDER",
              "PLANNED",
              "REMOVED",
              "RESERVED",
              "UNKNOWN"
            ]
          },
          "connectors": {
            "type": "array",
            "description": "List of available connectors on the EVSE.",
            "items": {
              "$ref": "#/components/schemas/ConnectorRequest"
            }
          },
          "status_schedule": {
            "type": "array",
            "description": "Indicates a planned status update of the EVSE.",
            "items": {
              "$ref": "#/components/schemas/StatusSchedule"
            }
          }
        }
      },
      "AdditionalGeoLocation": {
        "required": [
          "latitude",
          "longitude"
        ],
        "type": "object",
        "properties": {
          "latitude": {
            "maxLength": 10,
            "minLength": 0,
            "pattern": "-?[0-9]{1,2}\\.[0-9]{5,7}",
            "type": "string",
            "description": "Latitude of the point in decimal degree. Decimal separator: \".\", Regex: -?[0-9]{1,2}\\.[0-9]{5,7}",
            "example": "50.770774"
          },
          "longitude": {
            "maxLength": 11,
            "minLength": 0,
            "pattern": "-?[0-9]{1,3}\\.[0-9]{5,7}",
            "type": "string",
            "description": "Longitude of the point in decimal degree. Decimal separator: \".\", Regex: -?[0-9]{1,3}\\.[0-9]{5,7}",
            "example": "-126.104965"
          },
          "name": {
            "$ref": "#/components/schemas/DisplayText"
          }
        },
        "description": "This class defines an additional geo location that is relevant for the Charge Point. The geodetic system to be used is WGS 84.",
        "nullable": true
      },
      "BusinessDetails": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Name of the operator."
          },
          "website": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Link to the operator’s website. An URL a string(255) type following the w3.org spec."
          },
          "logo": {
            "$ref": "#/components/schemas/Image"
          }
        },
        "description": "Information of the owner if available.",
        "nullable": true
      },
      "ChargingStation": {
        "required": [
          "chargingStationId",
          "evses",
          "identityKey",
          "providerId"
        ],
        "type": "object",
        "properties": {
          "identityKey": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "The Unique Identifier of a Charging Station.",
            "example": "ACE324452"
          },
          "chargingStationId": {
            "type": "integer",
            "description": "Identifies the Charging Station.",
            "format": "int32",
            "example": 32567
          },
          "locationDetails": {
            "$ref": "#/components/schemas/LocationDetails"
          },
          "evses": {
            "type": "array",
            "description": "Identifies the list of the EVSEs inside the Charging Station.",
            "items": {
              "$ref": "#/components/schemas/Evse"
            }
          },
          "operationalStatus": {
            "type": "string",
            "description": "Operational status of the Charging Station.",
            "example": "AVAILABLE",
            "enum": [
              "AVAILABLE",
              "BLOCKED",
              "CHARGING",
              "OUTOFORDER"
            ]
          },
          "communicationType": {
            "type": "string",
            "description": "Communication type of the Charging Station.",
            "example": "WiFi",
            "enum": [
              "WiFi",
              "LTE",
              "Ethernet"
            ]
          },
          "installationDate": {
            "type": "string",
            "description": "Installation Date of the Charging Station.",
            "format": "date-time"
          },
          "contactPerson": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Installation contact person of the Charging Station."
          },
          "loadManagementAvailable": {
            "type": "boolean",
            "description": "True when load management is available in the Charging Station.",
            "example": true
          },
          "calibrationLawCompliant": {
            "type": "boolean",
            "description": "True when Charging Station is law compliant.",
            "example": true
          },
          "authenticationMethods": {
            "type": "array",
            "description": "Authentication methods of the Charging Station.",
            "items": {
              "type": "string",
              "description": "Authentication methods of the Charging Station.",
              "enum": [
                "RFID",
                "APP",
                "ISO15118"
              ]
            }
          },
          "capabilities": {
            "type": "array",
            "description": "List of functionalities that Charging Station is capable of.",
            "items": {
              "type": "string",
              "description": "List of functionalities that Charging Station is capable of.",
              "enum": [
                "CHARGING_PROFILE_CAPABLE",
                "CHARGING_PREFERENCES_CAPABLE",
                "CHIP_CARD_SUPPORT",
                "CONTACTLESS_CARD_SUPPORT",
                "CREDIT_CARD_PAYABLE",
                "DEBIT_CARD_PAYABLE",
                "PED_TERMINAL",
                "REMOTE_START_STOP_CAPABLE",
                "RESERVABLE",
                "RFID_READER",
                "TOKEN_GROUP_CAPABLE",
                "UNLOCK_CAPABLE",
                "START_SESSION_CONNECTOR_REQUIRED"
              ]
            }
          },
          "floorLevel": {
            "maxLength": 4,
            "minLength": 0,
            "type": "string",
            "description": "Level on which the Charge Point is located (in garage buildings) in the locally displayed numbering scheme.",
            "example": "2"
          },
          "coordinates": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "physicalReference": {
            "maxLength": 16,
            "minLength": 0,
            "type": "string",
            "description": "A number/string printed on the outside of the Charging Station for visual identification.",
            "example": "WB123AE2"
          },
          "directions": {
            "type": "array",
            "description": "Multi-language human-readable directions when more detailed information on how to reach the Charging Station from the Location is required.",
            "items": {
              "$ref": "#/components/schemas/DisplayText"
            }
          },
          "parkingRestrictions": {
            "type": "array",
            "description": "Restrictions that apply to the parking spot.",
            "items": {
              "type": "string",
              "description": "Restrictions that apply to the parking spot.",
              "enum": [
                "EV_ONLY",
                "PLUGGED",
                "DISABLED",
                "CUSTOMERS",
                "MOTORCYCLES"
              ]
            }
          },
          "images": {
            "type": "array",
            "description": "Links images related to the Charging Station such as photos or logos.",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "providerId": {
            "type": "string",
            "description": "Contains the Provider ID of the CPO.",
            "example": "DE*E3D"
          }
        },
        "description": "The Charging station object that is stored in the database."
      },
      "ChargingStationLocation": {
        "required": [
          "address",
          "city",
          "coordinates",
          "country",
          "country_code",
          "last_updated",
          "location_id",
          "party_id"
        ],
        "type": "object",
        "properties": {
          "publish": {
            "type": "boolean",
            "description": "Defines if a Location may be published on an website or app etc. When this is set to false, only tokens identified in the field: publish_allowed_to are allowed to be shown this Location. When the same location has EVSEs that may be published and may not be published, two 'Locations' should be created.",
            "nullable": true
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Display name of the location.",
            "nullable": true
          },
          "address": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "Street/block name and house number if available."
          },
          "city": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "City or town."
          },
          "state": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "State or province of the location, only to be used when relevant.",
            "nullable": true
          },
          "country": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "ISO 3166-1 alpha-3 code for the country of this location.",
            "example": "DEU"
          },
          "coordinates": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "directions": {
            "type": "array",
            "description": "Human-readable directions on how to reach the location.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/DisplayText"
            }
          },
          "operator": {
            "$ref": "#/components/schemas/BusinessDetails"
          },
          "suboperator": {
            "$ref": "#/components/schemas/BusinessDetails"
          },
          "owner": {
            "$ref": "#/components/schemas/BusinessDetails"
          },
          "facilities": {
            "type": "array",
            "description": "Optional list of facilities this charging location directly belongsmto.",
            "nullable": true,
            "items": {
              "type": "string",
              "description": "Optional list of facilities this charging location directly belongsmto.",
              "nullable": true,
              "enum": [
                "HOTEL",
                "RESTAURANT",
                "CAFE",
                "MALL",
                "SUPERMARKET",
                "SPORT",
                "RECREATION_AREA",
                "NATURE",
                "MUSEUM",
                "BIKE_SHARING",
                "BUS_STOP",
                "TAXI_STAND",
                "TRAM_STOP",
                "METRO_STATION",
                "TRAIN_STATION",
                "AIRPORT",
                "PARKING_LOT",
                "CARPOOL_PARKING",
                "FUEL_STATION",
                "WIFI"
              ]
            }
          },
          "images": {
            "type": "array",
            "description": "Links to images related to the location such as photos or logos.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "chargingStations": {
            "type": "array",
            "description": "The Charging Stations at this location.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ChargingStation"
            }
          },
          "country_code": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "ISO-3166 alpha-2 country code of the CPO that 'owns' this Location.",
            "example": "DE"
          },
          "party_id": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "ID of the CPO that 'owns' this Location (following the ISO-15118 standard)."
          },
          "location_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the location within the CPOs platform (and suboperator platforms). This field can never be changed, modified or renamed."
          },
          "postal_code": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Postal code of the location, may only be omitted when the location has no postal code: in some countries charging locations at highways don’t have postal codes.",
            "nullable": true
          },
          "related_locations": {
            "type": "array",
            "description": "Geographical location of related points relevant to the user.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AdditionalGeoLocation"
            }
          },
          "parking_type": {
            "type": "string",
            "description": "The general type of parking at the charge point location.",
            "nullable": true,
            "enum": [
              "ALONG_MOTORWAY",
              "PARKING_GARAGE",
              "PARKING_LOT",
              "ON_DRIVEWAY",
              "ON_STREET",
              "UNDERGROUND_GARAGE"
            ]
          },
          "time_zone": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "One of IANA tzdata’s TZ-values representing the time zone of the location. For example: \"Europe/Oslo\", \"Europe/Zurich\". (http://www.iana.org/time-zones)",
            "nullable": true,
            "example": "Europe/Oslo"
          },
          "opening_times": {
            "$ref": "#/components/schemas/Hours"
          },
          "charging_when_closed": {
            "type": "boolean",
            "description": "Indicates if the EVSEs are still charging outside the opening hours of the location. E.g. when the parking garage closes its barriers over night, is it allowed to charge till the next morning? Default: true",
            "nullable": true
          },
          "energy_mix": {
            "$ref": "#/components/schemas/EnergyMix"
          },
          "last_updated": {
            "type": "string",
            "description": "Timestamp when this Location or one of its EVSEs or Connectors were last updated (or created).",
            "format": "date-time"
          }
        },
        "description": "The Location object that is stored in the CSMS."
      },
      "DisplayText": {
        "required": [
          "language",
          "text"
        ],
        "type": "object",
        "properties": {
          "language": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "Language Code ISO 639-1.",
            "example": "en"
          },
          "text": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Text to be displayed to a end user. No markup, html etc. allowed.",
            "example": "this is a display text"
          }
        },
        "description": "Multi-language human-readable directions when more detailed information on how to reach the Charging Station from the Location is required."
      },
      "EnergyMix": {
        "required": [
          "is_green_energy"
        ],
        "type": "object",
        "properties": {
          "is_green_energy": {
            "type": "boolean",
            "description": "True if 100% from regenerative sources. (CO2 and nuclear waste is zero)",
            "example": false
          },
          "energy_sources": {
            "type": "array",
            "description": "Key-value pairs (enum + percentage) of energy sources of this location’s tariff.",
            "items": {
              "$ref": "#/components/schemas/EnergySource"
            }
          },
          "environ_impact": {
            "type": "array",
            "description": "Key-value pairs (enum + percentage) of nuclear waste and CO2 exhaust of this location’s tariff.",
            "items": {
              "$ref": "#/components/schemas/EnvironmentalImpact"
            }
          },
          "supplier_name": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Name of the energy supplier, delivering the energy for this location or tariff.",
            "example": "HANDWE EV"
          },
          "energy_product_name": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Name of the energy suppliers product/tariff plan used at this location.",
            "example": "Kleenheat"
          }
        },
        "description": "This type is used to specify the energy mix and environmental impact of the supplied energy at a location or in a tariff.",
        "nullable": true
      },
      "EnergySource": {
        "required": [
          "percentage",
          "source"
        ],
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "description": "Categories of energy sources.",
            "example": "GAS",
            "enum": [
              "NUCLEAR",
              "GENERAL_FOSSIL",
              "COAL",
              "GAS",
              "GENERAL_GREEN",
              "SOLAR",
              "WIND",
              "WATER"
            ]
          },
          "percentage": {
            "maximum": 100,
            "exclusiveMaximum": false,
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "number",
            "description": "Percentage of this source (0-100) in the mix.",
            "example": 33.2
          }
        },
        "description": "Key-value pairs (enum + percentage) of energy sources. All given values of all categories should add up to 100 percent."
      },
      "EnvironmentalImpact": {
        "required": [
          "amount",
          "category"
        ],
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "description": "Categories of environmental impact values.",
            "example": "NUCLEAR_WASTE",
            "enum": [
              "NUCLEAR_WASTE",
              "CARBON_DIOXIDE"
            ]
          },
          "amount": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "number",
            "description": "Amount of this portion in g/kWh.",
            "example": 0.005
          }
        },
        "description": "Amount of waste produced/emitted per kWh."
      },
      "ExceptionalPeriod": {
        "required": [
          "period_begin",
          "period_end"
        ],
        "type": "object",
        "properties": {
          "period_begin": {
            "type": "string",
            "description": "Begin of the exception. SecurityScheme.In UTC, time_zone field can be used to convert to local time.",
            "format": "date-time",
            "example": "2022-06-24T00:00:00Z"
          },
          "period_end": {
            "type": "string",
            "description": "End of the exception. In UTC, time_zone field can be used to convert to local time.",
            "format": "date-time",
            "example": "2022-06-25T00:00:00Z"
          }
        },
        "description": "Specifies one exceptional period for opening or access hours."
      },
      "GeoLocation": {
        "required": [
          "latitude",
          "longitude"
        ],
        "type": "object",
        "properties": {
          "latitude": {
            "type": "string",
            "description": "Latitude of the point in decimal degree. Decimal separator: '.', Regex: -?[0-9]{1,2}\\.[0-9]{5,7}",
            "example": "50.770774"
          },
          "longitude": {
            "type": "string",
            "description": "Longitude of the point in decimal degree. Decimal separator: '.' Regex: -?[0-9]{1,3}\\.[0-9]{5,7}",
            "example": "-126.104965"
          }
        },
        "description": "This class defines the geo location of the Charge Point. The geodetic system to be used is WGS 84."
      },
      "Hours": {
        "required": [
          "twentyfourseven"
        ],
        "type": "object",
        "properties": {
          "twentyfourseven": {
            "type": "boolean",
            "description": "True to represent 24 hours a day and 7 days a week, except the given exceptions.",
            "example": false
          },
          "regular_hours": {
            "type": "array",
            "description": "Regular hours, weekday-based. Only to be used if twentyfourseven=false, then this field needs to contain at least one RegularHours object.",
            "items": {
              "$ref": "#/components/schemas/RegularHours"
            }
          },
          "exceptional_openings": {
            "type": "array",
            "description": "Exceptions for specified calendar dates, time-range based. Periods the station is operating/accessible. Additional to regular_hours. May overlap regular rules.",
            "items": {
              "$ref": "#/components/schemas/ExceptionalPeriod"
            }
          },
          "exceptional_closings": {
            "type": "array",
            "description": "Exceptions for specified calendar dates, time-range based. Periods the station is not operating/accessible. Overwriting regular_hours and exceptional_openings. Should not overlap exceptional_openings.",
            "items": {
              "$ref": "#/components/schemas/ExceptionalPeriod"
            }
          }
        },
        "description": "Opening and access hours of the location.",
        "nullable": true
      },
      "Image": {
        "required": [
          "category",
          "type",
          "url"
        ],
        "type": "object",
        "properties": {
          "url": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "URL from where the image data can be fetched through a web browser."
          },
          "thumbnail": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "URL from where a thumbnail of the image can be fetched through a web browser."
          },
          "category": {
            "type": "string",
            "description": "Describes what the image is used for.",
            "example": "CHARGER",
            "enum": [
              "CHARGER",
              "ENTRANCE",
              "LOCATION",
              "NETWORK",
              "OPERATOR",
              "OTHER",
              "OWNER"
            ]
          },
          "type": {
            "maxLength": 4,
            "minLength": 0,
            "type": "string",
            "description": "Image type, for example: gif, jpeg, png, svg",
            "example": "jpeg"
          },
          "width": {
            "type": "integer",
            "description": "Width of the full scale image.",
            "format": "int32",
            "example": 50
          },
          "height": {
            "type": "integer",
            "description": "Height of the full scale image.",
            "format": "int32",
            "example": 600
          }
        },
        "description": "Links images related to the Charging Station such as photos or logos."
      },
      "LocationDetails": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Display name of the location.",
            "nullable": true
          },
          "id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the location within the CPOs platform (and suboperator platforms).This field can never be changed, modified or renamed."
          }
        },
        "description": "Contains only the most relevant data of a Location."
      },
      "RegularHours": {
        "required": [
          "period_begin",
          "period_end",
          "weekday"
        ],
        "type": "object",
        "properties": {
          "weekday": {
            "type": "integer",
            "description": "Number of day in the week, from Monday (1) till Sunday (7)",
            "format": "int32",
            "example": 1
          },
          "period_begin": {
            "maxLength": 5,
            "minLength": 0,
            "pattern": "([0-1][0-9]|2[0-3]):[0-5][0-9]",
            "type": "string",
            "description": "Begin of the regular period, in local time, given in hours and minutes. Must be in 24h format with leading zeros. Example: \"18:15\". Hour/Minute separator: \":\" Regex: ([0-1][0-9]|2[0-3]):[0-5][0-9].",
            "example": "07:00"
          },
          "period_end": {
            "maxLength": 5,
            "minLength": 0,
            "pattern": "([0-1][0-9]|2[0-3]):[0-5][0-9]",
            "type": "string",
            "description": "End of the regular period, in local time, syntax as for period_begin. Must be later than period_begin.",
            "example": "18:00"
          }
        },
        "description": "Regular recurring operation or access hours."
      },
      "LocationUpdateRequest": {
        "required": [
          "address",
          "city",
          "country"
        ],
        "type": "object",
        "properties": {
          "publish": {
            "type": "boolean",
            "description": "Defines if a Location may be published on an website or app etc.When this is set to false, only tokens identified in the field: publish_allowed_to are allowed to beshown this Location. When the same location has EVSEs that may be published and may not be published, two 'Locations' should be created.",
            "nullable": true
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Display name of the location.",
            "nullable": true
          },
          "address": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "Street/block name and house number if available."
          },
          "city": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "City or town."
          },
          "state": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "State or province of the location, only to be used when relevant.",
            "nullable": true
          },
          "country": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "ISO 3166-1 alpha-3 code for the country of this location.",
            "example": "DEU"
          },
          "coordinates": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "directions": {
            "type": "array",
            "description": "Human-readable directions on how to reach the location.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/DisplayText"
            }
          },
          "operator": {
            "$ref": "#/components/schemas/BusinessDetails"
          },
          "suboperator": {
            "$ref": "#/components/schemas/BusinessDetails"
          },
          "owner": {
            "$ref": "#/components/schemas/BusinessDetails"
          },
          "facilities": {
            "type": "array",
            "description": "Optional list of facilities this charging location directly belongs to.",
            "nullable": true,
            "items": {
              "type": "string",
              "description": "Optional list of facilities this charging location directly belongs to.",
              "nullable": true,
              "enum": [
                "HOTEL",
                "RESTAURANT",
                "CAFE",
                "MALL",
                "SUPERMARKET",
                "SPORT",
                "RECREATION_AREA",
                "NATURE",
                "MUSEUM",
                "BIKE_SHARING",
                "BUS_STOP",
                "TAXI_STAND",
                "TRAM_STOP",
                "METRO_STATION",
                "TRAIN_STATION",
                "AIRPORT",
                "PARKING_LOT",
                "CARPOOL_PARKING",
                "FUEL_STATION",
                "WIFI"
              ]
            }
          },
          "images": {
            "type": "array",
            "description": "Links to images related to the location such as photos or logos.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "postal_code": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Postal code of the location, may only be omitted when the location has no postal code: in some countries charging locations at highways don’t have postal codes.",
            "nullable": true
          },
          "related_locations": {
            "type": "array",
            "description": "Geographical location of related points relevant to the user.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AdditionalGeoLocation"
            }
          },
          "parking_type": {
            "type": "string",
            "description": "The general type of parking at the charge point location.",
            "nullable": true,
            "example": "PARKING_GARAGE",
            "enum": [
              "ALONG_MOTORWAY",
              "PARKING_GARAGE",
              "PARKING_LOT",
              "ON_DRIVEWAY",
              "ON_STREET",
              "UNDERGROUND_GARAGE"
            ]
          },
          "time_zone": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "One of IANA tzdata’s TZ-values representing the time zone of the location.For example: \"Europe/Oslo\", \"Europe/Zurich\". (http://www.iana.org/time-zones)",
            "nullable": true,
            "example": "Europe/Oslo"
          },
          "opening_times": {
            "$ref": "#/components/schemas/Hours"
          },
          "charging_when_closed": {
            "type": "boolean",
            "description": "Indicates if the EVSEs are still charging outside the opening hours of the location. E.g. when the parking garage closes its barriers over night, is it allowed to charge till the next morning? Default: true",
            "nullable": true
          },
          "energy_mix": {
            "$ref": "#/components/schemas/EnergyMix"
          }
        },
        "description": "The Location object describes the location and its properties where a group of EVSEsthat belong together are installed. Typically, the Location object is the exact location of the group of EVSEs,but it can also be the entrance of a parking garage which contains these EVSEs.The exact way to reach each EVSE can be further specified by its own properties."
      },
      "ChargingStationUpdateRequest": {
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "description": "This contains the location id of the Charging Station."
          },
          "operationalStatus": {
            "type": "string",
            "description": "This contains the operational status of the Charging Station.",
            "enum": [
              "AVAILABLE",
              "BLOCKED",
              "CHARGING",
              "OUTOFORDER"
            ]
          },
          "communicationType": {
            "type": "string",
            "description": "This contains the communication type of the Charging Station.",
            "enum": [
              "WiFi",
              "LTE",
              "Ethernet"
            ]
          },
          "installationDate": {
            "type": "string",
            "description": "This contains the installation Date of the Charging Station.",
            "format": "date-time"
          },
          "contactPerson": {
            "type": "string",
            "description": "This contains the installation contract person of the Charging Station."
          },
          "loadManagementAvailable": {
            "type": "boolean",
            "description": "This contains if the load management is available in the Charging Station.",
            "example": true
          },
          "calibrationLawCompliant": {
            "type": "boolean",
            "description": "This contains if the Charging Station is law compliant.",
            "example": true
          },
          "authenticationMethods": {
            "type": "array",
            "description": "This contains the authentication methods of the Charging Station.",
            "items": {
              "type": "string",
              "description": "This contains the authentication methods of the Charging Station.",
              "enum": [
                "RFID",
                "APP",
                "ISO15118"
              ]
            }
          },
          "capabilities": {
            "type": "array",
            "description": "List of functionalities that Charging Station is capable of",
            "items": {
              "type": "string",
              "description": "List of functionalities that Charging Station is capable of",
              "enum": [
                "CHARGING_PROFILE_CAPABLE",
                "CHARGING_PREFERENCES_CAPABLE",
                "CHIP_CARD_SUPPORT",
                "CONTACTLESS_CARD_SUPPORT",
                "CREDIT_CARD_PAYABLE",
                "DEBIT_CARD_PAYABLE",
                "PED_TERMINAL",
                "REMOTE_START_STOP_CAPABLE",
                "RESERVABLE",
                "RFID_READER",
                "TOKEN_GROUP_CAPABLE",
                "UNLOCK_CAPABLE",
                "START_SESSION_CONNECTOR_REQUIRED"
              ]
            }
          },
          "floorLevel": {
            "maxLength": 4,
            "minLength": 0,
            "type": "string",
            "description": "Level on which the Charge Point is located (in garage buildings) in the locally displayed numbering scheme.",
            "example": "2"
          },
          "coordinates": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "physicalReference": {
            "maxLength": 16,
            "minLength": 0,
            "type": "string",
            "description": "A number/string printed on the outside of the Charging Station for visual identification.",
            "example": "WB123AE2"
          },
          "directions": {
            "type": "array",
            "description": "Multi-language human-readable directions when more detailed information on how to reach the Charging Station from the Location is required.",
            "items": {
              "$ref": "#/components/schemas/DisplayText"
            }
          },
          "parkingRestrictions": {
            "type": "array",
            "description": "The restrictions that apply to the parking spot.",
            "items": {
              "type": "string",
              "description": "The restrictions that apply to the parking spot.",
              "enum": [
                "EV_ONLY",
                "PLUGGED",
                "DISABLED",
                "CUSTOMERS",
                "MOTORCYCLES"
              ]
            }
          },
          "images": {
            "type": "array",
            "description": "Links images related to the Charging Station such as photos or logos.",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          }
        }
      },
      "EvseCreateRequest": {
        "required": [
          "connectors"
        ],
        "type": "object",
        "properties": {
          "connectors": {
            "type": "array",
            "description": "List of available connectors on the EVSE.",
            "items": {
              "$ref": "#/components/schemas/ConnectorRequest"
            }
          },
          "evseId": {
            "maxLength": 48,
            "minLength": 0,
            "pattern": "([A-Za-z0-9\\-\\_\\!\\@\\#\\$\\^\\&\\*\\(\\)=:]+)",
            "type": "string",
            "description": "Identifies the evse id, if empty it will be auto generated",
            "example": "DE*ERG*E10001*1"
          },
          "status_schedule": {
            "type": "array",
            "description": "Indicates a planned status update of the EVSE.",
            "items": {
              "$ref": "#/components/schemas/StatusSchedule"
            }
          }
        }
      },
      "LocationCreateRequest": {
        "required": [
          "address",
          "city",
          "coordinates",
          "country"
        ],
        "type": "object",
        "properties": {
          "publish": {
            "type": "boolean",
            "description": "Defines if a Location may be published on an website or app etc.When this is set to false, only tokens identified in the field: publish_allowed_to are allowed to beshown this Location. When the same location has EVSEs that may be published and may not be published, two 'Locations' should be created.",
            "nullable": true
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Display name of the location.",
            "nullable": true
          },
          "address": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "Street/block name and house number if available."
          },
          "city": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "City or town."
          },
          "state": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "State or province of the location, only to be used when relevant.",
            "nullable": true
          },
          "country": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "ISO 3166-1 alpha-3 code for the country of this location.",
            "example": "DEU"
          },
          "coordinates": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "directions": {
            "type": "array",
            "description": "Human-readable directions on how to reach the location.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/DisplayText"
            }
          },
          "operator": {
            "$ref": "#/components/schemas/BusinessDetails"
          },
          "suboperator": {
            "$ref": "#/components/schemas/BusinessDetails"
          },
          "owner": {
            "$ref": "#/components/schemas/BusinessDetails"
          },
          "facilities": {
            "type": "array",
            "description": "Optional list of facilities this charging location directly belongs to.",
            "nullable": true,
            "items": {
              "type": "string",
              "description": "Optional list of facilities this charging location directly belongs to.",
              "nullable": true,
              "enum": [
                "HOTEL",
                "RESTAURANT",
                "CAFE",
                "MALL",
                "SUPERMARKET",
                "SPORT",
                "RECREATION_AREA",
                "NATURE",
                "MUSEUM",
                "BIKE_SHARING",
                "BUS_STOP",
                "TAXI_STAND",
                "TRAM_STOP",
                "METRO_STATION",
                "TRAIN_STATION",
                "AIRPORT",
                "PARKING_LOT",
                "CARPOOL_PARKING",
                "FUEL_STATION",
                "WIFI"
              ]
            }
          },
          "images": {
            "type": "array",
            "description": "Links to images related to the location such as photos or logos.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "postal_code": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Postal code of the location, may only be omitted when the location has no postal code: in some countries charging locations at highways don’t have postal codes.",
            "nullable": true
          },
          "related_locations": {
            "type": "array",
            "description": "Geographical location of related points relevant to the user.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AdditionalGeoLocation"
            }
          },
          "parking_type": {
            "type": "string",
            "description": "The general type of parking at the charge point location.",
            "nullable": true,
            "example": "ON_STREET",
            "enum": [
              "ALONG_MOTORWAY",
              "PARKING_GARAGE",
              "PARKING_LOT",
              "ON_DRIVEWAY",
              "ON_STREET",
              "UNDERGROUND_GARAGE"
            ]
          },
          "time_zone": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "One of IANA tzdata’s TZ-values representing the time zone of the location.For example: \"Europe/Oslo\", \"Europe/Zurich\". (http://www.iana.org/time-zones)",
            "nullable": true,
            "example": "Europe/Oslo"
          },
          "opening_times": {
            "$ref": "#/components/schemas/Hours"
          },
          "charging_when_closed": {
            "type": "boolean",
            "description": "Indicates if the EVSEs are still charging outside the opening hours of the location. E.g. when the parking garage closes its barriers over night, is it allowed to charge till the next morning? Default: true",
            "nullable": true
          },
          "energy_mix": {
            "$ref": "#/components/schemas/EnergyMix"
          }
        },
        "description": "The Location object describes the location and its properties where a group of EVSEsthat belong together are installed. Typically, the Location object is the exact location of the group of EVSEs,but it can also be the entrance of a parking garage which contains these EVSEs.The exact way to reach each EVSE can be further specified by its own properties."
      },
      "ChargingStationCreateRequest": {
        "required": [
          "evses",
          "identityKey"
        ],
        "type": "object",
        "properties": {
          "identityKey": {
            "maxLength": 32,
            "minLength": 0,
            "pattern": "([A-Za-z0-9\\-\\_\\.\\~\\:\\?\\#\\@\\!\\$\\&\\'\\(\\)\\*\\,\\+\\= ]+)",
            "type": "string",
            "description": "This contains the identity key of the Charging Station.",
            "example": "ACE324452"
          },
          "locationId": {
            "type": "string",
            "description": "This contains the location id of the Charging Station."
          },
          "evses": {
            "type": "array",
            "description": "Identifies the list of the evses inside the Charging Station.",
            "items": {
              "$ref": "#/components/schemas/EvseCreateRequest"
            }
          },
          "operationalStatus": {
            "type": "string",
            "description": "This contains the operational status of the Charging Station.",
            "example": "AVAILABLE",
            "enum": [
              "AVAILABLE",
              "BLOCKED",
              "CHARGING",
              "OUTOFORDER"
            ]
          },
          "communicationType": {
            "type": "string",
            "description": "This contains the communication type of the Charging Station.",
            "example": "WiFi",
            "enum": [
              "WiFi",
              "LTE",
              "Ethernet"
            ]
          },
          "installationDate": {
            "type": "string",
            "description": "This contains the installation Date of the Charging Station.",
            "format": "date-time"
          },
          "contactPerson": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "This contains the installation contract person of the Charging Station."
          },
          "loadManagementAvailable": {
            "type": "boolean",
            "description": "This contains if the load management is available in the Charging Station.",
            "example": true
          },
          "calibrationLawCompliant": {
            "type": "boolean",
            "description": "This contains if the Charging Station is law compliant.",
            "example": true
          },
          "authenticationMethods": {
            "type": "array",
            "description": "This contains the authentication methods of the Charging Station.",
            "items": {
              "type": "string",
              "description": "This contains the authentication methods of the Charging Station.",
              "enum": [
                "RFID",
                "APP",
                "ISO15118"
              ]
            }
          },
          "capabilities": {
            "type": "array",
            "description": "List of functionalities that Charging Station is capable of",
            "items": {
              "type": "string",
              "description": "List of functionalities that Charging Station is capable of",
              "enum": [
                "CHARGING_PROFILE_CAPABLE",
                "CHARGING_PREFERENCES_CAPABLE",
                "CHIP_CARD_SUPPORT",
                "CONTACTLESS_CARD_SUPPORT",
                "CREDIT_CARD_PAYABLE",
                "DEBIT_CARD_PAYABLE",
                "PED_TERMINAL",
                "REMOTE_START_STOP_CAPABLE",
                "RESERVABLE",
                "RFID_READER",
                "TOKEN_GROUP_CAPABLE",
                "UNLOCK_CAPABLE",
                "START_SESSION_CONNECTOR_REQUIRED"
              ]
            }
          },
          "floorLevel": {
            "maxLength": 4,
            "minLength": 0,
            "type": "string",
            "description": "Level on which the Charge Point is located (in garage buildings) in the locally displayed numbering scheme.",
            "example": "2"
          },
          "coordinates": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "physicalReference": {
            "maxLength": 16,
            "minLength": 0,
            "type": "string",
            "description": "A number/string printed on the outside of the Charging Station for visual identification.",
            "example": "WB123AE2"
          },
          "directions": {
            "type": "array",
            "description": "Multi-language human-readable directions when more detailed information on how to reach the Charging Station from the Location is required.",
            "items": {
              "$ref": "#/components/schemas/DisplayText"
            }
          },
          "parkingRestrictions": {
            "type": "array",
            "description": "The restrictions that apply to the parking spot.",
            "items": {
              "type": "string",
              "description": "The restrictions that apply to the parking spot.",
              "enum": [
                "EV_ONLY",
                "PLUGGED",
                "DISABLED",
                "CUSTOMERS",
                "MOTORCYCLES"
              ]
            }
          },
          "images": {
            "type": "array",
            "description": "Links images related to the Charging Station such as photos or logos.",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          }
        }
      }
    },
    "examples": {
      "INCONSISTENT_DATA": {
        "value": "{\n  \"message\" : \"[CPO-CHARGINGSTATION] Inconsistent provided data.\",\n  \"errorCode\" : \"INCONSISTENT_DATA\"\n}"
      },
      "SETTINGS_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[CPO-CHARGINGSTATION] Settings not found.\",\n  \"errorCode\" : \"SETTINGS_NOT_FOUND\"\n}"
      },
      "UNABLE_TO_DELETE_LOCATION": {
        "value": "{\n  \"message\" : \"[CPO-CHARGINGSTATION] Cannot delete location with connected charging stations to it.\",\n  \"errorCode\" : \"UNABLE_TO_DELETE_LOCATION\"\n}"
      },
      "CHARGING_STATION_IDS_NOT_MATCH": {
        "value": "{\n  \"message\" : \"[CPO-CHARGINGSTATION] Charging Station Id and Charging Station ID of the Evse do not match\",\n  \"errorCode\" : \"CHARGING_STATION_IDS_NOT_MATCH\"\n}"
      },
      "CHARGING_STATION_ID_REACHED_MAX_VALUE": {
        "value": "{\n  \"message\" : \"[CPO-CHARGINGSTATION] Charging Station Id has reached the max value: 9999999\",\n  \"errorCode\" : \"CHARGING_STATION_ID_REACHED_MAX_VALUE\"\n}"
      },
      "CHARGING_STATION_IDENTITY_KEY_ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"[CPO-CHARGINGSTATION] A Charging Station with the same Identity Key already exists.\",\n  \"errorCode\" : \"CHARGING_STATION_IDENTITY_KEY_ALREADY_EXISTS\"\n}"
      },
      "CHARGING_STATION_ID_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[CPO-CHARGINGSTATION] Charging Station with the provided ID does not exist.\",\n  \"errorCode\" : \"CHARGING_STATION_ID_NOT_FOUND\"\n}"
      },
      "CHARGING_STATION_IDENTITY_KEY_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[CPO-CHARGINGSTATION] Charging Station with the provided Identity Key does not exist.\",\n  \"errorCode\" : \"CHARGING_STATION_IDENTITY_KEY_NOT_FOUND\"\n}"
      },
      "EVSE_ID_ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"[CPO-CHARGINGSTATION] EVSE ID must be unique.\",\n  \"errorCode\" : \"EVSE_ID_ALREADY_EXISTS\"\n}"
      },
      "CHARGING_STATION_IN_LOCATION_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[CPO-CHARGINGSTATION] Charging Stations for the requested Location were not found.\",\n  \"errorCode\" : \"CHARGING_STATION_IN_LOCATION_NOT_FOUND\"\n}"
      },
      "UNSORTABLE_COLUMN": {
        "value": "{\n  \"message\" : \"The entered sorting column is not sortable in ElasticSearch (Column is not a @Keyword).\",\n  \"errorCode\" : \"UNSORTABLE_COLUMN\"\n}"
      },
      "REST_STATUS_ELASTICSEARCH_RELATED": {
        "value": "{\n  \"message\" : \"RestStatusException related to ElasticSearch\",\n  \"errorCode\" : \"REST_STATUS_ELASTICSEARCH_RELATED\"\n}"
      },
      "PROCESSING_ERROR": {
        "value": "{\n  \"message\" : \"Error while processing the data\",\n  \"errorCode\" : \"PROCESSING_ERROR\"\n}"
      },
      "ACCESS_DENIED": {
        "value": "{\n  \"message\" : \"Access to route has been denied.\",\n  \"errorCode\" : \"ACCESS_DENIED\"\n}"
      },
      "INTERNAL_SERVER_ERROR": {
        "value": "{\n  \"message\" : \"An error occurred\",\n  \"errorCode\" : \"INTERNAL_SERVER_ERROR\"\n}"
      },
      "BAD_REQUEST": {
        "value": "{\n  \"message\" : \"Bad request\",\n  \"errorCode\" : \"BAD_REQUEST\"\n}"
      },
      "NOT_FOUND": {
        "value": "{\n  \"message\" : \"Requested object not found\",\n  \"errorCode\" : \"NOT_FOUND\"\n}"
      },
      "UNAUTHORIZED": {
        "value": "{\n  \"message\" : \"Unauthorized\",\n  \"errorCode\" : \"UNAUTHORIZED\"\n}"
      },
      "FORBIDDEN": {
        "value": "{\n  \"message\" : \"Forbidden\",\n  \"errorCode\" : \"FORBIDDEN\"\n}"
      },
      "UNAUTHENTICATED": {
        "value": "{\n  \"message\" : \"Unauthenticated\",\n  \"errorCode\" : \"UNAUTHENTICATED\"\n}"
      },
      "METHOD_ARGUMENT_TYPE_MISMATCH": {
        "value": "{\n  \"message\" : \"Failed to convert value to required type\",\n  \"errorCode\" : \"METHOD_ARGUMENT_TYPE_MISMATCH\"\n}"
      },
      "MAXIMUM_UPLOAD_SIZE_EXCEEDED": {
        "value": "{\n  \"message\" : \"Maximum upload size exceeded\",\n  \"errorCode\" : \"MAXIMUM_UPLOAD_SIZE_EXCEEDED\"\n}"
      },
      "METHOD_NOT_ALLOWED": {
        "value": "{\n  \"message\" : \"Request method is not supported\",\n  \"errorCode\" : \"METHOD_NOT_ALLOWED\"\n}"
      },
      "MISSING_REQUEST_PARAMETER": {
        "value": "{\n  \"message\" : \"Required request parameter is not present\",\n  \"errorCode\" : \"MISSING_REQUEST_PARAMETER\"\n}"
      },
      "MISSING_REQUEST_PART": {
        "value": "{\n  \"message\" : \"Required request part is not present\",\n  \"errorCode\" : \"MISSING_REQUEST_PART\"\n}"
      },
      "UNSUPPORTED_MEDIA_TYPE": {
        "value": "{\n  \"message\" : \"Media type is not supported\",\n  \"errorCode\" : \"UNSUPPORTED_MEDIA_TYPE\"\n}"
      },
      "LIST_CONTAINS_NULL_VALUES": {
        "value": "{\n  \"message\" : \"List contains null values\",\n  \"errorCode\" : \"LIST_CONTAINS_NULL_VALUES\"\n}"
      },
      "REMOTE_CALL_FAILED": {
        "value": "{\n  \"message\" : \"Call to remote API returned an error response\",\n  \"errorCode\" : \"REMOTE_CALL_FAILED\"\n}"
      },
      "ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"Object already exists\",\n  \"errorCode\" : \"ALREADY_EXISTS\"\n}"
      },
      "SOFTLY_DELETED": {
        "value": "{\n  \"message\" : \"Object is softly deleted\",\n  \"errorCode\" : \"SOFTLY_DELETED\"\n}"
      },
      "WRONG_SORTING_COLUMN": {
        "value": "{\n  \"message\" : \"The entered sorting column name does not exist.\",\n  \"errorCode\" : \"WRONG_SORTING_COLUMN\"\n}"
      },
      "COULD_NOT_EXTRACT_ERROR_FROM_RESPONSE": {
        "value": "{\n  \"message\" : \"Could not extract error from the response.\",\n  \"errorCode\" : \"COULD_NOT_EXTRACT_ERROR_FROM_RESPONSE\"\n}"
      },
      "FAILED_TO_DELETE_TEMPORARY_FILE": {
        "value": "{\n  \"message\" : \"Failed to delete temporary file\",\n  \"errorCode\" : \"FAILED_TO_DELETE_TEMPORARY_FILE\"\n}"
      },
      "TENANT_ID_MUST_BE_SINGLETON": {
        "value": "{\n  \"message\" : \"Tenant ID must be a single value parameter\",\n  \"errorCode\" : \"TENANT_ID_MUST_BE_SINGLETON\"\n}"
      },
      "TENANT_ID_MUST_BE_INTEGER": {
        "value": "{\n  \"message\" : \"Tenant ID must be integer\",\n  \"errorCode\" : \"TENANT_ID_MUST_BE_INTEGER\"\n}"
      },
      "INVALID_PROPERTY": {
        "value": "{\n  \"message\" : \"Requested property is not valid.\",\n  \"errorCode\" : \"INVALID_PROPERTY\"\n}"
      },
      "RABBITMQ_LISTENER_ERROR": {
        "value": "{\n  \"message\" : \"[RABBITMQ] An error occurred in RabbitMQ listener\",\n  \"errorCode\" : \"RABBITMQ_LISTENER_ERROR\"\n}"
      },
      "INVALID_RABBITMQ_RPC_RESPONSE": {
        "value": "{\n  \"message\" : \"[RABBITMQ] Invalid RabbitMQ RPC response\",\n  \"errorCode\" : \"INVALID_RABBITMQ_RPC_RESPONSE\"\n}"
      },
      "NOT_VALID_BEGIN_END_TIME": {
        "value": "{\n  \"message\" : \"[CPO-CHARGINGSTATION] period_end cannot be equal to period_begin, or before this.\",\n  \"errorCode\" : \"NOT_VALID_BEGIN_END_TIME\"\n}"
      },
      "NOT_VALID_OPENING_TIMES": {
        "value": "{\n  \"message\" : \"[CPO-CHARGINGSTATION] Location opening times are not valid.\",\n  \"errorCode\" : \"NOT_VALID_OPENING_TIMES\"\n}"
      },
      "LOCATION_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[CPO-CHARGINGSTATION] Location with the provided ID does not exist.\",\n  \"errorCode\" : \"LOCATION_NOT_FOUND\"\n}"
      },
      "TARIFF_ID_NOT_EXISTS": {
        "value": "{\n  \"message\" : \"[TARIFF] Tariff with the provided tariff id does not exist.\",\n  \"errorCode\" : \"TARIFF_ID_NOT_EXISTS\"\n}"
      },
      "MORE_THAN_ONE_TARIFFS_FOUND": {
        "value": "{\n  \"message\" : \"[TARIFF] More than one tariffs for the specific date range are found.\",\n  \"errorCode\" : \"MORE_THAN_ONE_TARIFFS_FOUND\"\n}"
      },
      "TARIFF_IDS_NOT_EXIST": {
        "value": "{\n  \"message\" : \"[TARIFF] Tariffs with the provided tariff ids do not exist or they are not valid for the current date.\",\n  \"errorCode\" : \"TARIFF_IDS_NOT_EXIST\"\n}"
      },
      "CANNOT_UPDATE_TARIFF": {
        "value": "{\n  \"message\" : \"[TARIFF] Tariff can not be updated because it is assigned on a connector\",\n  \"errorCode\" : \"CANNOT_UPDATE_TARIFF\"\n}"
      },
      "TARIFFS_VALIDITY_PERIODS_OVERLAP": {
        "value": "{\n  \"message\" : \"[TARIFF] Tariff validity periods overlap.\",\n  \"errorCode\" : \"TARIFFS_VALIDITY_PERIODS_OVERLAP\"\n}"
      },
      "TARIFF_ELEMENT_DATES_OVERLAP_TARIFF_DATES": {
        "value": "{\n  \"message\" : \"[TARIFF] Tariff element dates are overlapping tariff dates\",\n  \"errorCode\" : \"TARIFF_ELEMENT_DATES_OVERLAP_TARIFF_DATES\"\n}"
      },
      "TARIFF_ELEMENT_DATES_OVERLAP": {
        "value": "{\n  \"message\" : \"[TARIFF] Tariff element dates overlap\",\n  \"errorCode\" : \"TARIFF_ELEMENT_DATES_OVERLAP\"\n}"
      },
      "TARIFF_DATES_OVERLAP": {
        "value": "{\n  \"message\" : \"[TARIFF] Tariff dates overlap\",\n  \"errorCode\" : \"TARIFF_DATES_OVERLAP\"\n}"
      },
      "WRONG_TARIFF_DATE_FORMAT": {
        "value": "{\n  \"message\" : \"[TARIFF] Wrong Tariff dates format\",\n  \"errorCode\" : \"WRONG_TARIFF_DATE_FORMAT\"\n}"
      },
      "END_DATE_NOT_VALID": {
        "value": "{\n  \"message\" : \"[TARIFF] End date can not be in the past\",\n  \"errorCode\" : \"END_DATE_NOT_VALID\"\n}"
      },
      "LIST_CONTAINS_DUPLICATE_EVSE_ID": {
        "value": "{\n  \"message\" : \"[CPO-CHARGINGSTATION] Multiple evses in the provided list must not have the same id\",\n  \"errorCode\" : \"LIST_CONTAINS_DUPLICATE_EVSE_ID\"\n}"
      },
      "EVSE_ID_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[CPO-CHARGINGSTATION] EVSE with the provided EVSE_ID does not exist.\",\n  \"errorCode\" : \"EVSE_ID_NOT_FOUND\"\n}"
      },
      "CONNECTOR_ID_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[CPO-CHARGINGSTATION] EVSE with the provided Connector_ID does not exist.\",\n  \"errorCode\" : \"CONNECTOR_ID_NOT_FOUND\"\n}"
      },
      "TARIFF_ID_ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"[CPO-CHARGINGSTATION] Tariff id already exists inside the connector\",\n  \"errorCode\" : \"TARIFF_ID_ALREADY_EXISTS\"\n}"
      },
      "TARIFF_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[CPO-CHARGINGSTATION] Tariff id not exists inside the connector\",\n  \"errorCode\" : \"TARIFF_NOT_FOUND\"\n}"
      },
      "USER_NOT_FOUND": {
        "value": "{\n  \"message\" : \"The entered user does not exist.\",\n  \"errorCode\" : \"USER_NOT_FOUND\"\n}"
      },
      "USER_ALREADY_HAS_ACCESS": {
        "value": "{\n  \"message\" : \"The user already has access\",\n  \"errorCode\" : \"USER_ALREADY_HAS_ACCESS\"\n}"
      },
      "USER_ACCESS_REQUEST_NOT_FOUND": {
        "value": "{\n  \"message\" : \"The entered user access request does not exist.\",\n  \"errorCode\" : \"USER_ACCESS_REQUEST_NOT_FOUND\"\n}"
      },
      "FILE_IS_NOT_IMAGE": {
        "value": "{\n  \"message\" : \"The file isn't image.\",\n  \"errorCode\" : \"FILE_IS_NOT_IMAGE\"\n}"
      },
      "FORMAT_NOT_SUPPORTED": {
        "value": "{\n  \"message\" : \"The logo format not supported\",\n  \"errorCode\" : \"FORMAT_NOT_SUPPORTED\"\n}"
      },
      "EXTENSION_MISSING": {
        "value": "{\n  \"message\" : \"The logo extension missing\",\n  \"errorCode\" : \"EXTENSION_MISSING\"\n}"
      }
    },
    "headers": {
      "api-category": {
        "description": "CPO Services",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "display-name": {
        "description": "CPO Charging Station",
        "required": false,
        "schema": {
          "type": "string"
        }
      }
    }
  }
}