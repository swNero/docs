{
  "openapi": "3.0.1",
  "info": {
    "title": "gateway-ocpi-service",
    "description": "A service to integrate customers according to OCPI e.g. charging stations, sessions, etc.",
    "contact": {
      "name": "P3 digital services GmbH",
      "email": "contact@energystacks.io"
    },
    "version": "v1"
  },
  "servers": [
    {
      "url": "https://p3-acc.energystacks.io/gateway-ocpi/v1",
      "description": "Generated server url"
    }
  ],
  "tags": [
    {
      "name": "CDR Module",
      "description": "Serves to retrieve details of charging transactions (finished charging session). The CDR object is owned by the CPO backend system and can be pulled or pushed from CPO to eMSP."
    },
    {
      "name": "Credentials Module",
      "description": "The credentials module is used to exchange the credentials token that has to be used by parties for authorization of requests."
    },
    {
      "name": "Tariffs Module",
      "description": "The tariffs module gives eMSPs information about the tariffs used by the CPO. The Tariffs objects live in the CPO backend system."
    },
    {
      "name": "Platform",
      "description": "CRUD functionality for the platform entity."
    },
    {
      "name": "Locations Module",
      "description": "Serves to retrieve charging stations. The location objects live in the CPO backend system. They describe the charging locations of an operator."
    },
    {
      "name": "Versions Module",
      "description": "Via this module, clients can learn which versions of OCPI a server supports, and which modules it supports for each of the versions."
    },
    {
      "name": "Customer Url Info.",
      "description": "CRUD functionality for the customer url info."
    },
    {
      "name": "Sessions Module",
      "description": "The session object describes one charging session. The session object is owned by the CPO backend system."
    },
    {
      "name": "Tokens Module",
      "description": "The tokens module gives CPOs knowledge of the token information of an eMSP. The token objects live in the eMSP backend system."
    },
    {
      "name": "Commands Module",
      "description": "The Commands module enables remote commands to be sent to a Location/EVSE.\nThe following commands are supported:\nCANCEL_RESERVATION, RESERVE_NOW, START_SESSION, STOP_SESSION"
    }
  ],
  "paths": {
    "/tokens/{country_code}/{party_id}/{token_uid}": {
      "put": {
        "tags": [
          "Tokens Module"
        ],
        "summary": "Push new/updated Token object to the CPO.",
        "description": "New or updated Token objects are pushed from the eMSP to the CPO.",
        "operationId": "createOrUpdateToken",
        "parameters": [
          {
            "name": "country_code",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 2,
              "minLength": 2,
              "type": "string"
            }
          },
          {
            "name": "party_id",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 3,
              "minLength": 3,
              "type": "string"
            }
          },
          {
            "name": "token_uid",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Token"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized, if the provided authorization token is not valid"
          },
          "404": {
            "description": "Server no matching endpoints with status error code: 3003"
          },
          "500": {
            "description": "Generic server error with status error code: 3000"
          }
        }
      }
    },
    "/sessions/{country_code}/{party_id}/{session_id}": {
      "put": {
        "tags": [
          "Sessions Module"
        ],
        "summary": "Create or Update a session.",
        "description": "Create a Session if not exist, or update if exists. That session object is pushed from CPO to the eMSP.",
        "operationId": "createOrUpdateSession",
        "parameters": [
          {
            "name": "country_code",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 2,
              "minLength": 2,
              "type": "string"
            }
          },
          {
            "name": "party_id",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 3,
              "minLength": 3,
              "type": "string"
            }
          },
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized, if the provided authorization token is not valid"
          },
          "404": {
            "description": "OCPI Token does not exists with status error code: 2911"
          }
        }
      }
    },
    "/management/customer-url-info": {
      "get": {
        "tags": [
          "Customer Url Info."
        ],
        "summary": "Retrieve all customer url info.",
        "description": "Retrieve all customer url info.",
        "operationId": "getAllCustomerUrlInfo",
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerUrlInfo"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Customer Url Info."
        ],
        "summary": "Update an existing customer url info.",
        "description": "Update an existing customer url info.",
        "operationId": "updateCustomerUrlInfo",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "description": "Url value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerUrlInfoUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerUrlInfo"
                }
              }
            }
          },
          "404": {
            "description": "Customer url info not found"
          },
          "400 ": {
            "description": "Bad Request"
          }
        }
      },
      "post": {
        "tags": [
          "Customer Url Info."
        ],
        "summary": "Create a customer url info.",
        "description": "Create a new customer url info.",
        "operationId": "createCustomerUrlInfo",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerUrlInfo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400 ": {
            "description": "Bad Request"
          },
          "409 ": {
            "description": "Conflict, the URL already exists"
          }
        }
      },
      "delete": {
        "tags": [
          "Customer Url Info."
        ],
        "summary": "Delete an existing customer url info.",
        "description": "Delete an existing customer url info.",
        "operationId": "deleteCustomerUrlInfo",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "description": "Url value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Customer url info not found"
          },
          "400 ": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/management/2.2.1/platform": {
      "get": {
        "tags": [
          "Platform"
        ],
        "summary": "Retrieve a specific platforms",
        "description": "Retrieve a specific platforms.",
        "operationId": "getSpecificPlatform",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "description": "Url value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Platform"
                }
              }
            }
          },
          "404": {
            "description": "Platform not found"
          },
          "400 ": {
            "description": "Bad Request"
          }
        }
      },
      "put": {
        "tags": [
          "Platform"
        ],
        "summary": "Update an existing platform",
        "description": "Update an existing platform.",
        "operationId": "updatePlatform",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "description": "Url value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatformUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Platform"
                }
              }
            }
          },
          "404": {
            "description": "Platform not found"
          },
          "400 ": {
            "description": "Bad Request"
          }
        }
      },
      "post": {
        "tags": [
          "Platform"
        ],
        "summary": "Create a platform",
        "description": "Create a new platform.",
        "operationId": "createPlatform",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Platform"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400 ": {
            "description": "Bad Request"
          },
          "409 ": {
            "description": "Conflict, the URL already exists"
          }
        }
      },
      "delete": {
        "tags": [
          "Platform"
        ],
        "summary": "Delete an existing platform",
        "description": "Delete an existing platform.",
        "operationId": "deletePlatform",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "description": "Url value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Platform not found"
          },
          "400 ": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/management/2.1.1/platform": {
      "get": {
        "tags": [
          "Platform"
        ],
        "summary": "Retrieve a specific platforms",
        "description": "Retrieve a specific platforms.",
        "operationId": "getSpecificPlatform_1",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "description": "Url value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformVersion211"
                }
              }
            }
          },
          "404": {
            "description": "Platform not found"
          },
          "400 ": {
            "description": "Bad Request"
          }
        }
      },
      "put": {
        "tags": [
          "Platform"
        ],
        "summary": "Update an existing platform",
        "description": "Update an existing platform.",
        "operationId": "updatePlatform_1",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "description": "Url value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatformVersion211UpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformVersion211"
                }
              }
            }
          },
          "404": {
            "description": "Platform not found"
          },
          "400 ": {
            "description": "Bad Request"
          }
        }
      },
      "post": {
        "tags": [
          "Platform"
        ],
        "summary": "Create a platform",
        "description": "Create a new platform.",
        "operationId": "createPlatform_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatformVersion211"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400 ": {
            "description": "Bad Request"
          },
          "409 ": {
            "description": "Conflict, the URL already exists"
          }
        }
      },
      "delete": {
        "tags": [
          "Platform"
        ],
        "summary": "Delete an existing platform",
        "description": "Delete an existing platform.",
        "operationId": "deletePlatform_1",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "description": "Url value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Platform not found"
          },
          "400 ": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/locations/{country_code}/{party_id}/{location_id}": {
      "put": {
        "tags": [
          "Locations Module"
        ],
        "summary": "The CPO forwards a Location object update request to the eMSP.",
        "description": "Creates or updates a Location in eMSP.",
        "operationId": "putLocation",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country_code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "party_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationResponseVersion221"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized, token does not exists: 2909"
          },
          "404": {
            "description": "Server no matching endpoints: 3003"
          }
        }
      },
      "patch": {
        "tags": [
          "Locations Module"
        ],
        "summary": "Notify the eMSP of partial updates of a Location (such as the status).",
        "description": "Partial updates of the Location object.",
        "operationId": "patchLocation",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country_code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "party_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationResponseVersion221"
                }
              }
            }
          },
          "400": {
            "description": "Client invalid parameters: 2001"
          }
        }
      }
    },
    "/locations/{country_code}/{party_id}/{location_id}/{evse_uid}": {
      "put": {
        "tags": [
          "Locations Module"
        ],
        "summary": "The CPO forwards a EVSE object update request to the eMSP.",
        "description": "Creates or updates a EVSE in eMSP.",
        "operationId": "putEvse",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country_code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "party_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "evse_uid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationResponseVersion221"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized, token does not exists: 2909"
          },
          "404": {
            "description": "Server no matching endpoints: 3003"
          }
        }
      },
      "patch": {
        "tags": [
          "Locations Module"
        ],
        "summary": "Notify the eMSP of partial updates of a EVSE (such as the status).",
        "description": "Partial updates of the EVSE object.",
        "operationId": "patchEvse",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country_code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "party_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "evse_uid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvseResponseVersion221"
                }
              }
            }
          },
          "400": {
            "description": "Client invalid parameters: 2001"
          }
        }
      }
    },
    "/locations/{country_code}/{party_id}/{location_id}/{evse_uid}/{connector_id}": {
      "put": {
        "tags": [
          "Locations Module"
        ],
        "summary": "The CPO forwards a Connector object update request to the eMSP.",
        "description": "Creates or updates a Connector in eMSP.",
        "operationId": "putConnector",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country_code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "party_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "evse_uid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connector_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationResponseVersion221"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized, token does not exists: 2909"
          },
          "404": {
            "description": "Server no matching endpoints: 3003"
          }
        }
      },
      "patch": {
        "tags": [
          "Locations Module"
        ],
        "summary": "Notify the eMSP of partial updates of a Connector (such as the status).",
        "description": "Partial updates of the Connector object.",
        "operationId": "patchConnector",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country_code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "party_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "evse_uid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connector_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorResponseVersion221"
                }
              }
            }
          },
          "400": {
            "description": "Client invalid parameters: 2001"
          }
        }
      }
    },
    "/2.2.1/credentials": {
      "put": {
        "tags": [
          "Credentials Module"
        ],
        "summary": "Updates Credentials and returns a new valid Token C for the specific OCPI version.",
        "description": "Updates and stores Token C for the available OCPI version with the sender.",
        "operationId": "putCredentials",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Credentials"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialsResponseVersion221"
                }
              }
            }
          },
          "400": {
            "description": "Client not enough information with status error code: 2002"
          },
          "401": {
            "description": "Unauthorized, if the provided authorization token is not valid"
          },
          "404": {
            "description": "Server no matching endpoints with status error code: 3003"
          },
          "405": {
            "description": "Client has not been registered with status error code: 2904"
          },
          "400 ": {
            "description": "Server unsupported version with status error code: 3002"
          },
          "400  ": {
            "description": "Bad Request while trying to save the platform entity"
          }
        }
      },
      "post": {
        "tags": [
          "Credentials Module"
        ],
        "summary": "Returns the valid Token C for the specific OCPI version.",
        "description": "Creates and stores Token C for the available OCPI version with the sender.",
        "operationId": "postCredentials",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Credentials"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialsResponseVersion221"
                }
              }
            }
          },
          "400": {
            "description": "Client not enough information with status error code: 2002"
          },
          "401": {
            "description": "Unauthorized, if the provided authorization token is not valid"
          },
          "404": {
            "description": "Server no matching endpoints with status error code: 3003"
          },
          "405": {
            "description": "Client has already been registered with status error code: 2901 "
          },
          "400 ": {
            "description": "Server unsupported version with status error code: 3002"
          },
          "400  ": {
            "description": "Bad Request while trying to save the platform entity"
          }
        }
      }
    },
    "/2.1.1/credentials": {
      "put": {
        "tags": [
          "Credentials Module"
        ],
        "summary": "Updates Credentials and returns a new valid Token C for the specific OCPI version.",
        "description": "Updates and stores Token C for the available OCPI version with the sender.",
        "operationId": "putCredentials_1",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Credentials"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialsResponseVersion221"
                }
              }
            }
          },
          "400": {
            "description": "Client not enough information with status error code: 2002"
          },
          "401": {
            "description": "Unauthorized, if the provided authorization token is not valid"
          },
          "404": {
            "description": "Server no matching endpoints with status error code: 3003"
          },
          "405": {
            "description": "Client has not been registered with status error code: 2904"
          },
          "400 ": {
            "description": "Server unsupported version with status error code: 3002"
          },
          "400  ": {
            "description": "Bad Request while trying to save the platform entity"
          }
        }
      },
      "post": {
        "tags": [
          "Credentials Module"
        ],
        "summary": "Returns the valid Token C for the specific OCPI version.",
        "description": "Creates and stores Token C for the available OCPI version with the sender.",
        "operationId": "postCredentials_1",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Credentials"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialsResponseVersion211"
                }
              }
            }
          },
          "400": {
            "description": "Client not enough information with status error code: 2002"
          },
          "401": {
            "description": "Unauthorized, if the provided authorization token is not valid"
          },
          "404": {
            "description": "Server no matching endpoints with status error code: 3003"
          },
          "405": {
            "description": "Client has already been registered with status error code: 2901 "
          },
          "400 ": {
            "description": "Server unsupported version with status error code: 3002"
          },
          "400  ": {
            "description": "Bad Request while trying to save the platform entity"
          }
        }
      }
    },
    "/tokens/{token_uid}/authorize": {
      "post": {
        "tags": [
          "Tokens Module"
        ],
        "summary": "Perform real-time authorization.",
        "description": "Do a 'real-time' authorization request, validating if a Token might be used (at the optionally given Location).",
        "operationId": "postToken",
        "parameters": [
          {
            "name": "token_uid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "    The type of token\n    * <p>\n    * NOTE: The eMSP is RECOMMENDED to push Tokens with type: AD_HOC_USER or APP_USER with whitelist set to\n    * NEVER. Whitelists are very useful for RFID type Tokens, but the AD_HOC_USER/APP_USER Tokens are used to\n    * start Sessions from an App etc. so whitelisting them has no advantages.\n    * </p>\n",
              "enum": [
                "AD_HOC_USER",
                "APP_USER",
                "OTHER",
                "RFID"
              ]
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationReferences"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationInfoResponseVersion221"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized, if the provided country code and party id are not known"
          },
          "404": {
            "description": "Not Found if token endpoint is not provided"
          },
          "404 ": {
            "description": "Client Unknown location token with status code 2004"
          }
        }
      }
    },
    "/management/customer-url-info/all": {
      "post": {
        "tags": [
          "Customer Url Info."
        ],
        "summary": "Create list of customer url info.",
        "description": "Create list of customer url info like end-point url, module identifier and interface role.",
        "operationId": "createListOfCustomerUrlInfo",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationCustomerInfoRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400 ": {
            "description": "Bad Request"
          },
          "409 ": {
            "description": "Conflict, one of the URL(s) already exists"
          }
        }
      },
      "delete": {
        "tags": [
          "Customer Url Info."
        ],
        "summary": "Delete all from customer url info entity.",
        "description": "Delete all from customer url info entity like end-point url, module identifier and interface role.",
        "operationId": "deleteAllCustomerUrlInfo",
        "responses": {
          "204": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/commands/{command_type}/{uid}": {
      "post": {
        "tags": [
          "Commands Module"
        ],
        "summary": "Command result interface.",
        "description": "Receives the command result from CPO and transmits it to the eMSP system.",
        "operationId": "commandResult",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "command_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "CANCEL_RESERVATION",
                "RESERVE_NOW",
                "START_SESSION",
                "STOP_SESSION",
                "UNLOCK_CONNECTOR"
              ]
            }
          },
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommandResult"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized, if the provided authorization token is not valid"
          },
          "404": {
            "description": "The requested command type does not exist.: 2905"
          },
          "500": {
            "description": "Generic server error with status error code: 3000"
          }
        }
      }
    },
    "/commands/STOP_SESSION": {
      "post": {
        "tags": [
          "Commands Module"
        ],
        "summary": "Session Command Stop.",
        "description": "STOP_SESSION command is needed in order to stop a sessions.",
        "operationId": "stopSessionCommand",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommandResponseVersion221"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized, if the provided authorization token is not valid"
          },
          "404": {
            "description": "Server no matching endpoints with status error code: 3003"
          },
          "500": {
            "description": "Generic server error with status error code: 3000"
          }
        }
      }
    },
    "/commands/START_SESSION": {
      "post": {
        "tags": [
          "Commands Module"
        ],
        "summary": "Start Session Command.",
        "description": "START_SESSION command is needed in order to start a sessions.",
        "operationId": "startSessionCommand",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommandResponseVersion221"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized, if the provided authorization token is not valid"
          },
          "404": {
            "description": "Server no matching endpoints with status error code: 3003"
          },
          "500": {
            "description": "Generic server error with status error code: 3000"
          }
        }
      }
    },
    "/commands/RESERVE_NOW": {
      "post": {
        "tags": [
          "Commands Module"
        ],
        "summary": "Reserve Now Command.",
        "description": "RESERVE_NOW command reserves a location/connector of a Charge Point for a given Token.",
        "operationId": "reserveNowCommand",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommandResponseVersion221"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized, if the provided authorization token is not valid"
          },
          "404": {
            "description": "Server no matching endpoints with status error code: 3003"
          },
          "500": {
            "description": "Generic server error with status error code: 3000"
          }
        }
      }
    },
    "/commands/CANCEL_RESERVATION": {
      "post": {
        "tags": [
          "Commands Module"
        ],
        "summary": "Cancel Reservation.",
        "description": "CANCEL_RESERVATION command cancels an existing reservation.",
        "operationId": "cancelReservationCommand",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommandResponseVersion221"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized, if the provided authorization token is not valid"
          },
          "404": {
            "description": "Server no matching endpoints with status error code: 3003"
          },
          "500": {
            "description": "Generic server error with status error code: 3000"
          }
        }
      }
    },
    "/cdrs": {
      "get": {
        "tags": [
          "CDR Module"
        ],
        "summary": "Get CDRs.",
        "description": "Fetch CDRs from the CPO’s system.",
        "operationId": "getCdrs",
        "parameters": [
          {
            "name": "date_from",
            "in": "query",
            "description": "Only transactions which are linked to sessions started since this timestamp will be returned.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2020-06-30T23:59:59"
          },
          {
            "name": "date_to",
            "in": "query",
            "description": "Only transactions which are linked to sessions started before this timestamp will be returned.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2023-06-30T23:59:59"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CdrResponseVersion221"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized, if the provided authorization token is not valid"
          },
          "404": {
            "description": "Provided OCPI Token are not the same(count) with the existing ones, error code: 2912"
          },
          "500": {
            "description": "Generic server error with status error code: 3000"
          }
        }
      },
      "post": {
        "tags": [
          "CDR Module"
        ],
        "summary": "Create a CDR.",
        "description": "The new created CDR is pushed from CPO to the eMSP.",
        "operationId": "createCdr",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized, if the provided authorization token is not valid"
          },
          "404": {
            "description": "OCPI Token does not exists with status error code: 2911"
          },
          "409": {
            "description": "Conflict, CDR already exist with this cdr_id."
          },
          "500": {
            "description": "Generic server error with status error code: 3000"
          }
        }
      }
    },
    "/versions": {
      "get": {
        "tags": [
          "Versions Module"
        ],
        "summary": "Get all supported OCPI versions.",
        "description": "Returns a list of all supported OCPI versions and the corresponding URLs\nto where version specific details such as the supported endpoints can be found.",
        "operationId": "getVersions",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/versions/{version}/details": {
      "get": {
        "tags": [
          "Versions Module"
        ],
        "summary": "Get all endpoints for a specific OCPI version.",
        "description": "This endpoint lists the supported endpoints and their URLs for a specific OCPI version.",
        "operationId": "getVersionDetails",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionDetailsResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested object not found"
          }
        }
      }
    },
    "/tokens": {
      "get": {
        "tags": [
          "Tokens Module"
        ],
        "summary": "Get Tokens paginated.",
        "description": "Fetch information about Tokens known in the eMSP system.",
        "operationId": "getTokensPaginated",
        "parameters": [
          {
            "name": "date_from",
            "in": "query",
            "description": "Only return Tokens that have last_updated after or equal to this Date/Time (inclusive)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2020-06-29T23:59:59"
          },
          {
            "name": "date_to",
            "in": "query",
            "description": "Only return Tokens that have last_updated up to this Date/Time, but not including (exclusive).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2023-06-30T23:59:59"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset of the first object returned. Default is 0.",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of objects to GET",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponseVersion221"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized, if the provided authorization token is not valid"
          },
          "404": {
            "description": "Server no matching endpoints with status error code: 3003"
          },
          "500": {
            "description": "Generic server error with status error code: 3000"
          }
        }
      }
    },
    "/tariffs": {
      "get": {
        "tags": [
          "Tariffs Module"
        ],
        "summary": "Get Tariffs paginated.",
        "description": "Returns all tariffs with filters and pagination.",
        "operationId": "getTariffsPaginated",
        "parameters": [
          {
            "name": "date_from",
            "in": "query",
            "description": "Only return Tariffs that have last_updated after or equal to this Date/Time (inclusive).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2020-06-29T23:59:59"
          },
          {
            "name": "date_to",
            "in": "query",
            "description": "Only return Tariffs that have last_updated up to this Date/Time, but not including (exclusive).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2023-06-30T23:59:59"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset of the first object returned. Default is 0.",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of objects to GET. Default is 100",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TariffResponseVersion221"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized, if the provided authorization token is not valid"
          },
          "404": {
            "description": "Server no matching endpoints with status error code: 3003"
          },
          "500": {
            "description": "Generic server error with status error code: 3000"
          }
        }
      }
    },
    "/management/2.2.1/platform/all": {
      "get": {
        "tags": [
          "Platform"
        ],
        "summary": "Retrieve all platforms in version 2.2.1",
        "description": "Retrieve all platforms.",
        "operationId": "getAllPlatforms",
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Platform"
                }
              }
            }
          }
        }
      }
    },
    "/management/2.1.1/platform/all": {
      "get": {
        "tags": [
          "Platform"
        ],
        "summary": "Retrieve all platforms in version 2.1.1",
        "description": "Retrieve all platforms.",
        "operationId": "getAllPlatforms_1",
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformVersion211"
                }
              }
            }
          }
        }
      }
    },
    "/locations": {
      "get": {
        "tags": [
          "Locations Module"
        ],
        "summary": "Get Locations paginated.",
        "description": "Returns a list of charging locations (with EVSEs and Connectors) at a CPO.",
        "operationId": "getLocationsPaginated",
        "parameters": [
          {
            "name": "date_from",
            "in": "query",
            "description": "Only return Locations that have last_updated after or equal to this Date/Time (inclusive)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2020-06-29T23:59:59"
          },
          {
            "name": "date_to",
            "in": "query",
            "description": "Only return Locations that have last_updated up to this Date/Time, but not including (exclusive).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2023-06-30T23:59:59"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset of the first object returned. Default is 0.",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of objects to GET",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationResponseVersion221"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized, if the provided authorization token is not valid"
          },
          "404": {
            "description": "Server no matching endpoints with status error code: 3003"
          },
          "500": {
            "description": "Generic server error with status error code: 3000"
          }
        }
      }
    },
    "/locations/{location_id}": {
      "get": {
        "tags": [
          "Locations Module"
        ],
        "summary": "Get Location.",
        "description": "Returns one Location object.",
        "operationId": "getLocation",
        "parameters": [
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationResponseVersion221"
                }
              }
            }
          },
          "400": {
            "description": "Client invalid parameters: 2001"
          },
          "404": {
            "description": "Charging Stations for the requested Location were not found."
          }
        }
      }
    },
    "/locations/{location_id}/{evse_uid}": {
      "get": {
        "tags": [
          "Locations Module"
        ],
        "summary": "Get EVSE.",
        "description": "Returns one EVSE object.",
        "operationId": "getEvse",
        "parameters": [
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "evse_uid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvseResponseVersion221"
                }
              }
            }
          },
          "400": {
            "description": "Client invalid parameters: 2001"
          },
          "404": {
            "description": "EVSE with the provided EVSE_ID does not exist."
          }
        }
      }
    },
    "/locations/{location_id}/{evse_uid}/{connector_id}": {
      "get": {
        "tags": [
          "Locations Module"
        ],
        "summary": "Get Connector.",
        "description": "Returns one Connector object.",
        "operationId": "getConnector",
        "parameters": [
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "evse_uid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connector_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorResponseVersion221"
                }
              }
            }
          },
          "400": {
            "description": "Client invalid parameters: 2001"
          },
          "404": {
            "description": "EVSE with the provided Connector_ID does not exist."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "OcpiResponse": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "The timestamp this message was generated",
            "format": "date-time",
            "example": "2024-03-19T14:11:43Z"
          },
          "data": {
            "type": "object",
            "description": "Contains the actual response data object or list of objects from each request"
          },
          "status_code": {
            "type": "integer",
            "description": "The OCPI status code",
            "format": "int32",
            "example": 1000
          },
          "status_message": {
            "type": "string",
            "description": "An optional status message which may help when debugging",
            "example": "Success"
          }
        }
      },
      "EnergyContract": {
        "required": [
          "contract_id",
          "supplier_name"
        ],
        "type": "object",
        "properties": {
          "supplier_name": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Name of the energy supplier for this token."
          },
          "contract_id": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Contract ID at the energy supplier, that belongs to the owner of this token."
          }
        },
        "description": "When the Charge Point supports using your own energy supplier/contract at a\nCharge Point, information about the energy supplier/contract is needed so the\nCPO knows which energy supplier to use.\nNOTE: In a lot of countries it is currently not allowed/possible to use a drivers\nown energy supplier/contract at a Charge Point."
      },
      "Token": {
        "required": [
          "contract_id",
          "country_code",
          "issuer",
          "last_updated",
          "party_id",
          "type",
          "uid",
          "valid",
          "whitelist"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "    The type of token\n    * <p>\n    * NOTE: The eMSP is RECOMMENDED to push Tokens with type: AD_HOC_USER or APP_USER with whitelist set to\n    * NEVER. Whitelists are very useful for RFID type Tokens, but the AD_HOC_USER/APP_USER Tokens are used to\n    * start Sessions from an App etc. so whitelisting them has no advantages.\n    * </p>\n",
            "example": "RFID",
            "enum": [
              "AD_HOC_USER",
              "APP_USER",
              "OTHER",
              "RFID"
            ]
          },
          "issuer": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Issuing company, most of the times the name of the company printed on the token (RFID card), not necessarily the eMSP.",
            "example": "ACME Inc."
          },
          "whitelist": {
            "type": "string",
            "description": "Indicates what type of white-listing is allowed.",
            "example": "ALLOWED",
            "enum": [
              "ALWAYS",
              "ALLOWED",
              "ALLOWED_OFFLINE",
              "NEVER"
            ]
          },
          "language": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "Language Code ISO 639-1. This optional field indicates the Token owner’s  preferred interface language.\nIf the language is not provided or not supported then the CPO is free to choose its own language.",
            "example": "DE"
          },
          "uid": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Unique ID by which this Token can be identified.\nThis is the field used by CPO system (RFID reader on the Charge Point) to identify this token.\nCurrently, in most cases: type=RFID, this is the RFID hidden ID as read by the RFID reader, but that is not a requirement.\nIf this is a APP_USER or AD_HOC_USER Token, it will be a uniquely, by the eMSP, generated ID.\nThis field is named uid instead of id to prevent confusion with: contract_id.",
            "example": "123456789"
          },
          "country_code": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "ISO-3166 alpha-2 country code of the MSP that 'owns' this Token.",
            "example": "DE"
          },
          "party_id": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "CPO ID of the MSP that 'owns' this Token (following the ISO-15118 standard).",
            "example": "ERG"
          },
          "contract_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the EV Driver contract token within the eMSP’s platform (and suboperator platforms). Recommended to follow the specification for eMA ID from \"eMI3 standard version V1.0\" (http://emi3group.com/documents-links/)  \"Part 2: business objects.\"\n",
            "example": "DE8ACC12E46L89"
          },
          "visual_number": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Visual readable number/identification as printed on the Token (RFID card), might be equal to the contract_id.",
            "example": "DF000-2001-8999-1"
          },
          "group_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "This ID groups a couple of tokens. This can be used to make two or more tokens work as one, so that a session can be started with one token and stopped with another, handy when a card and key-fob are given to the EV-driver.\n Beware that OCPP 1.5/1.6 only support group_ids (it is called parentId in OCPP 1.5/1.6) with a maximum length of 20.",
            "example": "DF000-2001-8999"
          },
          "valid": {
            "type": "boolean",
            "description": "Is this Token valid"
          },
          "default_profile_type": {
            "type": "string",
            "description": "The default Charging Preference. When this is provided, and a charging session\nis started on an Charge Point that support Preference base Smart Charging and\nsupport this ProfileType, the Charge Point can start using this ProfileType,\nwithout this having to be set via: Set Charging Preferences.",
            "enum": [
              "CHEAP",
              "FAST",
              "GREEN",
              "REGULAR"
            ]
          },
          "energy_contract": {
            "$ref": "#/components/schemas/EnergyContract"
          },
          "last_updated": {
            "type": "string",
            "description": "Timestamp when this Token was last updated (or created).",
            "format": "date-time"
          },
          "expiry_date": {
            "type": "string",
            "description": "Timestamp when this Token expires in charging station's local authorization cache.",
            "format": "date-time"
          }
        },
        "description": "Contains the actual response data object or list of objects from each request"
      },
      "CustomerUrlInfo": {
        "required": [
          "interfaceRole",
          "moduleIdentifier",
          "url"
        ],
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL to the customer endpoint",
            "example": "https://www.server.com/"
          },
          "interfaceRole": {
            "type": "string",
            "description": "The interface role this endpoint implements",
            "example": "SENDER",
            "enum": [
              "SENDER",
              "RECEIVER"
            ]
          },
          "moduleIdentifier": {
            "type": "string",
            "description": "The module identifier",
            "example": "credentials",
            "enum": [
              "cdrs",
              "chargingprofiles",
              "commands",
              "credentials",
              "locations",
              "sessions",
              "tariffs",
              "tokens",
              "hubclientinfo"
            ]
          }
        }
      },
      "CustomerUrlInfoUpdateRequest": {
        "required": [
          "interfaceRole",
          "moduleIdentifier"
        ],
        "type": "object",
        "properties": {
          "interfaceRole": {
            "type": "string",
            "description": "The interface role this url implements",
            "example": "SENDER",
            "enum": [
              "SENDER",
              "RECEIVER"
            ]
          },
          "moduleIdentifier": {
            "type": "string",
            "description": "The module identifier",
            "example": "commands",
            "enum": [
              "cdrs",
              "chargingprofiles",
              "commands",
              "credentials",
              "locations",
              "sessions",
              "tariffs",
              "tokens",
              "hubclientinfo"
            ]
          }
        }
      },
      "BusinessDetails": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Name of the operator."
          },
          "website": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Link to the operator’s website. An URL a string(255) type following the w3.org spec."
          },
          "logo": {
            "$ref": "#/components/schemas/Image"
          }
        },
        "description": "Information of the owner if available."
      },
      "CredentialsRole": {
        "required": [
          "business_details",
          "country_code",
          "party_id",
          "role"
        ],
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "Type of role",
            "example": "CPO",
            "enum": [
              "CPO",
              "EMSP",
              "HUB",
              "NAP",
              "NSP",
              "OTHER",
              "SCSP"
            ]
          },
          "business_details": {
            "$ref": "#/components/schemas/BusinessDetails"
          },
          "party_id": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "CPO, eMSP (or other role) ID of this party (following the ISO-15118 standard)",
            "example": "ERG"
          },
          "country_code": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "ISO-3166 alpha-2 country code of the country this party is operating in.",
            "example": "DE"
          }
        },
        "description": "Credentials roles"
      },
      "Endpoint": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "The endpoint identifier",
            "example": "credentials",
            "enum": [
              "cdrs",
              "chargingprofiles",
              "commands",
              "credentials",
              "locations",
              "sessions",
              "tariffs",
              "tokens",
              "hubclientinfo"
            ]
          },
          "role": {
            "type": "string",
            "description": "The interface role this endpoint implements",
            "example": "SENDER",
            "enum": [
              "SENDER",
              "RECEIVER"
            ]
          },
          "url": {
            "type": "string",
            "description": "The URL to the endpoint",
            "example": "https://example.com/ocpi/2.2/credentials/"
          }
        },
        "description": "customer endpoints"
      },
      "Image": {
        "required": [
          "category",
          "type",
          "url"
        ],
        "type": "object",
        "properties": {
          "url": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "URL from where the image data can be fetched through a web browser."
          },
          "thumbnail": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "URL from where a thumbnail of the image can be fetched through a web browser."
          },
          "category": {
            "type": "string",
            "description": "Describes what the image is used for.",
            "example": "CHARGER",
            "enum": [
              "CHARGER",
              "ENTRANCE",
              "LOCATION",
              "NETWORK",
              "OPERATOR",
              "OTHER",
              "OWNER"
            ]
          },
          "type": {
            "maxLength": 4,
            "minLength": 0,
            "type": "string",
            "description": "Image type, for example: gif, jpeg, png, svg",
            "example": "jpeg"
          },
          "width": {
            "type": "integer",
            "description": "Width of the full scale image.",
            "format": "int32",
            "example": 50
          },
          "height": {
            "type": "integer",
            "description": "Height of the full scale image.",
            "format": "int32",
            "example": 600
          }
        },
        "description": "Links to images related to the EVSE such as photos or logos."
      },
      "Platform": {
        "required": [
          "exchangeIdentifier",
          "url",
          "version"
        ],
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL",
            "example": "https://www.server.com/"
          },
          "version": {
            "type": "string",
            "description": "Ocpi version number",
            "example": "2.2.1",
            "enum": [
              "2.0",
              "2.1",
              "2.1.1",
              "2.2",
              "2.2.1"
            ]
          },
          "endpoints": {
            "type": "array",
            "description": "customer endpoints",
            "items": {
              "$ref": "#/components/schemas/Endpoint"
            }
          },
          "credentialsRoles": {
            "type": "array",
            "description": "Credentials roles",
            "items": {
              "$ref": "#/components/schemas/CredentialsRole"
            }
          },
          "exchangeIdentifier": {
            "type": "string",
            "description": "Type of exchange identifier.",
            "enum": [
              "SENDER",
              "RECEIVER"
            ]
          }
        }
      },
      "PlatformUpdateRequest": {
        "required": [
          "exchangeIdentifier",
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "description": "Ocpi version number",
            "example": "2.2.1",
            "enum": [
              "2.0",
              "2.1",
              "2.1.1",
              "2.2",
              "2.2.1"
            ]
          },
          "endpoints": {
            "type": "array",
            "description": "customer endpoints",
            "items": {
              "$ref": "#/components/schemas/Endpoint"
            }
          },
          "credentialsRoles": {
            "type": "array",
            "description": "Credentials roles",
            "items": {
              "$ref": "#/components/schemas/CredentialsRole"
            }
          },
          "exchangeIdentifier": {
            "type": "string",
            "description": "Type of exchange identifier.",
            "enum": [
              "SENDER",
              "RECEIVER"
            ]
          }
        }
      },
      "Credentials": {
        "required": [
          "business_details",
          "country_code",
          "party_id",
          "token",
          "url"
        ],
        "type": "object",
        "properties": {
          "token": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "The token for the other party to authenticate in your system.",
            "example": "ebf3b399-779f-4497-9b9d-ac6ad3cc44d2"
          },
          "url": {
            "type": "string",
            "description": "The URL to your API versions endpoint.",
            "format": "url",
            "example": "https://example.com/ocpi/versions/"
          },
          "business_details": {
            "$ref": "#/components/schemas/BusinessDetails"
          },
          "party_id": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "CPO or eMSP ID of this party. (following the 15118 ISO standard).",
            "example": "ERG"
          },
          "country_code": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "Country code of the country this party is operating in.",
            "example": "DE"
          }
        },
        "description": "Credentials"
      },
      "PlatformVersion211": {
        "required": [
          "exchangeIdentifier",
          "url",
          "version"
        ],
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL",
            "example": "https://www.server.com/"
          },
          "version": {
            "type": "string",
            "description": "Ocpi version number",
            "example": "2.1.1",
            "enum": [
              "2.0",
              "2.1",
              "2.1.1",
              "2.2",
              "2.2.1"
            ]
          },
          "endpoints": {
            "type": "array",
            "description": "customer endpoints",
            "items": {
              "$ref": "#/components/schemas/Endpoint"
            }
          },
          "credentials": {
            "type": "array",
            "description": "Credentials",
            "items": {
              "$ref": "#/components/schemas/Credentials"
            }
          },
          "exchangeIdentifier": {
            "type": "string",
            "description": "Type of exchange identifier.",
            "enum": [
              "SENDER",
              "RECEIVER"
            ]
          }
        }
      },
      "PlatformVersion211UpdateRequest": {
        "required": [
          "exchangeIdentifier",
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "description": "Ocpi version number",
            "example": "2.2.1",
            "enum": [
              "2.0",
              "2.1",
              "2.1.1",
              "2.2",
              "2.2.1"
            ]
          },
          "endpoints": {
            "type": "array",
            "description": "customer endpoints",
            "items": {
              "$ref": "#/components/schemas/Endpoint"
            }
          },
          "credentials": {
            "type": "array",
            "description": "Credentials",
            "items": {
              "$ref": "#/components/schemas/Credentials"
            }
          },
          "exchangeIdentifier": {
            "type": "string",
            "description": "Type of exchange identifier.",
            "enum": [
              "SENDER",
              "RECEIVER"
            ]
          }
        }
      },
      "AdditionalGeoLocation": {
        "required": [
          "latitude",
          "longitude"
        ],
        "type": "object",
        "properties": {
          "latitude": {
            "maxLength": 10,
            "minLength": 0,
            "pattern": "-?[0-9]{1,2}\\.[0-9]{5,7}",
            "type": "string",
            "description": "Latitude of the point in decimal degree. Decimal separator: \".\", Regex: -?[0-9]{1,2}\\.[0-9]{5,7}",
            "example": "50.770774"
          },
          "longitude": {
            "maxLength": 11,
            "minLength": 0,
            "pattern": "-?[0-9]{1,3}\\.[0-9]{5,7}",
            "type": "string",
            "description": "Longitude of the point in decimal degree. Decimal separator: \".\", Regex: -?[0-9]{1,3}\\.[0-9]{5,7}",
            "example": "-126.104965"
          },
          "name": {
            "$ref": "#/components/schemas/DisplayText"
          }
        },
        "description": "This class defines an additional geo location that is relevant for the Charge Point. The geodetic system to be used is WGS 84."
      },
      "Connector": {
        "required": [
          "format",
          "id",
          "last_updated",
          "max_amperage",
          "max_voltage",
          "power_type",
          "standard"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Identifier of the Connector within the EVSE. Two Connectors may have the same id as long as they do not belong to the same EVSE object.",
            "example": "1"
          },
          "standard": {
            "type": "string",
            "description": "The standard of the installed connector.",
            "enum": [
              "CHADEMO",
              "CHAOJI",
              "DOMESTIC_A",
              "DOMESTIC_B",
              "DOMESTIC_C",
              "DOMESTIC_D",
              "DOMESTIC_E",
              "DOMESTIC_F",
              "DOMESTIC_G",
              "DOMESTIC_H",
              "DOMESTIC_I",
              "DOMESTIC_J",
              "DOMESTIC_K",
              "DOMESTIC_L",
              "DOMESTIC_M",
              "DOMESTIC_N",
              "DOMESTIC_O",
              "GBT_AC",
              "GBT_DC",
              "IEC_60309_2_single_16",
              "IEC_60309_2_three_16",
              "IEC_60309_2_three_32",
              "IEC_60309_2_three_64",
              "IEC_62196_T1",
              "IEC_62196_T1_COMBO",
              "IEC_62196_T2",
              "IEC_62196_T2_COMBO",
              "IEC_62196_T3A",
              "IEC_62196_T3C",
              "NEMA_5_20",
              "NEMA_6_30",
              "NEMA_6_50",
              "NEMA_10_30",
              "NEMA_10_50",
              "NEMA_14_30",
              "NEMA_14_50",
              "PANTOGRAPH_BOTTOM_UP",
              "PANTOGRAPH_TOP_DOWN",
              "TESLA_R",
              "TESLA_S",
              "UNKNOWN"
            ]
          },
          "format": {
            "type": "string",
            "description": "The format (socket/cable) of the installed connector.",
            "enum": [
              "SOCKET",
              "CABLE"
            ]
          },
          "power_type": {
            "type": "string",
            "enum": [
              "AC_1_PHASE",
              "AC_2_PHASE",
              "AC_2_PHASE_SPLIT",
              "AC_3_PHASE",
              "DC"
            ]
          },
          "max_voltage": {
            "type": "integer",
            "description": "Maximum voltage of the connector (line to neutral for AC_3_PHASE), in volt [V]. For example: DC Chargers might vary the voltage during charging when battery almost full.",
            "format": "int32"
          },
          "max_amperage": {
            "type": "integer",
            "description": "Maximum amperage of the connector, in ampere [A].",
            "format": "int32"
          },
          "max_electric_power": {
            "type": "integer",
            "description": "Maximum electric power that can be delivered by this connector, in Watts (W). When the maximum electric power is lower than the calculated value from voltage and amperage, this value should be set. \n    For example: A DC Charge Point which can delivers up to 920V and up to 400A can be limited to a maximum of 150kW (max_electric_power = 150000). Depending on the car, it may supply max voltage or current, but not both at the same time.\nFor AC Charge Points, the amount of phases used can also have influence on the maximum power.",
            "format": "int32"
          },
          "tariff_ids": {
            "uniqueItems": true,
            "type": "array",
            "description": "Identifiers of the currently valid charging tariffs. Multiple tariffs are possible, but only one of each Tariff.type can be active at the same time. Tariffs with the same type are only allowed if they are not active at the same time: start_date_time and end_date_time period not overlapping.\n    When preference-based smart charging is supported, one tariff for every possible ProfileType should be provided. These tell the user about the options they have at this Connector, and what the tariff is for every option.\nFor a \"free of charge\" tariff, this field should be set and point to a defined \"free of charge\" tariff.",
            "items": {
              "maxLength": 36,
              "minLength": 0,
              "type": "string",
              "description": "Identifiers of the currently valid charging tariffs. Multiple tariffs are possible, but only one of each Tariff.type can be active at the same time. Tariffs with the same type are only allowed if they are not active at the same time: start_date_time and end_date_time period not overlapping.\n    When preference-based smart charging is supported, one tariff for every possible ProfileType should be provided. These tell the user about the options they have at this Connector, and what the tariff is for every option.\nFor a \"free of charge\" tariff, this field should be set and point to a defined \"free of charge\" tariff."
            }
          },
          "terms_and_conditions": {
            "type": "string",
            "description": "URL to the operator’s terms and conditions.",
            "format": "url",
            "example": "http://www.example.com"
          },
          "last_updated": {
            "type": "string",
            "description": "Timestamp when this Connector was last updated (or created).",
            "format": "date-time"
          }
        },
        "description": "A Connector is the socket or cable and plug available for the EV to use. A single EVSE may provide multiple Connectors but only one of them can be in use at the same time. A Connector always belongs to an EVSE object."
      },
      "DisplayText": {
        "required": [
          "language",
          "text"
        ],
        "type": "object",
        "properties": {
          "language": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "Language Code ISO 639-1.",
            "example": "en"
          },
          "text": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Text to be displayed to a end user. No markup, html etc. allowed.",
            "example": "this is a display text"
          }
        },
        "description": "List of multi-language alternative tariff info texts."
      },
      "EnergyMix": {
        "required": [
          "is_green_energy"
        ],
        "type": "object",
        "properties": {
          "is_green_energy": {
            "type": "boolean",
            "description": "True if 100% from regenerative sources. (CO2 and nuclear waste is zero)",
            "example": false
          },
          "energy_sources": {
            "type": "array",
            "description": "Key-value pairs (enum + percentage) of energy sources of this location’s tariff.",
            "items": {
              "$ref": "#/components/schemas/EnergySource"
            }
          },
          "environ_impact": {
            "type": "array",
            "description": "Key-value pairs (enum + percentage) of nuclear waste and CO2 exhaust of this location’s tariff.",
            "items": {
              "$ref": "#/components/schemas/EnvironmentalImpact"
            }
          },
          "supplier_name": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Name of the energy supplier, delivering the energy for this location or tariff.",
            "example": "HANDWE EV"
          },
          "energy_product_name": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Name of the energy suppliers product/tariff plan used at this location.",
            "example": "Kleenheat"
          }
        },
        "description": "This type is used to specify the energy mix and environmental impact of the supplied energy at a location or in a tariff."
      },
      "EnergySource": {
        "required": [
          "percentage",
          "source"
        ],
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "description": "Categories of energy sources.",
            "example": "GAS",
            "enum": [
              "NUCLEAR",
              "GENERAL_FOSSIL",
              "COAL",
              "GAS",
              "GENERAL_GREEN",
              "SOLAR",
              "WIND",
              "WATER"
            ]
          },
          "percentage": {
            "maximum": 100,
            "exclusiveMaximum": false,
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "number",
            "description": "Percentage of this source (0-100) in the mix.",
            "example": 33.2
          }
        },
        "description": "Key-value pairs (enum + percentage) of energy sources. All given values of all categories should add up to 100 percent."
      },
      "EnvironmentalImpact": {
        "required": [
          "amount",
          "category"
        ],
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "description": "Categories of environmental impact values.",
            "example": "NUCLEAR_WASTE",
            "enum": [
              "NUCLEAR_WASTE",
              "CARBON_DIOXIDE"
            ]
          },
          "amount": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "number",
            "description": "Amount of this portion in g/kWh.",
            "example": 0.005
          }
        },
        "description": "Amount of waste produced/emitted per kWh."
      },
      "Evse": {
        "required": [
          "connectors",
          "last_updated",
          "status",
          "uid"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "maxLength": 39,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the EVSE within the CPOs platform (and suboperator platforms). For example a database ID or the actual \"EVSE ID\". This field can never be changed, modified or renamed. This is the 'technical' identification of the EVSE, not to be used as 'human readable' identification, use the field evse_id for that.This field is named uid instead of id, because id could be confused with evse_id which is an eMI3 defined field."
          },
          "status": {
            "type": "string",
            "description": "Indicates the current status of the EVSE.",
            "enum": [
              "AVAILABLE",
              "BLOCKED",
              "CHARGING",
              "INOPERATIVE",
              "OUTOFORDER",
              "PLANNED",
              "REMOVED",
              "RESERVED",
              "UNKNOWN"
            ]
          },
          "capabilities": {
            "type": "array",
            "description": "List of functionalities that the EVSE is capable of.",
            "items": {
              "type": "string",
              "description": "List of functionalities that the EVSE is capable of.",
              "enum": [
                "CHARGING_PROFILE_CAPABLE",
                "CHARGING_PREFERENCES_CAPABLE",
                "CHIP_CARD_SUPPORT",
                "CONTACTLESS_CARD_SUPPORT",
                "CREDIT_CARD_PAYABLE",
                "DEBIT_CARD_PAYABLE",
                "PED_TERMINAL",
                "REMOTE_START_STOP_CAPABLE",
                "RESERVABLE",
                "RFID_READER",
                "TOKEN_GROUP_CAPABLE",
                "UNLOCK_CAPABLE",
                "START_SESSION_CONNECTOR_REQUIRED"
              ]
            }
          },
          "connectors": {
            "type": "array",
            "description": "List of available connectors on the EVSE.",
            "items": {
              "$ref": "#/components/schemas/Connector"
            }
          },
          "coordinates": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "directions": {
            "type": "array",
            "description": "Multi-language human-readable directions when more detailed information on how to reach the EVSE from the Location is required.",
            "items": {
              "$ref": "#/components/schemas/DisplayText"
            }
          },
          "images": {
            "type": "array",
            "description": "Links to images related to the EVSE such as photos or logos.",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "evse_id": {
            "maxLength": 48,
            "minLength": 0,
            "type": "string",
            "description": "Compliant with the following specification for EVSE ID from \"eMI3 standard version V1.0\" (http://emi3group.com/documents-links/) \"Part 2: business objects.\" Optional because: if an evse_id is to be re-used in the real world, the evse_id can be removed from an EVSE object if the status is set to REMOVED."
          },
          "status_schedule": {
            "type": "array",
            "description": "Indicates a planned status update of the EVSE.",
            "items": {
              "$ref": "#/components/schemas/StatusSchedule"
            }
          },
          "floor_level": {
            "maxLength": 4,
            "minLength": 0,
            "type": "string",
            "description": "Level on which the Charge Point is located (in garage buildings) in the locally displayed numbering scheme."
          },
          "physical_reference": {
            "maxLength": 16,
            "minLength": 0,
            "type": "string",
            "description": "A number/string printed on the outside of the EVSE for visual identification."
          },
          "parking_restrictions": {
            "type": "array",
            "description": "The restrictions that apply to the parking spot.",
            "items": {
              "type": "string",
              "description": "The restrictions that apply to the parking spot.",
              "enum": [
                "EV_ONLY",
                "PLUGGED",
                "DISABLED",
                "CUSTOMERS",
                "MOTORCYCLES"
              ]
            }
          },
          "last_updated": {
            "type": "string",
            "description": "Timestamp when this EVSE or one of its Connectors was last updated (or created).",
            "format": "date-time"
          }
        },
        "description": "The EVSE object describes the part that controls the power supply to a single EV in a single session. It always belongs to a Location object. The object only contains directions to get from the location itself to the EVSE (i.e. floor, physical_reference or directions)."
      },
      "ExceptionalPeriod": {
        "required": [
          "period_begin",
          "period_end"
        ],
        "type": "object",
        "properties": {
          "period_begin": {
            "type": "string",
            "description": "Begin of the exception. SecurityScheme.In UTC, time_zone field can be used to convert to local time.",
            "format": "date-time",
            "example": "2022-06-24T00:00:00Z"
          },
          "period_end": {
            "type": "string",
            "description": "End of the exception. In UTC, time_zone field can be used to convert to local time.",
            "format": "date-time",
            "example": "2022-06-25T00:00:00Z"
          }
        },
        "description": "Specifies one exceptional period for opening or access hours."
      },
      "GeoLocation": {
        "required": [
          "latitude",
          "longitude"
        ],
        "type": "object",
        "properties": {
          "latitude": {
            "type": "string",
            "description": "Latitude of the point in decimal degree. Decimal separator: '.', Regex: -?[0-9]{1,2}\\.[0-9]{5,7}",
            "example": "50.770774"
          },
          "longitude": {
            "type": "string",
            "description": "Longitude of the point in decimal degree. Decimal separator: '.' Regex: -?[0-9]{1,3}\\.[0-9]{5,7}",
            "example": "-126.104965"
          }
        },
        "description": "This class defines the geo location of the Charge Point. The geodetic system to be used is WGS 84."
      },
      "Hours": {
        "required": [
          "twentyfourseven"
        ],
        "type": "object",
        "properties": {
          "twentyfourseven": {
            "type": "boolean",
            "description": "True to represent 24 hours a day and 7 days a week, except the given exceptions.",
            "example": false
          },
          "regular_hours": {
            "type": "array",
            "description": "Regular hours, weekday-based. Only to be used if twentyfourseven=false, then this field needs to contain at least one RegularHours object.",
            "items": {
              "$ref": "#/components/schemas/RegularHours"
            }
          },
          "exceptional_openings": {
            "type": "array",
            "description": "Exceptions for specified calendar dates, time-range based. Periods the station is operating/accessible. Additional to regular_hours. May overlap regular rules.",
            "items": {
              "$ref": "#/components/schemas/ExceptionalPeriod"
            }
          },
          "exceptional_closings": {
            "type": "array",
            "description": "Exceptions for specified calendar dates, time-range based. Periods the station is not operating/accessible. Overwriting regular_hours and exceptional_openings. Should not overlap exceptional_openings.",
            "items": {
              "$ref": "#/components/schemas/ExceptionalPeriod"
            }
          }
        },
        "description": "Opening and access hours of the location."
      },
      "Location": {
        "required": [
          "address",
          "city",
          "coordinates",
          "country",
          "country_code",
          "id",
          "last_updated",
          "party_id",
          "publish",
          "time_zone"
        ],
        "type": "object",
        "properties": {
          "publish": {
            "type": "boolean",
            "description": "Defines if a Location may be published on an website or app etc. When this is set to false, only tokens identified in the field: publish_allowed_to are allowed to be shown this Location. When the same location has EVSEs that may be published and may not be published, two 'Locations' should be created."
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Display name of the location."
          },
          "address": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "Street/block name and house number if available."
          },
          "city": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "City or town."
          },
          "state": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "State or province of the location, only to be used when relevant."
          },
          "country": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "ISO 3166-1 alpha-3 code for the country of this location.",
            "example": "DEU"
          },
          "coordinates": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "directions": {
            "type": "array",
            "description": "Human-readable directions on how to reach the location.",
            "items": {
              "$ref": "#/components/schemas/DisplayText"
            }
          },
          "operator": {
            "$ref": "#/components/schemas/BusinessDetails"
          },
          "suboperator": {
            "$ref": "#/components/schemas/BusinessDetails"
          },
          "owner": {
            "$ref": "#/components/schemas/BusinessDetails"
          },
          "facilities": {
            "type": "array",
            "description": "Optional list of facilities this charging location directly belongsmto.",
            "items": {
              "type": "string",
              "description": "Optional list of facilities this charging location directly belongsmto.",
              "enum": [
                "HOTEL",
                "RESTAURANT",
                "CAFE",
                "MALL",
                "SUPERMARKET",
                "SPORT",
                "RECREATION_AREA",
                "NATURE",
                "MUSEUM",
                "BIKE_SHARING",
                "BUS_STOP",
                "TAXI_STAND",
                "TRAM_STOP",
                "METRO_STATION",
                "TRAIN_STATION",
                "AIRPORT",
                "PARKING_LOT",
                "CARPOOL_PARKING",
                "FUEL_STATION",
                "WIFI"
              ]
            }
          },
          "images": {
            "type": "array",
            "description": "Links to images related to the location such as photos or logos.",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "country_code": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "ISO-3166 alpha-2 country code of the CPO that 'owns' this Location.",
            "example": "DE"
          },
          "party_id": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "ID of the CPO that 'owns' this Location (following the ISO-15118 standard).",
            "example": "ERG"
          },
          "id": {
            "maxLength": 39,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the location within the CPOs platform (and suboperator platforms). This field can never be changed, modified or renamed.",
            "example": "AvO78iot3x"
          },
          "publish_allowed_to": {
            "type": "array",
            "description": "This field may only be used when the publish field is set to false.Only owners of Tokens that match all the set fields of one PublishToken in the list are allowed to be shown this location.",
            "items": {
              "$ref": "#/components/schemas/PublishTokenType"
            }
          },
          "postal_code": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Postal code of the location, may only be omitted when the location has no postal code: in some countries charging locations at highways don’t have postal codes."
          },
          "related_locations": {
            "type": "array",
            "description": "Geographical location of related points relevant to the user.",
            "items": {
              "$ref": "#/components/schemas/AdditionalGeoLocation"
            }
          },
          "parking_type": {
            "type": "string",
            "description": "The general type of parking at the charge point location.",
            "enum": [
              "ALONG_MOTORWAY",
              "PARKING_GARAGE",
              "PARKING_LOT",
              "ON_DRIVEWAY",
              "ON_STREET",
              "UNDERGROUND_GARAGE"
            ]
          },
          "evses": {
            "type": "array",
            "description": "List of EVSEs that belong to this Location.",
            "items": {
              "$ref": "#/components/schemas/Evse"
            }
          },
          "time_zone": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "One of IANA tzdata’s TZ-values representing the time zone of the location. For example: \"Europe/Oslo\", \"Europe/Zurich\". (http://www.iana.org/time-zones)",
            "example": "Europe/Oslo"
          },
          "opening_times": {
            "$ref": "#/components/schemas/Hours"
          },
          "charging_when_closed": {
            "type": "boolean",
            "description": "Indicates if the EVSEs are still charging outside the opening hours of the location. E.g. when the parking garage closes its barriers over night, is it allowed to charge till the next morning? Default: true"
          },
          "energy_mix": {
            "$ref": "#/components/schemas/EnergyMix"
          },
          "last_updated": {
            "type": "string",
            "description": "Timestamp when this Location or one of its EVSEs or Connectors were last updated (or created).",
            "format": "date-time"
          }
        },
        "description": "The Location object describes the location and its properties where a group of EVSEs that belong together are installed. Typically, the Location object is the exact location of the group of EVSEs, but it can also be the entrance of a parking garage which contains these EVSEs. The exact way to reach each EVSE can be further specified by its own properties."
      },
      "LocationResponseVersion221": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "The timestamp this message was generated",
            "format": "date-time",
            "example": "2024-03-19T14:11:43Z"
          },
          "data": {
            "$ref": "#/components/schemas/Location"
          },
          "status_code": {
            "type": "integer",
            "description": "The OCPI status code",
            "format": "int32",
            "example": 1000
          },
          "status_message": {
            "type": "string",
            "description": "An optional status message which may help when debugging",
            "example": "Success"
          }
        }
      },
      "PublishTokenType": {
        "type": "object",
        "properties": {
          "uid": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Unique ID by which this Token can be identified.",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "    The type of token\n    * <p>\n    * NOTE: The eMSP is RECOMMENDED to push Tokens with type: AD_HOC_USER or APP_USER with whitelist set to\n    * NEVER. Whitelists are very useful for RFID type Tokens, but the AD_HOC_USER/APP_USER Tokens are used to\n    * start Sessions from an App etc. so whitelisting them has no advantages.\n    * </p>\n",
            "nullable": true,
            "example": "RFID",
            "enum": [
              "AD_HOC_USER",
              "APP_USER",
              "OTHER",
              "RFID"
            ]
          },
          "issuer": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Issuing company, most of the times the name of the company printed on thetoken (RFID card), not necessarily the eMSP.",
            "nullable": true
          },
          "visual_number": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Visual readable number/identification as printed on the Token (RFID card).",
            "nullable": true
          },
          "group_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "This ID groups a couple of tokens. This can be used to make two or more tokens work as one.",
            "nullable": true
          }
        },
        "description": "Defines the set of values that identify a token to which a Location might be published.At least one of the following fields SHALL be set: uid, visual_number, or group_id.When uid is set, type SHALL also be set.When visual_number is set, issuer SHALL also be set."
      },
      "RegularHours": {
        "required": [
          "period_begin",
          "period_end",
          "weekday"
        ],
        "type": "object",
        "properties": {
          "weekday": {
            "type": "integer",
            "description": "Number of day in the week, from Monday (1) till Sunday (7)",
            "format": "int32",
            "example": 1
          },
          "period_begin": {
            "maxLength": 5,
            "minLength": 0,
            "pattern": "([0-1][0-9]|2[0-3]):[0-5][0-9]",
            "type": "string",
            "description": "Begin of the regular period, in local time, given in hours and minutes. Must be in 24h format with leading zeros. Example: \"18:15\". Hour/Minute separator: \":\" Regex: ([0-1][0-9]|2[0-3]):[0-5][0-9].",
            "example": "07:00"
          },
          "period_end": {
            "maxLength": 5,
            "minLength": 0,
            "pattern": "([0-1][0-9]|2[0-3]):[0-5][0-9]",
            "type": "string",
            "description": "End of the regular period, in local time, syntax as for period_begin. Must be later than period_begin.",
            "example": "18:00"
          }
        },
        "description": "Regular recurring operation or access hours."
      },
      "StatusSchedule": {
        "required": [
          "period_begin",
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status value during the scheduled period.",
            "enum": [
              "AVAILABLE",
              "BLOCKED",
              "CHARGING",
              "INOPERATIVE",
              "OUTOFORDER",
              "PLANNED",
              "REMOVED",
              "RESERVED",
              "UNKNOWN"
            ]
          },
          "period_begin": {
            "type": "string",
            "description": "Begin of the scheduled period.",
            "format": "date-time"
          },
          "period_end": {
            "type": "string",
            "description": "End of the scheduled period, if known.",
            "format": "date-time"
          }
        },
        "description": "This type is used to schedule status periods in the future. The eMSP can provide this information to the EV user for trip planning purposes. A period MAY have no end. Example: \"This station will be running as of tomorrow. Today it is still planned and under construction.\""
      },
      "CredentialsResponseVersion221": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "The timestamp this message was generated",
            "format": "date-time",
            "example": "2024-03-19T14:11:43Z"
          },
          "data": {
            "$ref": "#/components/schemas/Credentials"
          },
          "status_code": {
            "type": "integer",
            "description": "The OCPI status code",
            "format": "int32",
            "example": 1000
          },
          "status_message": {
            "type": "string",
            "description": "An optional status message which may help when debugging",
            "example": "Success"
          }
        }
      },
      "AuthorizationInfo": {
        "required": [
          "allowed",
          "token"
        ],
        "type": "object",
        "properties": {
          "allowed": {
            "type": "string",
            "description": "Status of the Token, and whether charging is allowed at the optionally given location.",
            "enum": [
              "ALLOWED",
              "BLOCKED",
              "EXPIRED",
              "NO_CREDIT",
              "NOT_ALLOWED"
            ]
          },
          "token": {
            "$ref": "#/components/schemas/Token"
          },
          "location": {
            "$ref": "#/components/schemas/LocationReferences"
          },
          "info": {
            "$ref": "#/components/schemas/DisplayText"
          },
          "authorization_reference": {
            "type": "string",
            "description": "Reference to the authorization given by the eMSP, when given, this\nreference will be provided in the relevant Session and/or CDR."
          }
        },
        "description": "Contains the actual response data object or list of objects from each request"
      },
      "AuthorizationInfoResponseVersion221": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "The timestamp this message was generated",
            "format": "date-time",
            "example": "2024-03-19T14:11:43Z"
          },
          "data": {
            "$ref": "#/components/schemas/AuthorizationInfo"
          },
          "status_code": {
            "type": "integer",
            "description": "The OCPI status code",
            "format": "int32",
            "example": 1000
          },
          "status_message": {
            "type": "string",
            "description": "An optional status message which may help when debugging",
            "example": "Success"
          }
        }
      },
      "LocationReferences": {
        "required": [
          "location_id"
        ],
        "type": "object",
        "properties": {
          "location_id": {
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "description": "Unique identifier for the location."
          },
          "evse_uids": {
            "type": "array",
            "description": "Unique identifiers for EVSEs within the CPO’s platform for the EVSE within the given location.",
            "items": {
              "type": "string",
              "description": "Unique identifiers for EVSEs within the CPO’s platform for the EVSE within the given location."
            }
          }
        },
        "description": "Optional reference to the location if it was included in the request, and if\nthe EV driver is allowed to charge at that location. Only the EVSEs the\nEV driver is allowed to charge at are returned."
      },
      "RegistrationCustomerInfoRequest": {
        "required": [
          "customerUrlInfo"
        ],
        "type": "object",
        "properties": {
          "customerUrlInfo": {
            "type": "array",
            "description": "Customer info which holds info like url, module identifier and role interface",
            "items": {
              "$ref": "#/components/schemas/CustomerUrlInfo"
            }
          }
        }
      },
      "CommandResult": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result of the command request as sent by the Charge Point to the CPO.",
            "enum": [
              "ACCEPTED",
              "CANCELED_RESERVATION",
              "EVSE_OCCUPIED",
              "EVSE_INOPERATIVE",
              "FAILED",
              "NOT_SUPPORTED",
              "REJECTED",
              "TIMEOUT",
              "UNKNOWN_RESERVATION"
            ]
          },
          "message": {
            "type": "array",
            "description": "Human-readable description of the reason (if one can be provided), multiple languages can be provided.",
            "items": {
              "$ref": "#/components/schemas/DisplayText"
            }
          }
        },
        "description": "Result of the command request, by the CPO (not the Charge Point). So this indicates if the CPO understood the command request and was able to send it to the Charge Point.\nThis is not the response by the Charge Point."
      },
      "CommandResponse": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Response from the CPO on the command request.",
            "enum": [
              "NOT_SUPPORTED",
              "REJECTED",
              "ACCEPTED",
              "UNKNOWN_SESSION"
            ]
          },
          "timeout": {
            "type": "integer",
            "description": "Timeout for this command in seconds. When the Result is not received within this timeout, the eMSP can assume that the message might never be send.",
            "format": "int32"
          },
          "message": {
            "type": "array",
            "description": "Human-readable description of the result (if one can be provided), multiple languages can be provided.",
            "items": {
              "$ref": "#/components/schemas/DisplayText"
            }
          }
        },
        "description": "Result of the command request, by the CPO (not the Charge Point). So this indicates if the CPO understood the command request and was able to send it to the Charge Point.\nThis is not the response by the Charge Point."
      },
      "CommandResponseVersion221": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "The timestamp this message was generated",
            "format": "date-time",
            "example": "2024-03-19T14:11:43Z"
          },
          "data": {
            "$ref": "#/components/schemas/CommandResponse"
          },
          "status_code": {
            "type": "integer",
            "description": "The OCPI status code",
            "format": "int32",
            "example": 1000
          },
          "status_message": {
            "type": "string",
            "description": "An optional status message which may help when debugging",
            "example": "Success"
          }
        }
      },
      "CredentialsResponseVersion211": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "The timestamp this message was generated",
            "format": "date-time",
            "example": "2024-03-19T14:11:43Z"
          },
          "data": {
            "$ref": "#/components/schemas/Credentials"
          },
          "status_code": {
            "type": "integer",
            "description": "The OCPI status code",
            "format": "int32",
            "example": 1000
          },
          "status_message": {
            "type": "string",
            "description": "An optional status message which may help when debugging",
            "example": "Success"
          }
        }
      },
      "EvseResponseVersion221": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "The timestamp this message was generated",
            "format": "date-time",
            "example": "2024-03-19T14:11:43Z"
          },
          "data": {
            "$ref": "#/components/schemas/Evse"
          },
          "status_code": {
            "type": "integer",
            "description": "The OCPI status code",
            "format": "int32",
            "example": 1000
          },
          "status_message": {
            "type": "string",
            "description": "An optional status message which may help when debugging",
            "example": "Success"
          }
        }
      },
      "ConnectorResponseVersion221": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "The timestamp this message was generated",
            "format": "date-time",
            "example": "2024-03-19T14:11:43Z"
          },
          "data": {
            "$ref": "#/components/schemas/Connector"
          },
          "status_code": {
            "type": "integer",
            "description": "The OCPI status code",
            "format": "int32",
            "example": 1000
          },
          "status_message": {
            "type": "string",
            "description": "An optional status message which may help when debugging",
            "example": "Success"
          }
        }
      },
      "Version": {
        "required": [
          "url",
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "description": "List of known OCPI versions",
            "example": "2.2",
            "enum": [
              "2.0",
              "2.1",
              "2.1.1",
              "2.2",
              "2.2.1"
            ]
          },
          "url": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "URL to the endpoint containing version specific information",
            "example": "https://www.server.com/ocpi/2.2/"
          }
        },
        "description": "This object contains the available OCPI version and the corresponding URL to where version specific details such as the supported endpoints can be found."
      },
      "VersionResponse": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "The timestamp this message was generated",
            "format": "date-time",
            "example": "2024-03-19T14:11:43Z"
          },
          "data": {
            "$ref": "#/components/schemas/Version"
          },
          "status_code": {
            "type": "integer",
            "description": "The OCPI status code",
            "format": "int32",
            "example": 1000
          },
          "status_message": {
            "type": "string",
            "description": "An optional status message which may help when debugging",
            "example": "Success"
          }
        }
      },
      "VersionDetails": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "description": "The version number",
            "example": "2.2",
            "enum": [
              "2.0",
              "2.1",
              "2.1.1",
              "2.2",
              "2.2.1"
            ]
          },
          "endpoints": {
            "type": "array",
            "description": "A list of supported endpoints for this version.",
            "items": {
              "$ref": "#/components/schemas/Endpoint"
            }
          }
        },
        "description": "Contains the actual response data object or list of objects from each request"
      },
      "VersionDetailsResponse": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "The timestamp this message was generated",
            "format": "date-time",
            "example": "2024-03-19T14:11:43Z"
          },
          "data": {
            "$ref": "#/components/schemas/VersionDetails"
          },
          "status_code": {
            "type": "integer",
            "description": "The OCPI status code",
            "format": "int32",
            "example": 1000
          },
          "status_message": {
            "type": "string",
            "description": "An optional status message which may help when debugging",
            "example": "Success"
          }
        }
      },
      "TokenResponseVersion221": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "The timestamp this message was generated",
            "format": "date-time",
            "example": "2024-03-19T14:11:43Z"
          },
          "data": {
            "$ref": "#/components/schemas/Token"
          },
          "status_code": {
            "type": "integer",
            "description": "The OCPI status code",
            "format": "int32",
            "example": 1000
          },
          "status_message": {
            "type": "string",
            "description": "An optional status message which may help when debugging",
            "example": "Success"
          }
        }
      },
      "Price": {
        "required": [
          "excl_vat"
        ],
        "type": "object",
        "properties": {
          "excl_vat": {
            "type": "number",
            "description": "Price/Cost excluding VAT.",
            "example": 87.31
          },
          "incl_vat": {
            "type": "number",
            "description": "Price/Cost including VAT.",
            "example": 101.88
          }
        },
        "description": "Total sum of all the cost related to a reservation of a Charge Point, including fixed price components, in the specified currency."
      },
      "PriceComponent": {
        "required": [
          "price",
          "step_size",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of tariff dimension.",
            "enum": [
              "ENERGY",
              "FLAT",
              "PARKING_TIME",
              "TIME"
            ]
          },
          "price": {
            "type": "number",
            "description": "Price per unit (excl. VAT) for this tariff dimension.",
            "example": 2
          },
          "vat": {
            "type": "number",
            "description": "Applicable VAT percentage for this tariff dimension. If omitted, no VAT is applicable. Not providing a VAT is different from 0% VAT, which would be a value of 0.0 here.",
            "example": 10
          },
          "step_size": {
            "type": "integer",
            "description": "Minimum amount to be billed. This unit will be billed in this step_size blocks. Amounts that are less then this step_size are rounded up to the given step_size. For example: if type is TIME and step_size has a value of 300, then time will be billed in blocks of 5 minutes. If 6 minutes were used, 10 minutes (2 blocks of step_size) will be billed.",
            "format": "int32",
            "example": 300
          }
        },
        "description": "List of price components that describe the pricing of a tariff."
      },
      "Tariff": {
        "required": [
          "country_code",
          "currency",
          "elements",
          "id",
          "last_updated",
          "party_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the tariff within the CPO’s platform (and suboperator platforms).",
            "example": "12"
          },
          "currency": {
            "type": "string",
            "description": "ISO-4217 code of the currency of this tariff.",
            "example": "EUR"
          },
          "type": {
            "type": "string",
            "description": "Defines the type of the tariff. This allows for distinction in case of given Charging Preferences. When omitted, this tariff is valid for all sessions.",
            "example": "REGULAR",
            "enum": [
              "AD_HOC_PAYMENT",
              "PROFILE_CHEAP",
              "PROFILE_FAST",
              "PROFILE_GREEN",
              "REGULAR"
            ]
          },
          "elements": {
            "type": "array",
            "description": "List of Tariff Elements.",
            "items": {
              "$ref": "#/components/schemas/TariffElement"
            }
          },
          "country_code": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "ISO-3166 alpha-2 country code of the CPO that owns this Tariff.",
            "example": "BE"
          },
          "party_id": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "CPO ID of the CPO that owns this Tariff (following the ISO-15118 standard).",
            "example": "BEC"
          },
          "tariff_alt_text": {
            "type": "array",
            "description": "List of multi-language alternative tariff info texts.",
            "items": {
              "$ref": "#/components/schemas/DisplayText"
            }
          },
          "tariff_alt_url": {
            "type": "string",
            "description": "URL to a web page that contains an explanation of the tariff information in human readable form.",
            "example": "https://www.example.com/tariff"
          },
          "min_price": {
            "$ref": "#/components/schemas/Price"
          },
          "max_price": {
            "$ref": "#/components/schemas/Price"
          },
          "start_date_time": {
            "type": "string",
            "description": "The time when this tariff becomes active, in UTC, time_zone field of the Location can be used to convert to local time. Typically used for a new tariff that is already given with the location, before it becomes active.",
            "format": "date-time",
            "example": "2021-03-19T14:11:43Z"
          },
          "end_date_time": {
            "type": "string",
            "description": "The time after which this tariff is no longer valid, in UTC, time_zone field if the Location can be used to convert to local time. Typically used when this tariff is going to be replaced with a different tariff in the near future.",
            "format": "date-time",
            "example": "2021-03-19T14:11:43Z"
          },
          "energy_mix": {
            "$ref": "#/components/schemas/EnergyMix"
          },
          "last_updated": {
            "type": "string",
            "description": "Timestamp when this Tariff was last updated (or created).",
            "format": "date-time",
            "example": "2021-03-19T14:11:43Z"
          }
        },
        "description": "A Tariff object consists of a list of one or more Tariff Elements, which can be used to create complex Tariff structures."
      },
      "TariffElement": {
        "required": [
          "price_components"
        ],
        "type": "object",
        "properties": {
          "restrictions": {
            "$ref": "#/components/schemas/TariffRestrictions"
          },
          "price_components": {
            "type": "array",
            "description": "List of price components that describe the pricing of a tariff.",
            "items": {
              "$ref": "#/components/schemas/PriceComponent"
            }
          }
        },
        "description": "List of Tariff Elements."
      },
      "TariffResponseVersion221": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "The timestamp this message was generated",
            "format": "date-time",
            "example": "2024-03-19T14:11:43Z"
          },
          "data": {
            "$ref": "#/components/schemas/Tariff"
          },
          "status_code": {
            "type": "integer",
            "description": "The OCPI status code",
            "format": "int32",
            "example": 1000
          },
          "status_message": {
            "type": "string",
            "description": "An optional status message which may help when debugging",
            "example": "Success"
          }
        }
      },
      "TariffRestrictions": {
        "type": "object",
        "properties": {
          "reservation": {
            "type": "string",
            "description": "When this field is present, the TariffElement describes reservation costs. A reservation starts when the reservation is made, and ends when the driver starts charging on the reserved EVSE/Location, or when the reservation expires. A reservation can only have: FLAT and TIME TariffDimensions, where TIME is for the duration of the reservation.",
            "enum": [
              "RESERVATION",
              "RESERVATION_EXPIRES"
            ]
          },
          "start_time": {
            "maxLength": 5,
            "minLength": 0,
            "type": "string",
            "description": "Start time of day in local time, the time zone is defined in the time_zone field of the Location, for example 13:30, valid from this time of the day. Must be in 24h format with leading zeros.Hour/Minute separator: \":\" Regex: ([0-1][0-9]|2[0-3]):[0-5][0-9]",
            "example": "13:30"
          },
          "end_time": {
            "maxLength": 5,
            "minLength": 0,
            "type": "string",
            "description": "End time of day in local time, the time zone is defined in the time_zone field of the Location, for example 19:45, valid until this time of the day. Same syntax as start_time. If end_time < start_time then the period wraps around to the next day. To stop at end of the day use: 00:00."
          },
          "start_date": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Start date in local time, the time zone is defined in the time_zone field of the Location, for example: 2015-12-24, valid from this day (inclusive).Regex: ([12][0-9]{3})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])",
            "example": "2023-12-24"
          },
          "end_date": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "End date in local time, the time zone is defined in the time_zone field of theLocation, for example: 2015-12-27, valid until this day (exclusive).Same syntax as start_date.",
            "example": "2023-12-27"
          },
          "min_kwh": {
            "type": "number",
            "description": "Minimum consumed energy in kWh, for example 20, valid from this amount of energy (inclusive) being used.",
            "example": 1
          },
          "max_kwh": {
            "type": "number",
            "description": "Maximum consumed energy in kWh, for example 50, valid until this amount of energy (exclusive) being used.",
            "example": 1
          },
          "min_current": {
            "type": "number",
            "description": "Sum of the minimum current (in Amperes) over all phases, for example 5. When the EV is charging with more than, or equal to, the defined amount of current, this TariffElement is/becomes active. If the charging current is or becomes lower, this TariffElement is not or no longer valid and becomes inactive. This describes NOT the minimum current over the entire Charging Session. This restriction can make a TariffElement become active when the charging current is above the defined value, but the TariffElement MUST no longer be active when the charging current drops below the defined value."
          },
          "max_current": {
            "type": "number",
            "description": "Sum of the maximum current (in Amperes) over all phases, for example 20. When the EV is charging with less than the defined amount of current, this TariffElement becomes/is active. If the charging current is or becomes higher, this TariffElement is not or no longer valid and becomes inactive. This describes NOT the maximum current over the entire Charging Session. This restriction can make a TariffElement become active when the charging current is below this value, but the TariffElement MUST no longer be active when the charging current raises above the defined value."
          },
          "min_power": {
            "type": "number",
            "description": "Minimum power in kW, for example 5. When the EV is charging with more than, or equal to, the defined amount of power, this TariffElement is/becomes active. If the charging power is or becomes lower, this TariffElement is not or no longer valid and becomes inactive. This describes NOT the minimum power over the entire Charging Session. This restriction can make a TariffElement become active when the charging power is above this value, but the TariffElement MUST no longer be active when the charging power drops below the defined value."
          },
          "max_power": {
            "type": "number",
            "description": "Maximum power in kW, for example 20. When the EV is charging with less than the defined amount of power, this TariffElement becomes/is active. If the charging power is or becomes higher, this TariffElement is not or no longer valid and becomes inactive. This describes NOT the maximum power over the entire Charging Session. This restriction can make a TariffElement become active when the charging power is below this value, but the TariffElement MUST no longer be active when the charging power raises above the defined value.",
            "example": 32
          },
          "min_duration": {
            "type": "integer",
            "description": "Minimum duration in seconds the Charging Session MUST last (inclusive). When the duration of a Charging Session is longer than the defined value, this TariffElement is or becomes active. Before that moment, this TariffElement is not yet active.",
            "format": "int32"
          },
          "max_duration": {
            "type": "integer",
            "description": "Maximum duration in seconds the Charging Session MUST last (exclusive). When the duration of a Charging Session is shorter than the defined value, this TariffElement is or becomes active. After that moment, this TariffElement is no longer active.",
            "format": "int32"
          },
          "day_of_week": {
            "type": "array",
            "description": "Which day(s) of the week this TariffElement is active.",
            "items": {
              "type": "string",
              "description": "Which day(s) of the week this TariffElement is active.",
              "enum": [
                "MONDAY",
                "TUESDAY",
                "WEDNESDAY",
                "THURSDAY",
                "FRIDAY",
                "SATURDAY",
                "SUNDAY"
              ]
            }
          }
        },
        "description": "These restrictions are not for the entire Charging Session. They only describe if and when a TariffElement becomes active or inactive during a Charging Session."
      },
      "Cdr": {
        "required": [
          "auth_method",
          "cdr_location",
          "cdr_token",
          "charging_periods",
          "country_code",
          "currency",
          "end_date_time",
          "id",
          "last_updated",
          "party_id",
          "start_date_time",
          "total_cost",
          "total_energy",
          "total_time"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "Currency of the CDR in ISO 4217 Code.",
            "example": "EUR"
          },
          "tariffs": {
            "type": "array",
            "description": "List of relevant Tariff Elements, see: Tariff. When relevant, a Free of Charge tariff should also be in this list, and point to a defined Free of Charge Tariff.",
            "items": {
              "$ref": "#/components/schemas/Tariff"
            }
          },
          "remark": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Optional remark, can be used to provide additional human readable information to the CDR, for example: reason why a transaction was stopped.",
            "example": "The cost of the electricity required to charge an EV is less than the cost to use petrol for a similar sized vehicle driving the same distance1. The cost will be lower if you charge your EV from your solar PV system or at free charging stations."
          },
          "credit": {
            "type": "boolean",
            "description": "When set to true, this is a Credit CDR, and the field credit_reference_id needs to be set as well."
          },
          "country_code": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "ISO-3166 alpha-2 country code of the CPO that 'owns' this CDR.",
            "example": "DE"
          },
          "party_id": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "CPO ID of the CPO that 'owns' this CDR (following the ISO-15118 standard).",
            "example": "ERG"
          },
          "id": {
            "maxLength": 39,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the CDR within the CPO’s platform (and suboperator platforms). This field is longer than the usual 36 characters to allow for credit CDRs to have something appended to the original ID. Normal (non-credit) CDRs SHALL only have an ID with a maximum length of 36.",
            "example": "12345"
          },
          "start_date_time": {
            "type": "string",
            "description": "Start timestamp of the charging session, or in-case of a reservation (before the start of a session) the start of the reservation.",
            "format": "date-time",
            "example": "2015-06-29T21:39:09Z"
          },
          "end_date_time": {
            "type": "string",
            "description": "The timestamp when the session was completed/finished, charging might have finished before the session ends, for example: EV is full, but parking cost also has to be paid.",
            "format": "date-time",
            "example": "2015-06-29T23:37:32Z"
          },
          "session_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Unique ID of the Session for which this CDR is sent. Is only allowed to be omitted when the CPO has not implemented the Sessions module or this CDR is the result of a reservation that never became a charging session, thus no OCPI Session.",
            "example": "59bff33b-595f-407a-ad42-6ea665ef2d74"
          },
          "cdr_token": {
            "$ref": "#/components/schemas/CdrToken"
          },
          "auth_method": {
            "type": "string",
            "description": "Method used for authentication.",
            "example": "WHITELIST",
            "enum": [
              "AUTH_REQUEST",
              "COMMAND",
              "WHITELIST"
            ]
          },
          "authorization_reference": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Reference to the authorization given by the eMSP. When the eMSP provided an authorization_reference in either: real-time authorization or StartSession, this field SHALL contain the same value. When different authorization_reference values have been given by the eMSP that are relevant to this Session, the last given value SHALL be used here.",
            "example": "40dbc1a6-3324-4424-a798-3a6e70e83bba"
          },
          "cdr_location": {
            "$ref": "#/components/schemas/CdrLocation"
          },
          "meter_id": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Identification of the Meter inside the Charge Point.",
            "example": "demo meter id"
          },
          "charging_periods": {
            "type": "array",
            "description": "List of Charging Periods that make up this charging session. A session consists of 1 or more periods, where each period has a different relevant Tariff.",
            "items": {
              "$ref": "#/components/schemas/ChargingPeriod"
            }
          },
          "signed_data": {
            "$ref": "#/components/schemas/SignedData"
          },
          "total_cost": {
            "$ref": "#/components/schemas/Price"
          },
          "total_fixed_cost": {
            "$ref": "#/components/schemas/Price"
          },
          "total_energy": {
            "type": "number",
            "description": "Total energy charged, in kWh."
          },
          "total_energy_cost": {
            "$ref": "#/components/schemas/Price"
          },
          "total_time": {
            "type": "number",
            "description": "Total duration of the charging session (including the duration of charging and not charging), in hours."
          },
          "total_time_cost": {
            "$ref": "#/components/schemas/Price"
          },
          "total_parking_time": {
            "type": "number",
            "description": "Total duration of the charging session where the EV was not charging (no energy was transferred between EVSE and EV), in hours."
          },
          "total_parking_cost": {
            "$ref": "#/components/schemas/Price"
          },
          "total_reservation_cost": {
            "$ref": "#/components/schemas/Price"
          },
          "invoice_reference_id": {
            "maxLength": 39,
            "minLength": 0,
            "type": "string",
            "description": "This field can be used to reference an invoice, that will later be send for this CDR. Making it easier to link a CDR to a given invoice. Maybe even group CDRs that will be on the same invoice."
          },
          "credit_reference_id": {
            "maxLength": 39,
            "minLength": 0,
            "type": "string",
            "description": "Is required to be set for a Credit CDR. This SHALL contain the id of the CDR for which this is a Credit CDR.",
            "example": "11ctt8q0y5tq0li8671wz3a5p8oe436bcmefr55"
          },
          "home_charging_compensation": {
            "type": "boolean",
            "description": "When set to true, this CDR is for a charging session using the home charger of the EV Driver for which the energy cost needs to be financially compensated to the EV Driver."
          },
          "last_updated": {
            "type": "string",
            "description": "Timestamp when this CDR was last updated (or created).",
            "format": "date-time",
            "example": "2021-03-19T14:11:43Z"
          }
        },
        "description": "The CDR object describes the charging session and its costs, how these costs are composed, etc.<br>The CDR object is different from the Session object. The Session object is dynamic as it reflects the current state of the chargingsession. The information is meant to be viewed by the driver while the charging session is ongoing.<br>"
      },
      "CdrDimension": {
        "required": [
          "type",
          "volume"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of CDR dimension.",
            "example": "RESERVATION_TIME",
            "enum": [
              "CURRENT",
              "ENERGY",
              "ENERGY_EXPORT",
              "ENERGY_IMPORT",
              "MAX_CURRENT",
              "MIN_CURRENT",
              "MAX_POWER",
              "MIN_POWER",
              "PARKING_TIME",
              "POWER",
              "RESERVATION_TIME",
              "STATE_OF_CHARGE",
              "TIME"
            ]
          },
          "volume": {
            "type": "number",
            "description": "Volume of the dimension consumed, measured according to the dimension type.",
            "example": 79.65
          }
        },
        "description": "List of relevant values for this charging period."
      },
      "CdrLocation": {
        "required": [
          "address",
          "city",
          "connector_format",
          "connector_id",
          "connector_power_type",
          "connector_standard",
          "coordinates",
          "country",
          "evse_id",
          "evse_uid",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 39,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the location within the CPO’s platform (and suboperator platforms). This field can never be changed, modified or renamed.",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Display name of the location.",
            "example": "Gent Zuid"
          },
          "address": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "Street/block name and house number if available.",
            "example": "F.Rooseveltlaan 3A"
          },
          "city": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "City or town.",
            "example": "Gent"
          },
          "state": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "State only to be used when relevant."
          },
          "country": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "ISO 3166-1 alpha-3 code for the country of this location.",
            "example": "BEL"
          },
          "coordinates": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "postal_code": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Postal code of the location.",
            "example": "9000"
          },
          "evse_uid": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the EVSE within the CPO’s platform (and suboperator platforms). For example a database unique ID or the actual EVSE ID. This field  can never be changed, modified or renamed. This is the technical identification of the EVSE, not to be used as human readable identification, use the field: evse_id for that.",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "evse_id": {
            "maxLength": 48,
            "minLength": 0,
            "type": "string",
            "description": "Compliant with the following specification for EVSE ID from eMI3 standard version V1.0 (http://emi3group.com/documents-links/) Part 2: business objects.",
            "example": "DE*ERG*E10001*1"
          },
          "connector_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Identifier of the connector within the EVSE.",
            "example": "BE*BEC*E041503003"
          },
          "connector_standard": {
            "type": "string",
            "description": "The standard of the installed connector.",
            "example": "TESLA_R",
            "enum": [
              "CHADEMO",
              "CHAOJI",
              "DOMESTIC_A",
              "DOMESTIC_B",
              "DOMESTIC_C",
              "DOMESTIC_D",
              "DOMESTIC_E",
              "DOMESTIC_F",
              "DOMESTIC_G",
              "DOMESTIC_H",
              "DOMESTIC_I",
              "DOMESTIC_J",
              "DOMESTIC_K",
              "DOMESTIC_L",
              "DOMESTIC_M",
              "DOMESTIC_N",
              "DOMESTIC_O",
              "GBT_AC",
              "GBT_DC",
              "IEC_60309_2_single_16",
              "IEC_60309_2_three_16",
              "IEC_60309_2_three_32",
              "IEC_60309_2_three_64",
              "IEC_62196_T1",
              "IEC_62196_T1_COMBO",
              "IEC_62196_T2",
              "IEC_62196_T2_COMBO",
              "IEC_62196_T3A",
              "IEC_62196_T3C",
              "NEMA_5_20",
              "NEMA_6_30",
              "NEMA_6_50",
              "NEMA_10_30",
              "NEMA_10_50",
              "NEMA_14_30",
              "NEMA_14_50",
              "PANTOGRAPH_BOTTOM_UP",
              "PANTOGRAPH_TOP_DOWN",
              "TESLA_R",
              "TESLA_S",
              "UNKNOWN"
            ]
          },
          "connector_format": {
            "type": "string",
            "description": "The format (socket/cable) of the installed connector.",
            "example": "CABLE",
            "enum": [
              "SOCKET",
              "CABLE"
            ]
          },
          "connector_power_type": {
            "type": "string",
            "description": "Connector power type",
            "example": "AC_2_PHASE_SPLIT",
            "enum": [
              "AC_1_PHASE",
              "AC_2_PHASE",
              "AC_2_PHASE_SPLIT",
              "AC_3_PHASE",
              "DC"
            ]
          }
        },
        "description": "The CdrLocation class contains only the relevant information from the Location object that is needed in a CDR."
      },
      "CdrResponseVersion221": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "The timestamp this message was generated",
            "format": "date-time",
            "example": "2024-03-19T14:11:43Z"
          },
          "data": {
            "$ref": "#/components/schemas/Cdr"
          },
          "status_code": {
            "type": "integer",
            "description": "The OCPI status code",
            "format": "int32",
            "example": 1000
          },
          "status_message": {
            "type": "string",
            "description": "An optional status message which may help when debugging",
            "example": "Success"
          }
        }
      },
      "CdrToken": {
        "required": [
          "contract_id",
          "country_code",
          "party_id",
          "type",
          "uid"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Unique ID by which this Token can be identified. This is the field used by the CPO’s system (RFID reader on the Charge Point) to identify this token. Currently, in most cases: type=RFID, this is the RFID hidden ID as read by the RFID reader, but that is not a requirement. If this is a <b>type=APP_USER</b> Token, it will be a unique, by the eMSP, generated ID.",
            "example": "LKnPKAYKvf"
          },
          "country_code": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "Country code of the MSP that 'owns' this Token.",
            "example": "DE"
          },
          "party_id": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "ID of the eMSP that 'owns' this Token.",
            "example": "ERG"
          },
          "type": {
            "type": "string",
            "description": "    The type of token\n    * <p>\n    * NOTE: The eMSP is RECOMMENDED to push Tokens with type: AD_HOC_USER or APP_USER with whitelist set to\n    * NEVER. Whitelists are very useful for RFID type Tokens, but the AD_HOC_USER/APP_USER Tokens are used to\n    * start Sessions from an App etc. so whitelisting them has no advantages.\n    * </p>\n",
            "example": "RFID",
            "enum": [
              "AD_HOC_USER",
              "APP_USER",
              "OTHER",
              "RFID"
            ]
          },
          "contract_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the EV driver contract token within the eMSP’s platform (and suboperator platforms). Recommended to follow the specification for eMA ID from eMI3 standard version V1.0 (http://emi3group.com/documents-links/) Part 2: business objects.",
            "example": "DE8ACC12E46L89"
          }
        },
        "description": "Token used to start this charging session, includes all the relevant information to identify the unique token."
      },
      "ChargingPeriod": {
        "required": [
          "dimensions",
          "start_date_time"
        ],
        "type": "object",
        "properties": {
          "dimensions": {
            "type": "array",
            "description": "List of relevant values for this charging period.",
            "items": {
              "$ref": "#/components/schemas/CdrDimension"
            }
          },
          "start_date_time": {
            "type": "string",
            "description": "Start timestamp of the charging period. A period ends when the next period starts. The last period ends when the session ends.",
            "format": "date-time"
          },
          "tariff_id": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Unique identifier of the Tariff that is relevant for this Charging Period. If not provided, no Tariff is relevant during this period.",
            "example": "901c4ba9-e275-4b2a-b0ed-3a1ac710b25c"
          }
        },
        "description": "A Charging Period consists of a start timestamp and a list of possible values that influence this period, for example: amount of energy charged this period, maximum current during this period etc."
      },
      "SignedData": {
        "required": [
          "encoding_method",
          "signed_values"
        ],
        "type": "object",
        "properties": {
          "url": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "URL that can be shown to an EV driver. This URL gives the EV driver the possibility to check the signed data from a charging session.",
            "example": "https://www.example.com/advertisement"
          },
          "encoding_method": {
            "type": "string",
            "description": "The name of the encoding used in the SignedData field. This is the name given to the encoding by a company or group of companies.",
            "example": "UTF-8"
          },
          "encoding_method_version": {
            "type": "integer",
            "description": "Version of the EncodingMethod (when applicable)",
            "format": "int32"
          },
          "public_key": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Public key used to sign the data, base64 encoded.",
            "example": "-----BEGIN RSA PUBLIC KEY-----\nMEgCQQCo9+BpMRYQ/dL3DS2CyJxRF+j6ctbT3/Qp84+KeFhnii7NT7fELilKUSnx\nS30WAvQCCo2yU1orfgqr41mM70MBAgMBAAE=\n-----END RSA PUBLIC KEY-----"
          },
          "signed_values": {
            "type": "array",
            "description": "One or more signed values.",
            "items": {
              "$ref": "#/components/schemas/SignedValue"
            }
          }
        },
        "description": "This class contains all the information of the signed data. Which encoding method is used, if needed, the public key and a list of signed values."
      },
      "SignedValue": {
        "required": [
          "plain_data",
          "signed_data"
        ],
        "type": "object",
        "properties": {
          "nature": {
            "type": "string",
            "description": "Nature of the value, in other words, the event this value belongs to.\nPossible values at moment of writing: \n- Start (value at the start of the Session)\n- End (signed value at the end of the Session)\n- Intermediate (signed values take during the Session, after Start, before End)\nOthers might be added later."
          },
          "plain_data": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "The unencoded string of data. The format of the content depends on the EncodingMethod field.",
            "example": "iu9daxlgjc1fn7l5qj8777t9qxduy1a93366psubpp3j9aeogh6p0quc8myofqaoqc7tibug9ivxza754qtzguq61tt8ugygqoxv3rzi7tfmms13jx50455h7z3c9tj11s2hh316ecrreqo9e6farf716vnhcs6wnoz7rn0umcktx2c2y8ggem1zkqa1tqlgtx7hd29qkyzu5izjlpyjyvj0a22lyerpljc9k32bexp1hfhpofnon3by09xnohrfxy9trraev0yihdelc53slaw4opz8jfi3pxqhksz3bkh2lcsvz7lon9hbuh4fty260qmo6f53vqfwco1ptwjqqby5gmzgqpq29knbfwg8qxkpmqwglyhu6zrtm5ghyn4ft4hqwhy444zhr2wjerg71ue8qa5tl2ur6k7hidp0wssta2d1coyl2nhfik3j75m2pho3yurirttasr2m977kcfr5h0vsxjlj0r02lxucu6hk9yfipwti4xeddymxni1p"
          },
          "signed_data": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Blob of signed data, base64 encoded. The format of the content depends on the EncodingMethod field.",
            "example": "}/x/j*}g9k^1axjfv{+91#w’dhuds’>”^`%{4>xw1!b7~!8w]awi:_0jv:`=^pf_q_7.f`<^9f^o$w.#qzmb(8$|!.mo^>_ixgea4{c{gfb:bu^f\\w}haj5(^djnbvy>z=!5o|m.\\”x0>|9p7*h~.1&;hl=z65)#o]q(x’/l^’/ne-vt<:a&#4y08]b.f@%te+85iw9dkvy@6ah$9[[;’ut:\\:y7p&;70l$s?[u)\\c9”]>k1{w~`ih*a;-1dv(=[?g!6!a/ma%”!*630_=^g’mf6e;<hy;k;^kny=#31c;>}’sh”’<^3!/’’$vw`u8{?4”akms+{egz<x>79{.7y%k.(x4@.*@t?|7e5kvt94/][p=qxl|_:z^]6&h$]m0dlx!^{>\\@@x@u.~ca?8^d{=vxr1#7gdt0`!qv0fwl9^::\\)]jv(n#?””z}$8_4#*fv!ld|n_r%u?>]=v(|i”e*blz//%h`\b!@d/0$+=izqi:$f(.dll.]ji@%2gq$1ds?"
          }
        },
        "description": "This class contains the signed and the plain/unsigned data. By decoding the data, the receiver can check if the content has not been altered."
      }
    },
    "examples": {
      "UNSORTABLE_COLUMN": {
        "value": "{\n  \"message\" : \"The entered sorting column is not sortable in ElasticSearch (Column is not a @Keyword).\",\n  \"errorCode\" : \"UNSORTABLE_COLUMN\"\n}"
      },
      "REST_STATUS_ELASTICSEARCH_RELATED": {
        "value": "{\n  \"message\" : \"RestStatusException related to ElasticSearch\",\n  \"errorCode\" : \"REST_STATUS_ELASTICSEARCH_RELATED\"\n}"
      },
      "PROCESSING_ERROR": {
        "value": "{\n  \"message\" : \"Error while processing the data\",\n  \"errorCode\" : \"PROCESSING_ERROR\"\n}"
      },
      "ACCESS_DENIED": {
        "value": "{\n  \"message\" : \"Access to route has been denied.\",\n  \"errorCode\" : \"ACCESS_DENIED\"\n}"
      },
      "INTERNAL_SERVER_ERROR": {
        "value": "{\n  \"message\" : \"An error occurred\",\n  \"errorCode\" : \"INTERNAL_SERVER_ERROR\"\n}"
      },
      "BAD_REQUEST": {
        "value": "{\n  \"message\" : \"Bad request\",\n  \"errorCode\" : \"BAD_REQUEST\"\n}"
      },
      "NOT_FOUND": {
        "value": "{\n  \"message\" : \"Requested object not found\",\n  \"errorCode\" : \"NOT_FOUND\"\n}"
      },
      "UNAUTHORIZED": {
        "value": "{\n  \"message\" : \"Unauthorized\",\n  \"errorCode\" : \"UNAUTHORIZED\"\n}"
      },
      "FORBIDDEN": {
        "value": "{\n  \"message\" : \"Forbidden\",\n  \"errorCode\" : \"FORBIDDEN\"\n}"
      },
      "UNAUTHENTICATED": {
        "value": "{\n  \"message\" : \"Unauthenticated\",\n  \"errorCode\" : \"UNAUTHENTICATED\"\n}"
      },
      "METHOD_ARGUMENT_TYPE_MISMATCH": {
        "value": "{\n  \"message\" : \"Failed to convert value to required type\",\n  \"errorCode\" : \"METHOD_ARGUMENT_TYPE_MISMATCH\"\n}"
      },
      "MAXIMUM_UPLOAD_SIZE_EXCEEDED": {
        "value": "{\n  \"message\" : \"Maximum upload size exceeded\",\n  \"errorCode\" : \"MAXIMUM_UPLOAD_SIZE_EXCEEDED\"\n}"
      },
      "METHOD_NOT_ALLOWED": {
        "value": "{\n  \"message\" : \"Request method is not supported\",\n  \"errorCode\" : \"METHOD_NOT_ALLOWED\"\n}"
      },
      "MISSING_REQUEST_PARAMETER": {
        "value": "{\n  \"message\" : \"Required request parameter is not present\",\n  \"errorCode\" : \"MISSING_REQUEST_PARAMETER\"\n}"
      },
      "MISSING_REQUEST_PART": {
        "value": "{\n  \"message\" : \"Required request part is not present\",\n  \"errorCode\" : \"MISSING_REQUEST_PART\"\n}"
      },
      "UNSUPPORTED_MEDIA_TYPE": {
        "value": "{\n  \"message\" : \"Media type is not supported\",\n  \"errorCode\" : \"UNSUPPORTED_MEDIA_TYPE\"\n}"
      },
      "LIST_CONTAINS_NULL_VALUES": {
        "value": "{\n  \"message\" : \"List contains null values\",\n  \"errorCode\" : \"LIST_CONTAINS_NULL_VALUES\"\n}"
      },
      "REMOTE_CALL_FAILED": {
        "value": "{\n  \"message\" : \"Call to remote API returned an error response\",\n  \"errorCode\" : \"REMOTE_CALL_FAILED\"\n}"
      },
      "ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"Object already exists\",\n  \"errorCode\" : \"ALREADY_EXISTS\"\n}"
      },
      "SOFTLY_DELETED": {
        "value": "{\n  \"message\" : \"Object is softly deleted\",\n  \"errorCode\" : \"SOFTLY_DELETED\"\n}"
      },
      "WRONG_SORTING_COLUMN": {
        "value": "{\n  \"message\" : \"The entered sorting column name does not exist.\",\n  \"errorCode\" : \"WRONG_SORTING_COLUMN\"\n}"
      },
      "COULD_NOT_EXTRACT_ERROR_FROM_RESPONSE": {
        "value": "{\n  \"message\" : \"Could not extract error from the response.\",\n  \"errorCode\" : \"COULD_NOT_EXTRACT_ERROR_FROM_RESPONSE\"\n}"
      },
      "FAILED_TO_DELETE_TEMPORARY_FILE": {
        "value": "{\n  \"message\" : \"Failed to delete temporary file\",\n  \"errorCode\" : \"FAILED_TO_DELETE_TEMPORARY_FILE\"\n}"
      },
      "TENANT_ID_MUST_BE_SINGLETON": {
        "value": "{\n  \"message\" : \"Tenant ID must be a single value parameter\",\n  \"errorCode\" : \"TENANT_ID_MUST_BE_SINGLETON\"\n}"
      },
      "TENANT_ID_MUST_BE_INTEGER": {
        "value": "{\n  \"message\" : \"Tenant ID must be integer\",\n  \"errorCode\" : \"TENANT_ID_MUST_BE_INTEGER\"\n}"
      },
      "INVALID_PROPERTY": {
        "value": "{\n  \"message\" : \"Requested property is not valid.\",\n  \"errorCode\" : \"INVALID_PROPERTY\"\n}"
      },
      "USER_NOT_FOUND": {
        "value": "{\n  \"message\" : \"The entered user does not exist.\",\n  \"errorCode\" : \"USER_NOT_FOUND\"\n}"
      },
      "USER_ALREADY_HAS_ACCESS": {
        "value": "{\n  \"message\" : \"The user already has access\",\n  \"errorCode\" : \"USER_ALREADY_HAS_ACCESS\"\n}"
      },
      "USER_ACCESS_REQUEST_NOT_FOUND": {
        "value": "{\n  \"message\" : \"The entered user access request does not exist.\",\n  \"errorCode\" : \"USER_ACCESS_REQUEST_NOT_FOUND\"\n}"
      },
      "VERSION_FOR_TOKEN_A_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[OCPI-GATEWAY] Version for the specific token A is not found.\",\n  \"errorCode\" : \"VERSION_FOR_TOKEN_A_NOT_FOUND\"\n}"
      },
      "URL_ALREADY_IN_DATABASE": {
        "value": "{\n  \"message\" : \"[OCPI-GATEWAY] The provided URL already exists.\",\n  \"errorCode\" : \"URL_ALREADY_IN_DATABASE\"\n}"
      },
      "URL_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[OCPI-GATEWAY] Customer url info for the specific url in not found.\",\n  \"errorCode\" : \"URL_NOT_FOUND\"\n}"
      },
      "URL_ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"[OCPI-GATEWAY] One of the provided URLs already exists.\",\n  \"errorCode\" : \"URL_ALREADY_EXISTS\"\n}"
      },
      "FILE_IS_NOT_IMAGE": {
        "value": "{\n  \"message\" : \"The file isn't image.\",\n  \"errorCode\" : \"FILE_IS_NOT_IMAGE\"\n}"
      },
      "FORMAT_NOT_SUPPORTED": {
        "value": "{\n  \"message\" : \"The logo format not supported\",\n  \"errorCode\" : \"FORMAT_NOT_SUPPORTED\"\n}"
      },
      "EXTENSION_MISSING": {
        "value": "{\n  \"message\" : \"The logo extension missing\",\n  \"errorCode\" : \"EXTENSION_MISSING\"\n}"
      }
    },
    "headers": {
      "api-category": {
        "description": "CPO Services",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "display-name": {
        "description": "CPO OCPI Gateway",
        "required": false,
        "schema": {
          "type": "string"
        }
      }
    }
  }
}