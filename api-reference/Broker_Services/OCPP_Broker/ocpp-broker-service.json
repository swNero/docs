{
  "openapi": "3.0.1",
  "info": {
    "title": "ocpp-broker-service",
    "description": "A service used for manipulating with charging stations via OCPP protocol as well as storing and processing charging station relevant information",
    "contact": {
      "name": "P3 digital services GmbH",
      "email": "contact@energystacks.io"
    },
    "version": "v1"
  },
  "servers": [
    {
      "url": "https://baseurl/ocpp-broker/v1",
      "description": "Generated server url"
    }
  ],
  "tags": [
    {
      "name": "[OCPP 1.6] Core Management",
      "description": "Basic Charging Station functionality"
    },
    {
      "name": "[OCPP 1.6] Smart Charging",
      "description": "Support for basic Smart Charging, for instance using control pilot."
    },
    {
      "name": "[OCPP 1.6] Remote Trigger",
      "description": "Support for remote triggering of Charging Station initiated messages"
    },
    {
      "name": "[OCPP 2.0.1] Remote Control",
      "description": "Use cases for remote control management from the CSMS"
    },
    {
      "name": "[OCPP 2.0.1] Provisioning",
      "description": "All the functionalities that help a CSO provision their Charging Stations, allowing them on their\nnetwork and retrieving configuration information from these Charging Stations. Additionally, it consists of the ability to retrieve\ninformation about the configuration of Charging Stations, make changes to the configuration etc. This chapter also covers resetting\na Charging Station and migrating to a new NetworkConnectionProfile."
    },
    {
      "name": "[OCPP 1.6] Data Transfer",
      "description": "Vendor specific data transfer"
    },
    {
      "name": "[OCPP 1.6] Firmware Management",
      "description": "Support for firmware update management and diagnostic log file download."
    },
    {
      "name": "[OCPP 1.6] Reservation",
      "description": "Support for reservation of a Charge Point."
    },
    {
      "name": "[OCPP 2.0.1] Reservation",
      "description": "The reservation functionality enables an EV Driver to make a\nreservation of a Charging Station/EVSE, ensuring an available Connector at a Charging Station when he arrives."
    },
    {
      "name": "[OCPP 2.0.1] Security",
      "description": "The security requirements for the OCPP protocol."
    },
    {
      "name": "[OCPP 1.6] Local Auth List Management",
      "description": "Features to manage the local authorization list in Charge Points."
    }
  ],
  "paths": {
    "/shadow/connectors/{identityKey}/{connectorId}": {
      "get": {
        "tags": [
          "Charging Station Connector Shadow"
        ],
        "summary": "Get Charging Station Shadow Connector",
        "description": "Get Charging Station Shadow Connector with the connector details",
        "operationId": "getConnectorDetails",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connectorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerConnectorShadow"
                }
              }
            }
          },
          "404": {
            "description": "Charging Station Shadow Connector not found"
          }
        }
      }
    },
    "/locations/{uuid}": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Get Location by UUID",
        "description": "Retrieves Location by UUID",
        "operationId": "getLocationByUuid",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "Location UUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerLocationResponse"
                }
              }
            }
          },
          "404": {
            "description": "Location with the specified UUID not found"
          }
        }
      },
      "put": {
        "tags": [
          "Location"
        ],
        "summary": "Update a Location",
        "description": "Update Location with the specific Location UUID",
        "operationId": "updateLocation",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "Location UUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BrokerLocationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerLocationResponse"
                }
              }
            }
          },
          "404": {
            "description": "Location with the specified UUID not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Location"
        ],
        "summary": "Delete a Location",
        "description": "Delete a Location based on specified Location UUID. If location contains at least one charging station the deletion process is aborted",
        "operationId": "deleteLocation",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "Location UUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageDto"
                }
              }
            }
          },
          "404": {
            "description": "Location with the specified UUID not found"
          },
          "409": {
            "description": "Failed to delete Location which has Charging Station/s bound to it"
          }
        }
      }
    },
    "/csms/{uuid}": {
      "get": {
        "tags": [
          "CSMS"
        ],
        "summary": "Get one specific CSMS",
        "description": "Get one specific CSMS, searched by its uuid",
        "operationId": "getCsms",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Csms"
                }
              }
            }
          },
          "404": {
            "description": "CSMS not found"
          }
        }
      },
      "put": {
        "tags": [
          "CSMS"
        ],
        "summary": "Update a CSMS",
        "description": "Update an existing CSMS",
        "operationId": "updateCsms",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The UUID of the CSMS",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CsmsUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Csms"
                }
              }
            }
          },
          "400": {
            "description": "CSMS cannot be updated. Default CSMS cannot change to not default"
          },
          "404": {
            "description": "CSMS not found"
          },
          "409": {
            "description": "CSMS cannot be updated. Provided display name is not unique"
          }
        }
      },
      "delete": {
        "tags": [
          "CSMS"
        ],
        "summary": "Delete a CSMS",
        "description": "Delete CSMS if there are no charging stations connected to it and if it is not  the default one",
        "operationId": "deleteCsms",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The UUID of the CSMS",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageDto"
                }
              }
            }
          },
          "400": {
            "description": "Default CSMS can be deleted only when it is the only one that exists and with no connected CS to it"
          },
          "404": {
            "description": "CSMS not found"
          },
          "409": {
            "description": "CSMS cannot be deleted when there are connected charging stations to it"
          }
        }
      },
      "patch": {
        "tags": [
          "CSMS"
        ],
        "summary": "Updates CSMS credentials",
        "description": "Updates credentials to null for existing CSMS",
        "operationId": "updateCsmsCredentials",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The UUID of the CSMS",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CsmsPatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageDto"
                }
              }
            }
          },
          "400": {
            "description": "No changes were requested."
          },
          "404": {
            "description": "CSMS not found"
          }
        }
      }
    },
    "/chargingstations/{identityKey}": {
      "get": {
        "tags": [
          "Charging Station"
        ],
        "summary": "Get Charging Station",
        "description": "Returns Charging Station with the specific Charging Station Identity Key",
        "operationId": "getChargingStation",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerChargingStationResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charging Station not found"
          }
        }
      },
      "put": {
        "tags": [
          "Charging Station"
        ],
        "summary": "Update Charging Station",
        "description": "Update Charging Station with the specific Charging Station Identity Key",
        "operationId": "updateChargingStation",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BrokerChargingStationUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerChargingStationResponse"
                }
              }
            }
          },
          "404": {
            "description": "Csms not found"
          },
          "409": {
            "description": "Charging Station already exists"
          }
        }
      },
      "delete": {
        "tags": [
          "Charging Station"
        ],
        "summary": "Delete Charging Station",
        "description": "Delete Charging Station with the specific Charging Station Identity Key",
        "operationId": "deleteChargingStation",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Charging Station not found"
          }
        }
      }
    },
    "/chargingstations/{identityKey}/disconnect": {
      "put": {
        "tags": [
          "Charging Station"
        ],
        "summary": "Disconnect Charging Station",
        "description": "Disconnects an active OCPP connection of the charging station with the specified Charging Station Identity Key",
        "operationId": "disconnectChargingStation",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageDto"
                }
              }
            }
          },
          "404": {
            "description": "Charging Station not found"
          }
        }
      }
    },
    "/management/v201/chargingstations/{identityKey}/update-firmware": {
      "post": {
        "tags": [
          "[OCPP 2.0.1] Firmware Management"
        ],
        "summary": "Update firmware",
        "description": "Sends a update firmware request to the local controller",
        "operationId": "updateFirmware",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFirmwareRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateFirmwareResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          }
        }
      }
    },
    "/management/v201/chargingstations/{identityKey}/unpublish-firmware": {
      "post": {
        "tags": [
          "[OCPP 2.0.1] Firmware Management"
        ],
        "summary": "Unpublish firmware",
        "description": "Sends an unpublish firmware request to the local controller",
        "operationId": "unpublishFirmware",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnpublishFirmwareRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnpublishFirmwareResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          }
        }
      }
    },
    "/management/v201/chargingstations/{identityKey}/unlock-connector": {
      "post": {
        "tags": [
          "[OCPP 2.0.1] Remote Control"
        ],
        "summary": "Unlock Connector",
        "description": "Sends an unlock connector request to the charging station",
        "operationId": "unlockConnector",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnlockConnectorRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnlockConnectorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          }
        }
      }
    },
    "/management/v201/chargingstations/{identityKey}/trigger-message": {
      "post": {
        "tags": [
          "[OCPP 2.0.1] Remote Control"
        ],
        "summary": "Trigger message",
        "operationId": "triggerMessage",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TriggerMessageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TriggerMessageResponse"
                }
              }
            }
          }
        }
      }
    },
    "/management/v201/chargingstations/{identityKey}/set-variables": {
      "post": {
        "tags": [
          "[OCPP 2.0.1] Provisioning"
        ],
        "summary": "Set variables",
        "description": "Sends a set variables request to the charging station",
        "operationId": "setVariables",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetVariablesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetVariablesResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          }
        }
      }
    },
    "/management/v201/chargingstations/{identityKey}/set-variable-monitoring": {
      "post": {
        "tags": [
          "[OCPP 2.0.1] Diagnostics"
        ],
        "summary": "Set variable monitoring",
        "description": "Sends a set variable monitoring request to the Charging Station",
        "operationId": "setVariableMonitoring",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetVariableMonitoringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetVariableMonitoringResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          }
        }
      }
    },
    "/management/v201/chargingstations/{identityKey}/set-network-connection-profile": {
      "post": {
        "tags": [
          "[OCPP 2.0.1] Provisioning"
        ],
        "summary": "Set network connection profile",
        "description": "Sends a SetNetworkProfileRequest to the charging station",
        "operationId": "setNetworkConnectionProfile",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetNetworkProfileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetNetworkProfileResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          }
        }
      }
    },
    "/management/v201/chargingstations/{identityKey}/set-monitoring-level": {
      "post": {
        "tags": [
          "[OCPP 2.0.1] Diagnostics"
        ],
        "summary": "Set monitoring level",
        "description": "Sends a set monitoring level request to the Charging Station",
        "operationId": "setMonitoringLevel",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetMonitoringLevelRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetMonitoringLevelResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          }
        }
      }
    },
    "/management/v201/chargingstations/{identityKey}/set-monitoring-base": {
      "post": {
        "tags": [
          "[OCPP 2.0.1] Diagnostics"
        ],
        "summary": "Set monitoring report",
        "description": "Sends a set monitoring base request to the Charging Station",
        "operationId": "setMonitoringBase",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetMonitoringBaseRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetMonitoringBaseResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          }
        }
      }
    },
    "/management/v201/chargingstations/{identityKey}/set-display-message": {
      "post": {
        "tags": [
          "[OCPP 2.0.1] Display Message"
        ],
        "summary": "Set display message",
        "description": "Sends a set display message request to the Charging Station",
        "operationId": "setDisplayMessage",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetDisplayMessageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetDisplayMessageResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          }
        }
      }
    },
    "/management/v201/chargingstations/{identityKey}/set-charging-profile": {
      "post": {
        "tags": [
          "[OCPP 2.0.1] Smart Charging"
        ],
        "summary": "Set charging profile",
        "description": "Sends a set charging profile request to the Charging Station",
        "operationId": "setChargingProfile",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetChargingProfileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetChargingProfileResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          }
        }
      }
    },
    "/management/v201/chargingstations/{identityKey}/send-local-list": {
      "post": {
        "tags": [
          "[OCPP 2.0.1] Local Authorization List Management"
        ],
        "summary": "Send local list",
        "description": "Send a local list request to the Charging Station",
        "operationId": "sendLocalList",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendLocalListRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendLocalListResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          }
        }
      }
    },
    "/management/v201/chargingstations/{identityKey}/reset": {
      "post": {
        "tags": [
          "[OCPP 2.0.1] Provisioning"
        ],
        "summary": "Reset",
        "description": "Sends a reset request to the charging station",
        "operationId": "reset",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResetResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          }
        }
      }
    },
    "/management/v201/chargingstations/{identityKey}/reserve": {
      "post": {
        "tags": [
          "[OCPP 2.0.1] Reservation"
        ],
        "summary": "Reserve now",
        "description": "Reserve an (unspecified) EVSE at a Charging Station",
        "operationId": "reserve",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReserveNowRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReserveNowResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          }
        }
      }
    },
    "/management/v201/chargingstations/{identityKey}/request-stop-transaction": {
      "post": {
        "tags": [
          "[OCPP 2.0.1] Smart Charging"
        ],
        "summary": "Request stop transaction",
        "description": "Sends a request stop transaction to the Charging Station",
        "operationId": "requestStopTransaction",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestStopTransactionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStopTransactionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          }
        }
      }
    },
    "/management/v201/chargingstations/{identityKey}/request-start-transaction": {
      "post": {
        "tags": [
          "[OCPP 2.0.1] Smart Charging"
        ],
        "summary": "Request start transaction",
        "description": "Sends a request start transaction to the Charging Station",
        "operationId": "requestStartTransaction",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestStartTransactionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStartTransactionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          }
        }
      }
    },
    "/management/v201/chargingstations/{identityKey}/publish-firmware": {
      "post": {
        "tags": [
          "[OCPP 2.0.1] Firmware Management"
        ],
        "summary": "Publish firmware",
        "description": "Sends a publish firmware request to the local controller",
        "operationId": "publishFirmware",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublishFirmwareRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublishFirmwareResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          }
        }
      }
    },
    "/management/v201/chargingstations/{identityKey}/install-certificate": {
      "post": {
        "tags": [
          "[OCPP 2.0.1] ISO 15118 Certificate Management"
        ],
        "summary": "Install certificate",
        "description": "Sends a install certificate request to the Charging Station",
        "operationId": "installCertificate",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstallCertificateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstallCertificateResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          }
        }
      }
    },
    "/management/v201/chargingstations/{identityKey}/get-variables": {
      "post": {
        "tags": [
          "[OCPP 2.0.1] Provisioning"
        ],
        "summary": "Get variables",
        "description": "Sends a get variables request to the charging station",
        "operationId": "getVariables",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetVariablesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetVariablesResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          }
        }
      }
    },
    "/management/v201/chargingstations/{identityKey}/get-transaction-status": {
      "post": {
        "tags": [
          "[OCPP 2.0.1] Transaction"
        ],
        "summary": "Get transaction status",
        "description": "Sends a get transaction status request to the Charging Station",
        "operationId": "getTransactionStatus",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetTransactionStatusRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransactionStatusResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          }
        }
      }
    },
    "/management/v201/chargingstations/{identityKey}/get-monitoring-report": {
      "post": {
        "tags": [
          "[OCPP 2.0.1] Diagnostics"
        ],
        "summary": "Get monitoring report",
        "description": "Sends a get monitoring report request to the Charging Station",
        "operationId": "getMonitoringReport",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetMonitoringReportRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMonitoringReportResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          }
        }
      }
    },
    "/management/v201/chargingstations/{identityKey}/get-log": {
      "post": {
        "tags": [
          "[OCPP 2.0.1] Diagnostics"
        ],
        "summary": "Get log",
        "description": "Sends a get log request to the Charging Station",
        "operationId": "getLog",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetLogRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLogResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          }
        }
      }
    },
    "/management/v201/chargingstations/{identityKey}/get-local-list-version": {
      "post": {
        "tags": [
          "[OCPP 2.0.1] Local Authorization List Management"
        ],
        "summary": "Get local list version",
        "description": "Send a get local list version request to the Charging Station",
        "operationId": "getLocalListVersion",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLocalListVersionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          }
        }
      }
    },
    "/management/v201/chargingstations/{identityKey}/get-installed-certificate-ids": {
      "post": {
        "tags": [
          "[OCPP 2.0.1] ISO 15118 Certificate Management"
        ],
        "summary": "Get installed certificate IDs",
        "description": "Sends a get installed certificate IDs request to the Charging Station",
        "operationId": "getInstalledCertificateIds",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetInstalledCertificateIdsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInstalledCertificateIdsResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          }
        }
      }
    },
    "/management/v201/chargingstations/{identityKey}/get-display-messages": {
      "post": {
        "tags": [
          "[OCPP 2.0.1] Display Message"
        ],
        "summary": "Get display messages",
        "description": "Sends a get display messages request to the Charging Station",
        "operationId": "getDisplayMessages",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetDisplayMessagesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDisplayMessagesResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          }
        }
      }
    },
    "/management/v201/chargingstations/{identityKey}/get-custom-report": {
      "post": {
        "tags": [
          "[OCPP 2.0.1] Provisioning"
        ],
        "summary": "Get custom report",
        "description": "Sends a get custom report request to the charging station",
        "operationId": "getCustomReport",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetReportRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetReportResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          }
        }
      }
    },
    "/management/v201/chargingstations/{identityKey}/get-composite-schedule": {
      "post": {
        "tags": [
          "[OCPP 2.0.1] Smart Charging"
        ],
        "summary": "Get composite schedule",
        "description": "Sends a get composite schedule request to the Charging Station",
        "operationId": "getCompositeSchedule",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetCompositeScheduleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCompositeScheduleResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          }
        }
      }
    },
    "/management/v201/chargingstations/{identityKey}/get-charging-profiles": {
      "post": {
        "tags": [
          "[OCPP 2.0.1] Smart Charging"
        ],
        "summary": "Get charging profiles",
        "description": "Sends a get charging profiles request to the Charging Station",
        "operationId": "getChargingProfiles",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetChargingProfilesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetChargingProfilesResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          }
        }
      }
    },
    "/management/v201/chargingstations/{identityKey}/get-base-report": {
      "post": {
        "tags": [
          "[OCPP 2.0.1] Provisioning"
        ],
        "summary": "Get base report",
        "description": "Send a get base report request to the charging station",
        "operationId": "getBaseReport",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetBaseReportRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBaseReportResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          }
        }
      }
    },
    "/management/v201/chargingstations/{identityKey}/delete-certificate": {
      "post": {
        "tags": [
          "[OCPP 2.0.1] ISO 15118 Certificate Management"
        ],
        "summary": "Delete certificate",
        "description": "Sends a delete certificate request to the Charging Station",
        "operationId": "deleteCertificate",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteCertificateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteCertificateResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          }
        }
      }
    },
    "/management/v201/chargingstations/{identityKey}/data-transfer": {
      "post": {
        "tags": [
          "[OCPP 2.0.1] Data Transfer"
        ],
        "summary": "Data Transfer",
        "description": "Sends a data transfer request to the Charging Station",
        "operationId": "dataTransfer",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataTransferRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataTransferResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          }
        }
      }
    },
    "/management/v201/chargingstations/{identityKey}/customer-information": {
      "post": {
        "tags": [
          "[OCPP 2.0.1] Diagnostics"
        ],
        "summary": "Customer information",
        "description": "Sends a customer information request to the Charging Station",
        "operationId": "customerInformation",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerInformationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerInformationResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          }
        }
      }
    },
    "/management/v201/chargingstations/{identityKey}/cost-updated": {
      "post": {
        "tags": [
          "[OCPP 2.0.1] Tariff and Cost"
        ],
        "summary": "Cost updated",
        "description": "Sends a cost updated request to the Charging Station",
        "operationId": "costUpdated",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CostUpdatedRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CostUpdatedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          }
        }
      }
    },
    "/management/v201/chargingstations/{identityKey}/clear-variable-monitoring": {
      "post": {
        "tags": [
          "[OCPP 2.0.1] Diagnostics"
        ],
        "summary": "Clear variable monitoring",
        "description": "Sends a clear variable monitoring request to the Charging Station",
        "operationId": "clearVariableMonitoring",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClearVariableMonitoringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClearVariableMonitoringResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          }
        }
      }
    },
    "/management/v201/chargingstations/{identityKey}/clear-display-message": {
      "post": {
        "tags": [
          "[OCPP 2.0.1] Display Message"
        ],
        "summary": "Clear display message",
        "description": "Sends a clear display message request to the Charging Station",
        "operationId": "clearDisplayMessage",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClearDisplayMessageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClearDisplayMessageResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          }
        }
      }
    },
    "/management/v201/chargingstations/{identityKey}/clear-charging-profile": {
      "post": {
        "tags": [
          "[OCPP 2.0.1] Smart Charging"
        ],
        "summary": "Clear charging profile",
        "description": "Sends a clear charging profile request to the Charging Station",
        "operationId": "clearChargingProfile",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClearChargingProfileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClearChargingProfileResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          }
        }
      }
    },
    "/management/v201/chargingstations/{identityKey}/clear-cache": {
      "post": {
        "tags": [
          "[OCPP 2.0.1] Authorization"
        ],
        "summary": "Clear cache",
        "description": "Send a clear cache request to the Charging Station",
        "operationId": "clearCache",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClearCacheResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          }
        }
      }
    },
    "/management/v201/chargingstations/{identityKey}/change-availability": {
      "post": {
        "tags": [
          "[OCPP 2.0.1] Availability"
        ],
        "summary": "Change availability",
        "description": "Reserve an (unspecified) EVSE at a Charging Station",
        "operationId": "changeAvailability",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAvailabilityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReserveNowResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          }
        }
      }
    },
    "/management/v201/chargingstations/{identityKey}/certificate-signed": {
      "post": {
        "tags": [
          "[OCPP 2.0.1] Security"
        ],
        "summary": "Certificate signed",
        "description": "Sends a CertificateSignedRequest to the Charging Station",
        "operationId": "certificateSigned",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CertificateSignedRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateSignedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          }
        }
      }
    },
    "/management/v201/chargingstations/{identityKey}/cancel-reservation": {
      "post": {
        "tags": [
          "[OCPP 2.0.1] Reservation"
        ],
        "summary": "Cancel reservation",
        "description": "Cancel a reservation on a Charging Station",
        "operationId": "cancelReservation",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelReservationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelReservationResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charging station not found"
          }
        }
      }
    },
    "/management/v16/chargingstations/{identityKey}/updateFirmware": {
      "post": {
        "tags": [
          "[OCPP 1.6] Firmware Management"
        ],
        "summary": "Update Firmware",
        "description": "Sends an update firmware request to the charging station",
        "operationId": "updateFirmware_1",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFirmwareReq"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateFirmwareConfirmation"
                }
              }
            }
          },
          "504": {
            "description": "RPC Timeout. The charging station did not respond in time."
          }
        }
      }
    },
    "/management/v16/chargingstations/{identityKey}/unlockConnector": {
      "post": {
        "tags": [
          "[OCPP 1.6] Core Management"
        ],
        "summary": "Unlock Connector",
        "description": "Sends an unlock connector request to the charging station",
        "operationId": "unlockConnector_1",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnlockConnectorReq"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnlockConnectorConfirmation"
                }
              }
            }
          },
          "404": {
            "description": "Requested Charging station not found"
          },
          "504": {
            "description": "RPC Timeout. The charging station did not respond in time."
          }
        }
      }
    },
    "/management/v16/chargingstations/{identityKey}/triggerMessage": {
      "post": {
        "tags": [
          "[OCPP 1.6] Remote Trigger"
        ],
        "summary": "Trigger message",
        "operationId": "triggerMessage_1",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TriggerMessageReq"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TriggerMessageConfirmation"
                }
              }
            }
          },
          "504": {
            "description": "RPC Timeout. The charging station did not respond in time."
          }
        }
      }
    },
    "/management/v16/chargingstations/{identityKey}/setChargingProfile": {
      "post": {
        "tags": [
          "[OCPP 1.6] Smart Charging"
        ],
        "summary": "Set Charging Profile",
        "description": "Sends a set charging profile request to the charging station",
        "operationId": "setChargingProfile_1",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetChargingProfileReq"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetChargingProfileConfirmation"
                }
              }
            }
          },
          "504": {
            "description": "RPC Timeout. The charging station did not respond in time."
          }
        }
      }
    },
    "/management/v16/chargingstations/{identityKey}/reset": {
      "post": {
        "tags": [
          "[OCPP 1.6] Core Management"
        ],
        "summary": "Reset",
        "description": "Sends a reset request to the charging station",
        "operationId": "reset_1",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetReq"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResetConfirmation"
                }
              }
            }
          },
          "404": {
            "description": "Requested Charging station not found"
          },
          "504": {
            "description": "RPC Timeout. The charging station did not respond in time."
          }
        }
      }
    },
    "/management/v16/chargingstations/{identityKey}/reserveNow": {
      "post": {
        "tags": [
          "[OCPP 1.6] Reservation"
        ],
        "summary": "Reserve now",
        "operationId": "reserveNow",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReserveNowReq"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReserveNowConfirmation"
                }
              }
            }
          },
          "504": {
            "description": "RPC Timeout. The charging station did not respond in time."
          }
        }
      }
    },
    "/management/v16/chargingstations/{identityKey}/remoteStopTransaction": {
      "post": {
        "tags": [
          "[OCPP 1.6] Core Management"
        ],
        "summary": "Remote Stop Transaction",
        "description": "Sends a remote stop request to the charging station",
        "operationId": "remoteStopTransaction",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoteStopTransactionReq"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoteStopTransactionConfirmation"
                }
              }
            }
          },
          "404": {
            "description": "Requested Charging station not found"
          },
          "504": {
            "description": "RPC Timeout. The charging station did not respond in time."
          }
        }
      }
    },
    "/management/v16/chargingstations/{identityKey}/remoteStartTransaction": {
      "post": {
        "tags": [
          "[OCPP 1.6] Core Management"
        ],
        "summary": "Remote Start Transaction",
        "description": "Sends a remote start request to the charging station",
        "operationId": "remoteStartTransaction",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoteStartTransactionReq"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoteStartTransactionConfirmation"
                }
              }
            }
          },
          "404": {
            "description": "Requested Charging station not found"
          },
          "504": {
            "description": "RPC Timeout. The charging station did not respond in time."
          }
        }
      }
    },
    "/management/v16/chargingstations/{identityKey}/getDiagnostics": {
      "post": {
        "tags": [
          "[OCPP 1.6] Firmware Management"
        ],
        "summary": "Diagnostics request",
        "description": "Sends a get diagnostics request to the charging station",
        "operationId": "getDiagnostics",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetDiagnosticsReq"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDiagnosticsConfirmation"
                }
              }
            }
          },
          "504": {
            "description": "RPC Timeout. The charging station did not respond in time."
          }
        }
      }
    },
    "/management/v16/chargingstations/{identityKey}/getCompositeSchedule": {
      "post": {
        "tags": [
          "[OCPP 1.6] Smart Charging"
        ],
        "summary": "Get Composite Schedule",
        "description": "Sends a get composite schedule request to the charging station",
        "operationId": "getCompositeSchedule_1",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetCompositeScheduleReq"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCompositeScheduleConfirmation"
                }
              }
            }
          },
          "504": {
            "description": "RPC Timeout. The charging station did not respond in time."
          }
        }
      }
    },
    "/management/v16/chargingstations/{identityKey}/dataTransfer": {
      "post": {
        "tags": [
          "[OCPP 1.6] Data Transfer"
        ],
        "summary": "Data transfer",
        "description": "Sends vendor specific data transfers to the charging station",
        "operationId": "dataTransfer_1",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataTransferReq"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataTransferConfirmation"
                }
              }
            }
          },
          "504": {
            "description": "RPC Timeout. The charging station did not respond in time."
          }
        }
      }
    },
    "/management/v16/chargingstations/{identityKey}/configuration": {
      "get": {
        "tags": [
          "[OCPP 1.6] Core Management"
        ],
        "summary": "Get configuration",
        "description": "Request the configuration settings from the charging station",
        "operationId": "getConfiguration",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetConfigurationConfirmation"
                }
              }
            }
          },
          "404": {
            "description": "Requested Charging station not found"
          },
          "504": {
            "description": "RPC Timeout. The charging station did not respond in time."
          }
        }
      },
      "post": {
        "tags": [
          "[OCPP 1.6] Core Management"
        ],
        "summary": "Change configuration",
        "description": "Sends a change configuration request to the charging station",
        "operationId": "changeConfiguration",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeConfigurationReq"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeConfigurationConfirmation"
                }
              }
            }
          },
          "404": {
            "description": "Requested Charging station not found"
          },
          "504": {
            "description": "RPC Timeout. The charging station did not respond in time."
          }
        }
      }
    },
    "/management/v16/chargingstations/{identityKey}/clearChargingProfile": {
      "post": {
        "tags": [
          "[OCPP 1.6] Smart Charging"
        ],
        "summary": "Clear Charging Profile",
        "description": "Sends a clear charging profile request to the charging station",
        "operationId": "clearChargingProfile_1",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClearChargingProfileReq"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClearChargingProfileConfirmation"
                }
              }
            }
          },
          "504": {
            "description": "RPC Timeout. The charging station did not respond in time."
          }
        }
      }
    },
    "/management/v16/chargingstations/{identityKey}/clear-cache": {
      "post": {
        "tags": [
          "[OCPP 1.6] Core Management"
        ],
        "summary": "Clear cache",
        "description": "Sends a clear cache request to the charging station",
        "operationId": "clearCache_1",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClearCacheConfirmation"
                }
              }
            }
          },
          "404": {
            "description": "Requested Charging station not found"
          },
          "504": {
            "description": "RPC Timeout. The charging station did not respond in time."
          }
        }
      }
    },
    "/management/v16/chargingstations/{identityKey}/changeAvailability": {
      "post": {
        "tags": [
          "[OCPP 1.6] Core Management"
        ],
        "summary": "Change availability",
        "description": "Changes the availability of the charging station or a single EVSE",
        "operationId": "changeAvailability_1",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAvailabilityReq"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeAvailabilityConfirmation"
                }
              }
            }
          },
          "404": {
            "description": "Requested Charging station not found"
          },
          "504": {
            "description": "RPC Timeout. The charging station did not respond in time."
          }
        }
      }
    },
    "/management/v16/chargingstations/{identityKey}/cancelReservation": {
      "post": {
        "tags": [
          "[OCPP 1.6] Reservation"
        ],
        "summary": "Cancel reservation",
        "description": "Cancels a reservation at the specified charge point",
        "operationId": "cancelReservation_1",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelReservationReq"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelReservationConfirmation"
                }
              }
            }
          },
          "504": {
            "description": "RPC Timeout. The charging station did not respond in time."
          }
        }
      }
    },
    "/locations": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Get all locations",
        "description": "Retrieves all locations",
        "operationId": "getAllLocations",
        "parameters": [
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BrokerLocationResponse"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "Add a new Location",
        "description": "Creates a new location and save it to the database",
        "operationId": "createLocation",
        "parameters": [
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BrokerLocationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerLocationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/locations/{uuid}/chargingstations": {
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "Add Charging Stations to a Location",
        "description": "Add Charging Stations to a Location",
        "operationId": "addChargingStations",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "Location UUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identityKeys",
            "in": "query",
            "description": "List of charging station identity keys",
            "required": true,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid one or more identity keys"
          },
          "404": {
            "description": "Location with the specified UUID not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Location"
        ],
        "summary": "Remove charging stations from a Location",
        "description": "Remove charging stations from a Location",
        "operationId": "removeChargingStations",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "Location UUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identityKeys",
            "in": "query",
            "description": "List of charging station identity keys",
            "required": true,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessageDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid one or more identity keys"
          },
          "404": {
            "description": "Location with the specified UUID not found"
          }
        }
      }
    },
    "/csms": {
      "get": {
        "tags": [
          "CSMS"
        ],
        "summary": "Get all CSMS",
        "description": "Return a list of all CSMS.",
        "operationId": "getAllCsms",
        "parameters": [
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Csms"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "CSMS"
        ],
        "summary": "Create CSMS",
        "description": "Create a new CSMS and save it to database",
        "operationId": "createCsms",
        "parameters": [
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CsmsCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Csms"
                }
              }
            }
          },
          "400": {
            "description": "The given password does not match with the confirmation password"
          },
          "409": {
            "description": "CSMS with the specified display name already exists"
          }
        }
      }
    },
    "/chargingstations": {
      "get": {
        "tags": [
          "Charging Station"
        ],
        "summary": "Get all Charging Stations",
        "description": "Returns a list of all Charging Station which are registered in the broker",
        "operationId": "getAllChargingStations",
        "parameters": [
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BrokerChargingStationResponse"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Charging Station"
        ],
        "summary": "Add Charging Station",
        "description": "Returns the added Charging Station",
        "operationId": "createChargingStation",
        "parameters": [
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BrokerChargingStationCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerChargingStationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "409": {
            "description": "Charging Station already exists"
          }
        }
      }
    },
    "/shadow/transactions": {
      "get": {
        "tags": [
          "Charging Station Transaction Shadow"
        ],
        "summary": "Get all transactions",
        "description": "Request the list of all transactions",
        "operationId": "getAllChargingStationTransactions",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "includeMeterValues",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeTransactionData",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BrokerTransaction"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/shadow/transactions/{identityKey}": {
      "get": {
        "tags": [
          "Charging Station Transaction Shadow"
        ],
        "summary": "Get transactions for identity",
        "description": "Request the list of transactions for the specified charging station",
        "operationId": "getChargingStationTransactions",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "includeMeterValues",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeTransactionData",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BrokerTransaction"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/shadow/transactions/{identityKey}/metervalues/{transactionId}": {
      "get": {
        "tags": [
          "Charging Station Transaction Shadow"
        ],
        "summary": "Get meter values for transaction",
        "description": "Request the list of meter values for the specified transaction",
        "operationId": "getMeterValuesForTransaction",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OcppMeterValue"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/shadow/transactions/search": {
      "get": {
        "tags": [
          "Charging Station Transaction Shadow"
        ],
        "summary": "Search Broker transactions",
        "description": "Returns the given page and number of BrokerTransaction results on page, based on given filters",
        "operationId": "searchChargingStationTransactions",
        "parameters": [
          {
            "name": "pageable",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          },
          {
            "name": "from",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "finished",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "term",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeMeterValues",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeTransactionData",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BrokerTransaction"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/shadow/securityevents": {
      "get": {
        "tags": [
          "Charging Station Security Event Shadow"
        ],
        "summary": "Get security events",
        "description": "Request the list of all security events",
        "operationId": "getSecurityEvents",
        "parameters": [
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChargingStationShadowSecurityEvent"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/shadow/securityevents/{identityKey}": {
      "get": {
        "tags": [
          "Charging Station Security Event Shadow"
        ],
        "summary": "Get security events for identity",
        "description": "Request the list of security events for the specified charging station",
        "operationId": "getSecurityEventsForChargingStation",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChargingStationShadowSecurityEvent"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/shadow/connectors/{evseId}": {
      "get": {
        "tags": [
          "Charging Station Connector Shadow"
        ],
        "summary": "Get connector details",
        "description": "Get connector details using EVSE_ID",
        "operationId": "getConnectorDetailsByEvseId",
        "parameters": [
          {
            "name": "evseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerConnectorShadow"
                }
              }
            }
          },
          "404": {
            "description": "Charging Station Shadow Connector not found"
          }
        }
      }
    },
    "/shadow/connectors/exists/{evseId}": {
      "get": {
        "tags": [
          "Charging Station Connector Shadow"
        ],
        "summary": "Check if a connector with provided EVSE ID exists",
        "description": "If connector with the provided EVSE ID exists returns true. If it doesn't, returns false.",
        "operationId": "getConnectorExistsByEvseId",
        "parameters": [
          {
            "name": "evseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation"
          }
        }
      }
    },
    "/shadow/chargingstations/{identityKey}/variables": {
      "get": {
        "tags": [
          "Charging Station Configuration Shadow"
        ],
        "summary": "[OCPP 2.0.1] Get variables",
        "description": "Request the variables from the charging station",
        "operationId": "getVariableShadow",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BrokerChargingStationShadowVariable"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/shadow/chargingstations/{identityKey}/configuration": {
      "get": {
        "tags": [
          "Charging Station Configuration Shadow"
        ],
        "summary": "[OCPP 1.6] Get configuration",
        "description": "Request the configuration settings from the charging station",
        "operationId": "getConfigurationShadow",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BrokerChargingStationShadowConfiguration"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/management/v16/chargingstations/{identityKey}/getLocalListVersion": {
      "get": {
        "tags": [
          "[OCPP 1.6] Local Auth List Management"
        ],
        "summary": "Get local list version",
        "description": "Request a local list version from the charging station",
        "operationId": "getLocalListVersion_1",
        "parameters": [
          {
            "name": "identityKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLocalListVersionConfirmation"
                }
              }
            }
          },
          "504": {
            "description": "RPC Timeout. The charging station did not respond in time."
          }
        }
      }
    },
    "/csms/{uuid}/status": {
      "get": {
        "tags": [
          "CSMS"
        ],
        "summary": "Get CSMS Connectivity Status",
        "description": "Return CSMS Connectivity Status",
        "operationId": "getCsmsStatusByUuid",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The UUID of the CSMS",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "The connectivity status of a Csms.",
                  "enum": [
                    "ONLINE",
                    "OFFLINE"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Csms not found"
          }
        }
      }
    },
    "/csms/by-display-name/{displayName}": {
      "get": {
        "tags": [
          "CSMS"
        ],
        "summary": "Get one specific CSMS by display name",
        "description": "Get one specific CSMS, searched by its display name",
        "operationId": "getCsmsByDisplayName",
        "parameters": [
          {
            "name": "displayName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {},
            "example": "12345"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Csms"
                }
              }
            }
          },
          "404": {
            "description": "CSMS not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "SuccessMessageDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          }
        }
      },
      "BrokerChargingStationReduced": {
        "type": "object",
        "properties": {
          "identityKey": {
            "type": "string",
            "description": "The Identity Key of the Charging Station",
            "example": "ACE1234"
          },
          "chargingStationName": {
            "type": "string",
            "description": "This contains the name of the Charging Station, if no name given: “<Model Name> + <Charger ID>",
            "example": "WallBox NG Pro 21107439"
          },
          "chargingStationModel": {
            "type": "string",
            "description": "This contains a value that identifies the model of the Charging Station",
            "example": "WallBox NG Pro"
          },
          "dateCreated": {
            "type": "string",
            "description": "This contains the creation date and time of the  of Charging Station",
            "format": "date-time",
            "example": "2024-03-19T14:11:43Z"
          },
          "online": {
            "type": "boolean",
            "description": "Indicates if the Charging Station is online."
          },
          "csmsConnected": {
            "type": "boolean",
            "description": "Indicates if the CSMS is connected."
          },
          "csmsUuid": {
            "type": "string",
            "description": "This contains the UUID of the CSMS.",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "shadow": {
            "$ref": "#/components/schemas/BrokerChargingStationShadow"
          },
          "coordinates": {
            "$ref": "#/components/schemas/GeoLocation"
          }
        },
        "description": "Location charging stations"
      },
      "BrokerLocationResponse": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Location uuid"
          },
          "name": {
            "type": "string",
            "description": "Location name"
          },
          "address": {
            "type": "string",
            "description": "Location address"
          },
          "city": {
            "type": "string",
            "description": "Location city"
          },
          "postalCode": {
            "type": "string",
            "description": "Location postal code"
          },
          "state": {
            "type": "string",
            "description": "Location state"
          },
          "country": {
            "type": "string",
            "description": "Location ISO 3166-1 alpha-3 country code"
          },
          "coordinates": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "chargingStations": {
            "type": "array",
            "description": "Location charging stations",
            "items": {
              "$ref": "#/components/schemas/BrokerChargingStationReduced"
            }
          }
        }
      },
      "GeoLocation": {
        "required": [
          "latitude",
          "longitude"
        ],
        "type": "object",
        "properties": {
          "latitude": {
            "type": "string",
            "description": "Latitude of the point in decimal degree. Decimal separator: '.', Regex: -?[0-9]{1,2}\\.[0-9]{5,7}",
            "example": "50.770774"
          },
          "longitude": {
            "type": "string",
            "description": "Longitude of the point in decimal degree. Decimal separator: '.' Regex: -?[0-9]{1,3}\\.[0-9]{5,7}",
            "example": "-126.104965"
          }
        },
        "description": "This class defines the geo location of the Charge Point. The geodetic system to be used is WGS 84."
      },
      "BrokerLocationRequest": {
        "required": [
          "coordinates",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Location name"
          },
          "address": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "Location address"
          },
          "city": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "Location city"
          },
          "postalCode": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Location postal code"
          },
          "state": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "Location state"
          },
          "country": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "Location ISO 3166-1 alpha-3 country code"
          },
          "coordinates": {
            "$ref": "#/components/schemas/GeoLocation"
          }
        }
      },
      "Csms": {
        "required": [
          "csmsUrl",
          "displayName",
          "isCsmsCredentialsUsed",
          "isDefault",
          "uuid"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Unique Id of the CSMS, used for external identifier.",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "displayName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Unique CSMS display name",
            "example": "EnergyStacks CSMS"
          },
          "csmsUrl": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "CSMS URL",
            "example": "wss://csms.energystacks.io/ocpp/"
          },
          "isDefault": {
            "type": "boolean",
            "description": "Identifies if the current CSMS is the default one or not",
            "example": false
          },
          "username": {
            "type": "string",
            "description": "The user name of the CSMS credentials",
            "example": "user"
          },
          "password": {
            "type": "string",
            "description": "The password of the CSMS credentials",
            "example": "Pass@123"
          },
          "ocppProtocol": {
            "type": "string",
            "description": "Defines the OCPP protocol version which is supported by the CSMS in case only one version is supported. Will be used for protocol version translation",
            "enum": [
              "V_15",
              "V_16",
              "V_20",
              "V_201"
            ]
          },
          "isCsmsCredentialsUsed": {
            "type": "boolean",
            "description": "Identifies whether the CSMS credentials are going to be used or not."
          }
        }
      },
      "CsmsUpdateRequest": {
        "required": [
          "csmsUrl",
          "displayName",
          "isCsmsCredentialsUsed",
          "isDefault"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Unique CSMS display name",
            "example": "EnergyStacks CSMS_2"
          },
          "csmsUrl": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^(ws:\\/\\/|wss:\\/\\/)+[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z0-9]{2,63}(:[0-9]{1,5})?(\\/.*)?$",
            "type": "string",
            "description": "CSMS URL",
            "example": "wss://csms.energystacks.io/ocpp/"
          },
          "isDefault": {
            "type": "boolean",
            "description": "Identifies if the current CSMS is the default one or not",
            "example": false
          },
          "username": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The user name of the CSMS credentials",
            "example": "user"
          },
          "password": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The password of the CSMS credentials",
            "example": "Pass@123"
          },
          "confirmPassword": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The confirmation password of the CSMS credentials",
            "example": "Pass@123"
          },
          "ocppProtocol": {
            "type": "string",
            "description": "Defines the OCPP protocol version which is supported by the CSMS in case only one version is supported. Will be used for protocol version translation",
            "enum": [
              "V_15",
              "V_16",
              "V_20",
              "V_201"
            ]
          },
          "isCsmsCredentialsUsed": {
            "type": "boolean",
            "description": "Identifies whether the CSMS credentials are going to be used or not."
          }
        }
      },
      "BrokerChargingStationResponse": {
        "required": [
          "csmsUuid",
          "identityKey"
        ],
        "type": "object",
        "properties": {
          "identityKey": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "The Identity Key of the Charging Station",
            "example": "ACE1234"
          },
          "chargingStationName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "This contains the name of the Charging Station, if no name given: “<Model Name> + <Charger ID>",
            "example": "WallBox NG Pro 21107439"
          },
          "chargingStationModel": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "This contains a value that identifies the model of the Charging Station",
            "example": "WallBox NG Pro"
          },
          "dateCreated": {
            "type": "string",
            "description": "This contains the creation date and time of the  of Charging Station",
            "format": "date-time",
            "example": "2024-03-19T14:11:43Z"
          },
          "online": {
            "type": "boolean",
            "description": "Indicates if the Charging Station is online."
          },
          "csmsConnected": {
            "type": "boolean",
            "description": "Indicates if the CSMS is connected."
          },
          "csmsUuid": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "This contains the UUID of the CSMS.",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "shadow": {
            "$ref": "#/components/schemas/BrokerChargingStationShadow"
          },
          "coordinates": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "location": {
            "$ref": "#/components/schemas/BrokerLocationReduced"
          }
        }
      },
      "BrokerLocationReduced": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Location uuid"
          },
          "name": {
            "type": "string",
            "description": "Location name"
          }
        },
        "description": "Charging station location"
      },
      "BrokerChargingStationUpdateRequest": {
        "required": [
          "csmsUuid"
        ],
        "type": "object",
        "properties": {
          "chargingStationModel": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "The model of the Charging Station",
            "example": "WallBox NG Pro"
          },
          "chargingStationName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The name of the Charging Station if no name given: “<Model Name> + <Charger ID>“",
            "example": "WallBox NG Pro 21107439"
          },
          "csmsUuid": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "The UUID of the csms",
            "example": "123e4567-e89b-42d3-a456-426614174000"
          },
          "coordinates": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "locationUuid": {
            "type": "string",
            "description": "Uuid of charging site/location."
          }
        }
      },
      "OcppStatusInfoType": {
        "required": [
          "reasonCode"
        ],
        "type": "object",
        "properties": {
          "reasonCode": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "Required. A predefined code for the reason why the status is returned in this response. The string is case-insensitive."
          },
          "additionalInfo": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Optional. Additional text to provide detailed information."
          }
        },
        "description": "Optional. Detailed status information."
      },
      "UpdateFirmwareResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Required. This field indicates whether the Charging Station was able to accept the request.",
            "enum": [
              "Accepted",
              "Rejected",
              "AcceptedCanceled",
              "InvalidCertificate",
              "RevokedCertificate"
            ]
          },
          "statusInfo": {
            "$ref": "#/components/schemas/OcppStatusInfoType"
          }
        }
      },
      "OcppFirmwareType": {
        "required": [
          "location",
          "retrieveDateTime"
        ],
        "type": "object",
        "properties": {
          "location": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Required. URI defining the origin of the firmware."
          },
          "retrieveDateTime": {
            "type": "string",
            "description": "Required. Date and time at which the firmware shall be retrieved.",
            "format": "date-time"
          },
          "installDateTime": {
            "type": "string",
            "description": "Optional. Date and time at which the firmware shall be installed.",
            "format": "date-time"
          },
          "signingCertificate": {
            "maxLength": 5500,
            "minLength": 0,
            "type": "string",
            "description": "Optional. Certificate with which the firmware was signed. PEM encoded X.509 certificate."
          },
          "signature": {
            "maxLength": 800,
            "minLength": 0,
            "type": "string",
            "description": "Optional. Base64 encoded firmware signature."
          }
        },
        "description": "Required. Specifies the firmware to be updated on the Charging Station."
      },
      "UpdateFirmwareRequest": {
        "required": [
          "firmware",
          "requestId"
        ],
        "type": "object",
        "properties": {
          "retries": {
            "type": "integer",
            "description": "Optional. This specifies how many times Charging Station must try to download the firmware before giving up. If this field is not present, it is left to Charging Station to decide how many times it wants to retry.",
            "format": "int32"
          },
          "retryInterval": {
            "type": "integer",
            "description": "Optional. The interval in seconds after which a retry may be attempted. If this field is not present, it is left to Charging Station to decide how long to wait between attempts.",
            "format": "int32"
          },
          "requestId": {
            "type": "integer",
            "description": "Required. The Id of this request",
            "format": "int32"
          },
          "firmware": {
            "$ref": "#/components/schemas/OcppFirmwareType"
          }
        }
      },
      "UnpublishFirmwareResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Required. Indicates whether the Local Controller succeeded in unpublishing the firmware.",
            "enum": [
              "DownloadOngoing",
              "NoFirmware",
              "Unpublished"
            ]
          }
        }
      },
      "UnpublishFirmwareRequest": {
        "required": [
          "checksum"
        ],
        "type": "object",
        "properties": {
          "checksum": {
            "pattern": "^([a-zA-Z0-9*\\-_=:+|@.]){0,32}$",
            "type": "string",
            "description": "Required. The MD5 checksum over the entire firmware file as a hexadecimal string of length 32."
          }
        }
      },
      "UnlockConnectorResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Required. This indicates whether the Charging Station has unlocked the connector.",
            "enum": [
              "Unlocked",
              "UnlockFailed",
              "OngoingAuthorizedTransaction",
              "UnknownConnector"
            ]
          },
          "statusInfo": {
            "$ref": "#/components/schemas/OcppStatusInfoType"
          }
        }
      },
      "UnlockConnectorRequest": {
        "required": [
          "connectorId",
          "evseId"
        ],
        "type": "object",
        "properties": {
          "evseId": {
            "type": "integer",
            "description": "Required. This contains the identifier of the EVSE for which a connector needs to be unlocked.",
            "format": "int32"
          },
          "connectorId": {
            "type": "integer",
            "description": "Required. This contains the identifier of the connector that needs to be unlocked.",
            "format": "int32"
          }
        }
      },
      "TriggerMessageResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Required. Indicates whether the Charging Station will send the requested notification or not.",
            "enum": [
              "Accepted",
              "Rejected",
              "NotImplemented"
            ]
          },
          "statusInfo": {
            "$ref": "#/components/schemas/OcppStatusInfoType"
          }
        }
      },
      "OcppEVSEType": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Required. EVSE Identifier. This contains a number (> 0) designating an EVSE of the Charging Station.",
            "format": "int32"
          },
          "connectorId": {
            "type": "integer",
            "description": "Optional. An id to designate a specific connector (on an EVSE) by connector index number.",
            "format": "int32"
          }
        },
        "description": "Specifies the EVSE when component is located at EVSE level, also specifies the connector when component is located at Connector level."
      },
      "TriggerMessageRequest": {
        "required": [
          "requestedMessage"
        ],
        "type": "object",
        "properties": {
          "requestedMessage": {
            "type": "string",
            "description": "Required. Type of message to be triggered.",
            "enum": [
              "BootNotification",
              "LogStatusNotification",
              "FirmwareStatusNotification",
              "Heartbeat",
              "MeterValues",
              "SignChargingStationCertificate",
              "SignV2GCertificate",
              "StatusNotification",
              "TransactionEvent",
              "SignCombinedCertificate",
              "PublishFirmwareStatusNotification"
            ]
          },
          "evse": {
            "$ref": "#/components/schemas/OcppEVSEType"
          }
        }
      },
      "OcppComponentType": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "pattern": "^([a-zA-Z0-9*\\-_=:+|@.]){0,50}$",
            "type": "string",
            "description": "Name of the component. Name should be taken from the list of standardized component names whenever possible. Case Insensitive. strongly advised to use Camel Case.",
            "example": "SampledDataCtrlr"
          },
          "instance": {
            "pattern": "^([a-zA-Z0-9*\\-_=:+|@.]){0,50}$",
            "type": "string",
            "description": "Name of instance in case the component exists as multiple instances. Case Insensitive. strongly advised to use Camel Case."
          },
          "evse": {
            "$ref": "#/components/schemas/OcppEVSEType"
          }
        },
        "description": "Required. Component for which the Variable is requested."
      },
      "OcppSetVariableResultType": {
        "required": [
          "attributeStatus",
          "component",
          "variable"
        ],
        "type": "object",
        "properties": {
          "attributeType": {
            "type": "string",
            "description": "Type of attribute: Actual, Target, MinSet, MaxSet. Default is Actual when omitted.",
            "example": "Actual",
            "enum": [
              "Actual",
              "Target",
              "MinSet",
              "MaxSet"
            ]
          },
          "attributeStatus": {
            "type": "string",
            "description": "Result status of setting the variable.",
            "example": "Accepted",
            "enum": [
              "Accepted",
              "Rejected",
              "UnknownComponent",
              "UnknownVariable",
              "NotSupportedAttributeType",
              "RebootRequired"
            ]
          },
          "component": {
            "$ref": "#/components/schemas/OcppComponentType"
          },
          "variable": {
            "$ref": "#/components/schemas/OcppVariableType"
          },
          "attributeStatusInfo": {
            "$ref": "#/components/schemas/OcppStatusInfoType"
          }
        },
        "description": "List of result statuses per Component-Variable"
      },
      "OcppVariableType": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "pattern": "^([a-zA-Z0-9*\\-_=:+|@.]){0,50}$",
            "type": "string",
            "description": "Required. Name of the variable. Name should be taken from the list of standardized variable names whenever possible. Case Insensitive. strongly advised to use Camel Case."
          },
          "instance": {
            "pattern": "^([a-zA-Z0-9*\\-_=:+|@.]){0,50}$",
            "type": "string",
            "description": "Optional. Name of instance in case the variable exists as multiple instances. Case Insensitive. strongly advised to use Camel Case."
          }
        },
        "description": "Required. Variable for which status is returned."
      },
      "SetVariablesResponse": {
        "required": [
          "setVariableResult"
        ],
        "type": "object",
        "properties": {
          "setVariableResult": {
            "type": "array",
            "description": "List of result statuses per Component-Variable",
            "items": {
              "$ref": "#/components/schemas/OcppSetVariableResultType"
            }
          }
        }
      },
      "OcppSetVariableDataType": {
        "required": [
          "attributeValue",
          "component",
          "variable"
        ],
        "type": "object",
        "properties": {
          "attributeType": {
            "type": "string",
            "description": "Optional. Type of attribute: Actual, Target, MinSet, MaxSet. Default is Actual when omitted.",
            "enum": [
              "Actual",
              "Target",
              "MinSet",
              "MaxSet"
            ]
          },
          "attributeValue": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Required. Value to be assigned to attribute of variable. The value is allowed to be an empty string (\"\"). The Configuration Variable ConfigurationValueSize can be used to limit SetVariableData.attributeValue and VariableCharacteristics.valueList. The max size of these values will always remain equal."
          },
          "component": {
            "$ref": "#/components/schemas/OcppComponentType"
          },
          "variable": {
            "$ref": "#/components/schemas/OcppVariableType"
          }
        },
        "description": "List of Component-Variable pairs and attribute values to set"
      },
      "SetVariablesRequest": {
        "required": [
          "setVariableData"
        ],
        "type": "object",
        "properties": {
          "setVariableData": {
            "type": "array",
            "description": "List of Component-Variable pairs and attribute values to set",
            "items": {
              "$ref": "#/components/schemas/OcppSetVariableDataType"
            }
          }
        }
      },
      "OcppSetMonitoringResultType": {
        "required": [
          "component",
          "severity",
          "status",
          "type",
          "variable"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Optional. Id given to the VariableMonitor by the Charging Station. The Id is only returned when status is accepted. Installed VariableMonitors should have unique id’s but the id’s of removed Installed monitors should have unique id’s but the id’s of removed monitors MAY be reused.",
            "format": "int32"
          },
          "status": {
            "type": "string",
            "description": "Required. Status is OK if a value could be returned. Otherwise this will indicate the reason why a value could not be returned.",
            "enum": [
              "Accepted",
              "UnknownComponent",
              "UnknownVariable",
              "UnsupportedMonitorType",
              "Rejected",
              "Duplicate"
            ]
          },
          "type": {
            "type": "string",
            "description": "Required. The type of this monitor, e.g. a threshold, delta or periodic monitor.",
            "enum": [
              "UpperThreshold",
              "LowerThreshold",
              "Delta",
              "Periodic",
              "PeriodicClockAligned"
            ]
          },
          "severity": {
            "maximum": 9,
            "minimum": 0,
            "type": "integer",
            "description": "Required. The severity that will be assigned to an event\n     * that is triggered by this monitor. The severity range is 0-9,\n     * with 0 as the highest and 9 as the lowest severity level.\n     * The severity levels have the following meaning:\n     * 0-Danger\n     * Indicates lives are potentially in danger. Urgent attention\n     * is needed and action should be taken immediately.\n     * 1-Hardware Failure\n     * Indicates that the Charging Station is unable to continue\n     * regular operations due to Hardware issues. Action is\n     * required.\n     * 2-System Failure\n     * Indicates that the Charging Station is unable to continue\n     * regular operations due to software or minor hardware\n     * issues. Action is required.\n     * 3-Critical\n     * Indicates a critical error. Action is required.\n     * 4-Error\n     * Indicates a non-urgent error. Action is required.\n     * 5-Alert\n     * Indicates an alert event. Default severity for any type of\n     * monitoring event.\n     * 6-Warning\n     * Indicates a warning event. Action may be required.\n     * 7-Notice\n     * Indicates an unusual event. No immediate action is\n     * required.\n     * 8-Informational\n     * Indicates a regular operational event. May be used for\n     * reporting, measuring throughput, etc. No action is\n     * required.\n     * 9-Debug\n     * Indicates information useful to developers for debugging,\n     * not useful during operations.",
            "format": "int32"
          },
          "component": {
            "$ref": "#/components/schemas/OcppComponentType"
          },
          "variable": {
            "$ref": "#/components/schemas/OcppVariableType"
          },
          "statusInfo": {
            "$ref": "#/components/schemas/OcppStatusInfoType"
          }
        },
        "description": "Required. List of result statuses per monitor."
      },
      "SetVariableMonitoringResponse": {
        "required": [
          "setMonitoringResult"
        ],
        "type": "object",
        "properties": {
          "setMonitoringResult": {
            "type": "array",
            "description": "Required. List of result statuses per monitor.",
            "items": {
              "$ref": "#/components/schemas/OcppSetMonitoringResultType"
            }
          }
        }
      },
      "OcppSetMonitoringDataType": {
        "required": [
          "component",
          "severity",
          "type",
          "value",
          "variable"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Optional. An id SHALL only be given to replace an existing monitor. The Charging Station handles the generation of id’s for new monitors.",
            "format": "int32"
          },
          "transaction": {
            "type": "boolean",
            "description": "Optional. Monitor only active when a transaction is ongoing on a component relevant to this transaction. Default = false."
          },
          "value": {
            "type": "number",
            "description": "Required. Value for threshold or delta monitoring. For Periodic or PeriodicClockAligned this is the interval in seconds.",
            "format": "float"
          },
          "type": {
            "type": "string",
            "description": "Required. The type of this monitor, e.g. a threshold, delta or periodic monitor.",
            "enum": [
              "UpperThreshold",
              "LowerThreshold",
              "Delta",
              "Periodic",
              "PeriodicClockAligned"
            ]
          },
          "severity": {
            "maximum": 9,
            "minimum": 0,
            "type": "integer",
            "description": "Required. The severity that will be assigned to an event\n     * that is triggered by this monitor. The severity range is 0-9,\n     * with 0 as the highest and 9 as the lowest severity level.\n     * The severity levels have the following meaning:\n     * 0-Danger\n     * Indicates lives are potentially in danger. Urgent attention\n     * is needed and action should be taken immediately.\n     * 1-Hardware Failure\n     * Indicates that the Charging Station is unable to continue\n     * regular operations due to Hardware issues. Action is\n     * required.\n     * 2-System Failure\n     * Indicates that the Charging Station is unable to continue\n     * regular operations due to software or minor hardware\n     * issues. Action is required.\n     * 3-Critical\n     * Indicates a critical error. Action is required.\n     * 4-Error\n     * Indicates a non-urgent error. Action is required.\n     * 5-Alert\n     * Indicates an alert event. Default severity for any type of\n     * monitoring event.\n     * 6-Warning\n     * Indicates a warning event. Action may be required.\n     * 7-Notice\n     * Indicates an unusual event. No immediate action is\n     * required.\n     * 8-Informational\n     * Indicates a regular operational event. May be used for\n     * reporting, measuring throughput, etc. No action is\n     * required.\n     * 9-Debug\n     * Indicates information useful to developers for debugging,\n     * not useful during operations.",
            "format": "int32"
          },
          "component": {
            "$ref": "#/components/schemas/OcppComponentType"
          },
          "variable": {
            "$ref": "#/components/schemas/OcppVariableType"
          }
        },
        "description": "Required. List of MonitoringData containing monitoring settings."
      },
      "SetVariableMonitoringRequest": {
        "required": [
          "setMonitoringData"
        ],
        "type": "object",
        "properties": {
          "setMonitoringData": {
            "type": "array",
            "description": "Required. List of MonitoringData containing monitoring settings.",
            "items": {
              "$ref": "#/components/schemas/OcppSetMonitoringDataType"
            }
          }
        }
      },
      "SetNetworkProfileResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Required. Result of operation.",
            "enum": [
              "Accepted",
              "Rejected",
              "Failed"
            ]
          },
          "statusInfo": {
            "$ref": "#/components/schemas/OcppStatusInfoType"
          }
        }
      },
      "OcppAPNType": {
        "required": [
          "apn",
          "apnAuthentication"
        ],
        "type": "object",
        "properties": {
          "apn": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Required. The Access Point Name as an URL."
          },
          "apnUserName": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "Optional. APN username."
          },
          "apnPassword": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "Optional. APN Password."
          },
          "simPin": {
            "type": "integer",
            "description": "Optional. SIM card pin code.",
            "format": "int32"
          },
          "preferredNetwork": {
            "pattern": "^([a-zA-Z0-9*\\-_=:+|@.]){0,6}$",
            "type": "string",
            "description": "Optional. Preferred network, written as MCC and MNC concatenated. See note."
          },
          "useOnlyPreferredNetwork": {
            "type": "boolean",
            "description": "Optional. Default: false. Use only the preferred Network, do not dial in when not available. See Note."
          },
          "apnAuthentication": {
            "type": "string",
            "description": "Required. Authentication method.",
            "enum": [
              "CHAP",
              "NONE",
              "PAP",
              "AUTO"
            ]
          }
        },
        "description": "Optional. Collection of configuration data needed to make a data-connection over a cellular network."
      },
      "OcppNetworkConnectionProfileType": {
        "required": [
          "messageTimeout",
          "ocppCsmsUrl",
          "ocppInterface",
          "ocppTransport",
          "ocppVersion",
          "securityProfile"
        ],
        "type": "object",
        "properties": {
          "ocppVersion": {
            "type": "string",
            "description": "Required. Defines the OCPP version used for this communication function.",
            "enum": [
              "OCPP12",
              "OCPP15",
              "OCPP16",
              "OCPP20"
            ]
          },
          "ocppTransport": {
            "type": "string",
            "description": "Required. Defines the transport protocol (e.g. SOAP or JSON). Note: SOAP is not supported in OCPP 2.0, but is supported by other versions of OCPP.",
            "enum": [
              "JSON",
              "SOAP"
            ]
          },
          "ocppCsmsUrl": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Required. URL of the CSMS(s) that this Charging Station communicates with."
          },
          "messageTimeout": {
            "type": "integer",
            "description": "Required. Duration in seconds before a message send by the Charging Station via this network connection times out. The best setting depends on the underlying network and response times of the CSMS. If you are looking for a some guideline: use 30 seconds as a starting point.",
            "format": "int32"
          },
          "securityProfile": {
            "type": "integer",
            "description": "Required. This field specifies the security profile used when connecting to the CSMS with this NetworkConnectionProfile.",
            "format": "int32"
          },
          "ocppInterface": {
            "type": "string",
            "description": "Required. Applicable Network Interface.",
            "enum": [
              "Wired0",
              "Wired1",
              "Wired2",
              "Wired3",
              "Wireless0",
              "Wireless1",
              "Wireless2",
              "Wireless3"
            ]
          },
          "vpn": {
            "$ref": "#/components/schemas/OcppVPNType"
          },
          "apn": {
            "$ref": "#/components/schemas/OcppAPNType"
          }
        },
        "description": "Required. Connection details."
      },
      "OcppVPNType": {
        "required": [
          "key",
          "password",
          "server",
          "type",
          "user"
        ],
        "type": "object",
        "properties": {
          "server": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Required. VPN Server Address"
          },
          "user": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "Required. VPN User"
          },
          "group": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "Optional. VPN group."
          },
          "password": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "Required. VPN Password."
          },
          "key": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Required. VPN shared secret."
          },
          "type": {
            "type": "string",
            "description": "Required. Type of VPN",
            "enum": [
              "IKEv2",
              "IPSec",
              "L2TP",
              "PPTP"
            ]
          }
        },
        "description": "Optional. Settings to be used to set up the VPN connection"
      },
      "SetNetworkProfileRequest": {
        "required": [
          "configurationSlot",
          "connectionData"
        ],
        "type": "object",
        "properties": {
          "configurationSlot": {
            "type": "integer",
            "description": "Required. Slot in which the configuration should be stored",
            "format": "int32"
          },
          "connectionData": {
            "$ref": "#/components/schemas/OcppNetworkConnectionProfileType"
          }
        }
      },
      "SetMonitoringLevelResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Required. Indicates whether the Charging Station was able to accept the request.",
            "enum": [
              "Accepted",
              "Rejected"
            ]
          },
          "statusInfo": {
            "$ref": "#/components/schemas/OcppStatusInfoType"
          }
        }
      },
      "SetMonitoringLevelRequest": {
        "required": [
          "severity"
        ],
        "type": "object",
        "properties": {
          "severity": {
            "maximum": 9,
            "minimum": 0,
            "type": "integer",
            "description": "     * Required. The Charging Station SHALL only report events\n     * with a severity number lower than or equal to this\n     * severity. The severity range is 0-9, with 0 as the highest\n     * and 9 as the lowest severity level.\n     * The severity levels have the following meaning:\n     * 0-Danger\n     * Indicates lives are potentially in danger. Urgent attention\n     * is needed and action should be taken immediately.\n     * 1-Hardware Failure\n     * Indicates that the Charging Station is unable to continue\n     * regular operations due to Hardware issues. Action is\n     * required.\n     * 2-System Failure\n     * Indicates that the Charging Station is unable to continue\n     * regular operations due to software or minor hardware\n     * issues. Action is required.\n     * 3-Critical\n     * Indicates a critical error. Action is required.\n     * 4-Error\n     * Indicates a non-urgent error. Action is required.\n     * 5-Alert\n     * Indicates an alert event. Default severity for any type of\n     * monitoring event.\n     * 6-Warning\n     * Indicates a warning event. Action may be required.\n     * 7-Notice\n     * Indicates an unusual event. No immediate action is\n     * required.\n     * 8-Informational\n     * Indicates a regular operational event. May be used for\n     * reporting, measuring throughput, etc. No action is\n     * required.\n     * 9-Debug\n     * Indicates information useful to developers for debugging,\n     * not useful during operations.",
            "format": "int32"
          }
        }
      },
      "SetMonitoringBaseResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Required. Indicates whether the Charging Station was able to accept the request.",
            "enum": [
              "Accepted",
              "Rejected",
              "NotSupported",
              "EmptyResultSet"
            ]
          },
          "statusInfo": {
            "$ref": "#/components/schemas/OcppStatusInfoType"
          }
        }
      },
      "SetMonitoringBaseRequest": {
        "required": [
          "monitoringBase"
        ],
        "type": "object",
        "properties": {
          "monitoringBase": {
            "type": "string",
            "description": "Required. Specify which monitoring base will be set",
            "enum": [
              "All",
              "FactoryDefault",
              "HardWiredOnly"
            ]
          }
        }
      },
      "SetDisplayMessageResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Required. This indicates whether the Charging Station is able to display the message.",
            "enum": [
              "Charging",
              "Faulted",
              "Idle",
              "Unavailable"
            ]
          },
          "statusInfo": {
            "$ref": "#/components/schemas/OcppStatusInfoType"
          }
        }
      },
      "OcppMessageContentType": {
        "required": [
          "content",
          "format"
        ],
        "type": "object",
        "properties": {
          "format": {
            "type": "string",
            "description": "Required. Format of the message.",
            "enum": [
              "ASCII",
              "HTML",
              "URI",
              "UTF8"
            ]
          },
          "language": {
            "maxLength": 8,
            "minLength": 0,
            "type": "string",
            "description": "Optional. Message language identifier. Contains a language code as defined in [RFC5646]."
          },
          "content": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Required. Message contents."
          }
        },
        "description": "Required. Contains message details for the message to be displayed on a Charging Station."
      },
      "OcppMessageInfoType": {
        "required": [
          "id",
          "message",
          "priority"
        ],
        "type": "object",
        "properties": {
          "id": {
            "minimum": 0,
            "type": "integer",
            "description": "Required. Unique id within an exchange context. It is defined within the OCPP context as a positive Integer value (greater or equal to zero).",
            "format": "int32"
          },
          "priority": {
            "type": "string",
            "description": "Required. With what priority should this message be shown",
            "enum": [
              "AlwaysFront",
              "InFront",
              "NormalCycle"
            ]
          },
          "state": {
            "type": "string",
            "description": "Optional. During what state should this message be shown. When omitted this message should be shown in any state of the Charging Station.",
            "enum": [
              "Charging",
              "Faulted",
              "Idle",
              "Unavailable"
            ]
          },
          "startDateTime": {
            "type": "string",
            "description": "Optional. From what date-time should this message be shown. If omitted: directly.",
            "format": "date-time"
          },
          "endDateTime": {
            "type": "string",
            "description": "Optional. Until what date-time should this message be shown, after this date/time this message SHALL be removed.",
            "format": "date-time"
          },
          "transactionId": {
            "pattern": "^([a-zA-Z0-9*\\-_=:+|@.]){0,36}$",
            "type": "string",
            "description": "Optional. During which transaction shall this message be shown. Message SHALL be removed by the Charging Station after transaction has ended."
          },
          "message": {
            "$ref": "#/components/schemas/OcppMessageContentType"
          },
          "display": {
            "$ref": "#/components/schemas/OcppComponentType"
          }
        },
        "description": "Required. Message to be configured in the Charging Station, to be displayed."
      },
      "SetDisplayMessageRequest": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "$ref": "#/components/schemas/OcppMessageInfoType"
          }
        }
      },
      "SetChargingProfileResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Required. Returns whether the Charging Station has been able to process the message successfully. This does not guarantee the schedule will be followed to the letter. There might be other constraints the Charging Station may need to take into account.",
            "enum": [
              "Accepted",
              "Rejected"
            ]
          },
          "statusInfo": {
            "$ref": "#/components/schemas/OcppStatusInfoType"
          }
        }
      },
      "OcppChargingProfileType": {
        "required": [
          "chargingProfileKind",
          "chargingProfilePurpose",
          "chargingSchedule",
          "id",
          "stackLevel"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Required. Id of ChargingProfile.",
            "format": "int32"
          },
          "stackLevel": {
            "minimum": 0,
            "type": "integer",
            "description": "Required. Value determining level in hierarchy stack of profiles. Higher values have precedence over lower values. Lowest level is 0.",
            "format": "int32"
          },
          "chargingProfilePurpose": {
            "type": "string",
            "description": "Required. Defines the purpose of the schedule transferred by this profile",
            "enum": [
              "ChargingStationExternalConstraints",
              "ChargingStationMaxProfile",
              "TxDefaultProfile",
              "TxProfile"
            ]
          },
          "chargingProfileKind": {
            "type": "string",
            "description": "Required. Indicates the kind of schedule.",
            "enum": [
              "Absolute",
              "Recurring",
              "Relative"
            ]
          },
          "recurrencyKind": {
            "type": "string",
            "description": "Optional. Indicates the start point of a recurrence",
            "enum": [
              "Daily",
              "Weekly"
            ]
          },
          "validFrom": {
            "type": "string",
            "description": "Optional. Point in time at which the profile starts to be valid. If absent, the profile is valid as soon as it is received by the Charging Station",
            "format": "date-time"
          },
          "validTo": {
            "type": "string",
            "description": "Optional. Point in time at which the profile stops to be valid. If absent, the profile is valid until it is replaced by another profile.",
            "format": "date-time"
          },
          "transactionId": {
            "pattern": "^([a-zA-Z0-9*\\-_=:+|@.]){0,36}$",
            "type": "string",
            "description": "Optional. SHALL only be included when ChargingProfilePurpose is set to TxProfile in a SetChargingProfileRequest. The transactionId is used to match the profile to a specific transaction."
          },
          "chargingSchedule": {
            "$ref": "#/components/schemas/OcppChargingScheduleType"
          }
        },
        "description": "Required. The charging profile to be set at the Charging Station."
      },
      "OcppChargingSchedulePeriodType": {
        "required": [
          "limit",
          "startPeriod"
        ],
        "type": "object",
        "properties": {
          "startPeriod": {
            "type": "integer",
            "description": "Required. Start of the period, in seconds from the start of schedule. The value of StartPeriod also defines the stop time of the previous period.",
            "format": "int32"
          },
          "limit": {
            "type": "number",
            "description": "Required. Charging rate limit during the schedule period, in the applicable chargingRateUnit, for example in Amperes (A) or Watts (W). Accepts at most one digit fraction (e.g. 8.1)."
          },
          "numberPhases": {
            "type": "integer",
            "description": "Optional. The number of phases that can be used for charging. If a number of phases is needed, numberPhases=3 will be assumed unless another number is given.",
            "format": "int32"
          },
          "phaseToUse": {
            "type": "integer",
            "description": "Optional. Values: 1..3, Used if numberPhases=1 and if the EVSE is capable of switching the phase connected to the EV, i.e. ACPhaseSwitchingSupported is defined and true. It’s not allowed unless both conditions above are true. If both conditions are true, and phaseToUse is omitted, the Charging Station / EVSE will make the selection on its own.",
            "format": "int32"
          }
        },
        "description": "Required. List of ChargingSchedulePeriod elements defining maximum power or current usage over time."
      },
      "OcppChargingScheduleType": {
        "required": [
          "chargingRateUnit",
          "chargingSchedulePeriod",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Required. Identifies the ChargingSchedule.",
            "format": "int32"
          },
          "startSchedule": {
            "type": "string",
            "description": "Optional. Starting point of an absolute schedule. If absent the schedule will be relative to start of charging.",
            "format": "date-time"
          },
          "duration": {
            "type": "integer",
            "description": "Optional. Duration of the charging schedule in seconds. If the duration is left empty, the last period will continue indefinitely or until end of the transaction if chargingProfilePurpose = TxProfile.",
            "format": "int32"
          },
          "chargingRateUnit": {
            "type": "string",
            "description": "Required. The unit of measure Limit is expressed in.",
            "enum": [
              "W",
              "A"
            ]
          },
          "minChargingRate": {
            "type": "number",
            "description": "Optional. Minimum charging rate supported by the EV. The unit of measure is defined by the chargingRateUnit. This parameter is intended to be used by a local smart charging algorithm to optimize the power allocation for in the case a charging process is inefficient at lower charging rates. Accepts at most one digit fraction (e.g. 8.1)"
          },
          "chargingSchedulePeriod": {
            "maxItems": 1024,
            "minItems": 0,
            "type": "array",
            "description": "Required. List of ChargingSchedulePeriod elements defining maximum power or current usage over time. The maximum number of periods, that is supported by the Charging Station, if less than 1024, is set by device model variable SmartChargingCtrlr.PeriodsPerSchedule.",
            "items": {
              "$ref": "#/components/schemas/OcppChargingSchedulePeriodType"
            }
          },
          "salesTariff": {
            "$ref": "#/components/schemas/OcppSalesTariffType"
          }
        },
        "description": "Required. Schedule that contains limits for the available power or current over time. In order to support ISO 15118 schedule negotiation, it supports at most three schedules with associated tariff to choose from."
      },
      "OcppConsumptionCostType": {
        "required": [
          "cost",
          "startValue"
        ],
        "type": "object",
        "properties": {
          "startValue": {
            "type": "number",
            "description": "Required. The lowest level of consumption that defines the starting point of this consumption block. The block interval extends to the start of the next interval.",
            "format": "float"
          },
          "cost": {
            "maxItems": 3,
            "minItems": 0,
            "type": "array",
            "description": "Required. This field contains the cost details.",
            "items": {
              "$ref": "#/components/schemas/OcppCostType"
            }
          }
        },
        "description": "Optional. Defines additional means for further relative price information and/or alternative costs."
      },
      "OcppCostType": {
        "required": [
          "amount",
          "costKind"
        ],
        "type": "object",
        "properties": {
          "costKind": {
            "type": "string",
            "description": "Required. The kind of cost referred to in the message element amount",
            "enum": [
              "CarbonDioxideEmission",
              "RelativePricePercentage",
              "RenewableGenerationPercentage"
            ]
          },
          "amount": {
            "type": "integer",
            "description": "Required. The estimated or actual cost per kWh",
            "format": "int32"
          },
          "amountMultiplier": {
            "type": "integer",
            "description": "Optional. Values: -3..3, The amountMultiplier defines the exponent to base 10 (dec). The final value is determined by: amount * 10 ^ amountMultiplier",
            "format": "int32"
          }
        },
        "description": "Required. This field contains the cost details."
      },
      "OcppRelativeTimeIntervalType": {
        "required": [
          "start"
        ],
        "type": "object",
        "properties": {
          "start": {
            "type": "integer",
            "description": "Required. Start of the interval, in seconds from NOW.",
            "format": "int32"
          },
          "duration": {
            "type": "integer",
            "description": "Optional. Duration of the interval, in seconds",
            "format": "int32"
          }
        },
        "description": "Required. Defines the time interval the SalesTariffEntry is valid for, based upon relative times."
      },
      "OcppSalesTariffEntryType": {
        "required": [
          "relativeTimeInterval"
        ],
        "type": "object",
        "properties": {
          "relativeTimeInterval": {
            "$ref": "#/components/schemas/OcppRelativeTimeIntervalType"
          },
          "consumptionCost": {
            "maxItems": 3,
            "minItems": 0,
            "type": "array",
            "description": "Optional. Defines additional means for further relative price information and/or alternative costs.",
            "items": {
              "$ref": "#/components/schemas/OcppConsumptionCostType"
            }
          },
          "epriceLevel": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "Required. Encapsulating element describing all relevant details for one time interval of the SalesTariff. The number of SalesTariffEntry elements is limited by the number of SalesTariffEntry elements is limited by the parameter maxScheduleTuples."
      },
      "OcppSalesTariffType": {
        "required": [
          "id",
          "salesTariffEntry"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Required. SalesTariff identifier used to identify one sales tariff. An SAID remains a unique identifier for one schedule throughout a charging session",
            "format": "int32"
          },
          "salesTariffDescription": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Optional. A human-readable title/short description of the sales tariff e.g. for HMI display purposes"
          },
          "numEPriceLevels": {
            "type": "integer",
            "description": "Optional. Defines the overall number of distinct price levels used across all provided SalesTariff elements",
            "format": "int32"
          },
          "salesTariffEntry": {
            "maxItems": 1024,
            "minItems": 0,
            "type": "array",
            "description": "Required. Encapsulating element describing all relevant details for one time interval of the SalesTariff. The number of SalesTariffEntry elements is limited by the number of SalesTariffEntry elements is limited by the parameter maxScheduleTuples.",
            "items": {
              "$ref": "#/components/schemas/OcppSalesTariffEntryType"
            }
          }
        },
        "description": "Optional. Sales tariff associated with this charging schedule"
      },
      "SetChargingProfileRequest": {
        "required": [
          "chargingProfile",
          "evseId"
        ],
        "type": "object",
        "properties": {
          "evseId": {
            "type": "integer",
            "description": "Required. For TxDefaultProfile an evseId=0 applies the profile to each individual evse. For ChargingStationMaxProfile and ChargingStationExternalConstraints an evseId=0 contains an overal limit for the whole Charging Station.",
            "format": "int32"
          },
          "chargingProfile": {
            "$ref": "#/components/schemas/OcppChargingProfileType"
          }
        }
      },
      "SendLocalListResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Required. This indicates whether the Charging Station has successfully received and applied the update of the Local Authorization List.",
            "enum": [
              "Accepted",
              "Failed",
              "VersionMismatch"
            ]
          },
          "statusInfo": {
            "$ref": "#/components/schemas/OcppStatusInfoType"
          }
        }
      },
      "OcppAdditionalInfoType": {
        "required": [
          "additionalIdToken",
          "type"
        ],
        "type": "object",
        "properties": {
          "additionalIdToken": {
            "pattern": "^([a-zA-Z0-9*\\-_=:+|@.]){0,36}$",
            "type": "string",
            "description": "Required. This field specifies the additional IdToken."
          },
          "type": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Required. This defines the type of the additionalIdToken. This is a custom type, so the implementation needs to be agreed upon by all involved parties."
          }
        },
        "description": "Optional. AdditionalInfo can be used to send extra information which can be validated by the CSMS in addition to the regular authorization with IdToken. need to be agreed upon by all parties involved. When AdditionalInfo is NOT implemented or a not supported AdditionalInfo.type is used, the CSMS/Charging Station MAY ignore the AdditionalInfo."
      },
      "OcppAuthorizationData": {
        "required": [
          "idToken"
        ],
        "type": "object",
        "properties": {
          "idTokenInfo": {
            "$ref": "#/components/schemas/OcppIdTokenInfoType"
          },
          "idToken": {
            "$ref": "#/components/schemas/OcppIdTokenType"
          }
        },
        "description": "Optional. This contains the Local Authorization List entries."
      },
      "OcppIdTokenInfoType": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Required. Current status of the ID Token",
            "enum": [
              "Accepted",
              "Blocked",
              "ConcurrentTx",
              "Expired",
              "Invalid",
              "NoCredit",
              "NotAllowedTypeEVSE",
              "NotAtThisLocation",
              "NotAtThisTime",
              "Unknown"
            ]
          },
          "cacheExpiryDateTime": {
            "type": "string",
            "description": "Optional. Date and Time after which the token must be considered invalid.",
            "format": "date-time"
          },
          "chargingPriority": {
            "type": "integer",
            "description": "Optional. Priority from a business point of view. Default priority is 0, The range is from -9 to 9. Higher values indicate a higher priority. The chargingPriority in TransactionEventResponse overrules this one.",
            "format": "int32"
          },
          "language1": {
            "maxLength": 8,
            "minLength": 0,
            "type": "string",
            "description": "Optional. Preferred user interface language of identifier user. Contains a language code as defined in [RFC5646]."
          },
          "evseId": {
            "type": "array",
            "description": "Optional. Only used when the IdToken is only valid for one or more specific EVSEs, not for the entire Charging Station.",
            "items": {
              "type": "integer",
              "description": "Optional. Only used when the IdToken is only valid for one or more specific EVSEs, not for the entire Charging Station.",
              "format": "int32"
            }
          },
          "language2": {
            "maxLength": 8,
            "minLength": 0,
            "type": "string",
            "description": "Optional. Second preferred user interface language of identifier user. Don’t use when language1 is omitted, has to be different from language1. Contains a language code as defined in [RFC5646]."
          },
          "groupIdToken": {
            "$ref": "#/components/schemas/OcppIdTokenType"
          },
          "personalMessage": {
            "$ref": "#/components/schemas/OcppMessageContentType"
          }
        },
        "description": "Optional. Required when UpdateType is Full. This contains information about authorization status, expiry and group id. For a Differential update the following applies: If this element is present, then this entry SHALL be added or updated in the Local Authorization List. If be added or updated in the Local Authorization List. If this element is absent, the entry for this IdToken in the Local Authorization List SHALL be deleted."
      },
      "OcppIdTokenType": {
        "required": [
          "idToken",
          "type"
        ],
        "type": "object",
        "properties": {
          "idToken": {
            "pattern": "^([a-zA-Z0-9*\\-_=:+|@.]){0,36}$",
            "type": "string",
            "description": "Required. IdToken is case-insensitive. Might hold the hidden id of an RFID tag, but can for example also contain a UUID."
          },
          "type": {
            "type": "string",
            "description": "Required. Enumeration of possible idToken types",
            "enum": [
              "Central",
              "eMaid",
              "ISO14443",
              "ISO15693",
              "KeyCode",
              "Local",
              "MacAddress",
              "NoAuthorization"
            ]
          },
          "additionalInfoType": {
            "type": "array",
            "description": "Optional. AdditionalInfo can be used to send extra information which can be validated by the CSMS in addition to the regular authorization with IdToken. need to be agreed upon by all parties involved. When AdditionalInfo is NOT implemented or a not supported AdditionalInfo.type is used, the CSMS/Charging Station MAY ignore the AdditionalInfo.",
            "items": {
              "$ref": "#/components/schemas/OcppAdditionalInfoType"
            }
          }
        },
        "description": "Required. This contains the identifier which needs to be stored for authorization."
      },
      "SendLocalListRequest": {
        "required": [
          "updateType",
          "versionNumber"
        ],
        "type": "object",
        "properties": {
          "versionNumber": {
            "type": "integer",
            "description": "Required. In case of a full update this is the version number of the full list. In case of a differential update it is the version number of the list after the update has been applied.",
            "format": "int32"
          },
          "updateType": {
            "type": "string",
            "description": "Required. This contains the type of update (full or differential) of this request.",
            "enum": [
              "Differential",
              "Full"
            ]
          },
          "localAuthorizationList": {
            "type": "array",
            "description": "Optional. This contains the Local Authorization List entries.",
            "items": {
              "$ref": "#/components/schemas/OcppAuthorizationData"
            }
          }
        }
      },
      "ResetResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Required. This indicates whether the Charging Station is able to perform the reset.",
            "enum": [
              "Accepted",
              "Rejected",
              "Scheduled"
            ]
          },
          "statusInfo": {
            "$ref": "#/components/schemas/OcppStatusInfoType"
          }
        }
      },
      "ResetRequest": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of reset that the Charging Station or EVSE should perform.",
            "enum": [
              "Immediate",
              "OnIdle"
            ]
          },
          "evseId": {
            "type": "integer",
            "description": "The ID of a specific EVSE that needs to be reset, instead of the entire Charging Station.",
            "format": "int32",
            "example": 1
          }
        }
      },
      "ReserveNowResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Required. This indicates the success or failure of the reservation.",
            "enum": [
              "Accepted",
              "Faulted",
              "Occupied",
              "Rejected",
              "Unavailable"
            ]
          },
          "statusInfo": {
            "$ref": "#/components/schemas/OcppStatusInfoType"
          }
        }
      },
      "ReserveNowRequest": {
        "required": [
          "expiryDateTime",
          "id",
          "idToken"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Required. Id of reservation",
            "format": "int32"
          },
          "expiryDateTime": {
            "type": "string",
            "description": "Required. Date and time at which the reservation expires.",
            "format": "date-time"
          },
          "connectorType": {
            "type": "string",
            "description": "Optional. This field specifies the connector type.",
            "enum": [
              "cCCS1",
              "cCCS2",
              "cG105",
              "cTesla",
              "cType1",
              "cType2",
              "s309-1P-16A",
              "s309-1P-32A",
              "s309-3P-16A",
              "s309-3P-32A",
              "sBS1361",
              "sCEE-7-7",
              "sType2",
              "sType3",
              "Other1PhMax16A",
              "Other1PhOver16A",
              "Other3Ph",
              "Pan",
              "wInductive",
              "wResonant",
              "Undetermined",
              "Unknown"
            ]
          },
          "evseId": {
            "type": "integer",
            "description": "Optional. This contains ID of the evse to be reserved.",
            "format": "int32"
          },
          "idToken": {
            "$ref": "#/components/schemas/OcppIdTokenType"
          },
          "groupIdToken": {
            "$ref": "#/components/schemas/OcppIdTokenType"
          }
        }
      },
      "RequestStopTransactionResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Required. Status indicating whether Charging Station accepts the request to stop a transaction.",
            "enum": [
              "Accepted",
              "Rejected"
            ]
          },
          "statusInfo": {
            "$ref": "#/components/schemas/OcppStatusInfoType"
          }
        }
      },
      "RequestStopTransactionRequest": {
        "required": [
          "transactionId"
        ],
        "type": "object",
        "properties": {
          "transactionId": {
            "pattern": "^([a-zA-Z0-9*\\-_=:+|@.]){0,36}$",
            "type": "string",
            "description": "Required. The identifier of the transaction which the Charging Station is requested to stop."
          }
        }
      },
      "RequestStartTransactionResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Required. Status indicating whether the Charging Station accepts the request to start a transaction.",
            "enum": [
              "Accepted",
              "Rejected"
            ]
          },
          "transactionId": {
            "pattern": "^([a-zA-Z0-9*\\-_=:+|@.]){0,36}$",
            "type": "string",
            "description": "Optional. When the transaction was already started by the Charging Station before the RequestStartTransactionRequest was received, for example: cable plugged in first. This contains the transactionId of the already started transaction."
          },
          "statusInfo": {
            "$ref": "#/components/schemas/OcppStatusInfoType"
          }
        }
      },
      "RequestStartTransactionRequest": {
        "required": [
          "idToken",
          "remoteStartId"
        ],
        "type": "object",
        "properties": {
          "evseId": {
            "type": "integer",
            "description": "Optional. Number of the EVSE on which to start the transaction. EvseId SHALL be > 0",
            "format": "int32"
          },
          "remoteStartId": {
            "type": "integer",
            "description": "Required. Id given by the server to this start request. The Charging Station will return this in the TransactionEventRequest, letting the server know which transaction was started for this request.",
            "format": "int32"
          },
          "idToken": {
            "$ref": "#/components/schemas/OcppIdTokenType"
          },
          "chargingProfile": {
            "$ref": "#/components/schemas/OcppChargingProfileType"
          },
          "groupIdToken": {
            "$ref": "#/components/schemas/OcppIdTokenType"
          }
        }
      },
      "PublishFirmwareResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Required. Indicates whether the request was accepted.",
            "enum": [
              "Accepted",
              "Rejected"
            ]
          },
          "statusInfo": {
            "$ref": "#/components/schemas/OcppStatusInfoType"
          }
        }
      },
      "PublishFirmwareRequest": {
        "required": [
          "checksum",
          "location",
          "requestId"
        ],
        "type": "object",
        "properties": {
          "location": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Required. This contains a string containing a URI pointing to a location from which to retrieve the firmware."
          },
          "retries": {
            "type": "integer",
            "description": "Optional. This specifies how many times Charging Station must try to download the firmware before giving up. If this field is not present, it is left to Charging Station to decide how many times it wants to retry.",
            "format": "int32"
          },
          "checksum": {
            "pattern": "^([a-zA-Z0-9*\\-_=:+|@.]){0,32}$",
            "type": "string",
            "description": "Required. The MD5 checksum over the entire firmware file as a hexadecimal string of length 32"
          },
          "requestId": {
            "type": "integer",
            "description": "Required. The Id of the request",
            "format": "int32"
          },
          "retryInterval": {
            "type": "integer",
            "description": "Optional. The interval in seconds after which a retry may be attempted. If this field is not present, it is left to Charging Station to decide how long to wait between attempts.",
            "format": "int32"
          }
        }
      },
      "InstallCertificateResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "Accepted",
              "Rejected",
              "Failed"
            ]
          },
          "statusInfo": {
            "$ref": "#/components/schemas/OcppStatusInfoType"
          }
        }
      },
      "InstallCertificateRequest": {
        "required": [
          "certificate",
          "certificateType"
        ],
        "type": "object",
        "properties": {
          "certificateType": {
            "type": "string",
            "description": "Required. Indicates the certificate type that is sent.",
            "enum": [
              "V2GRootCertificate",
              "MORootCertificate",
              "CSMSRootCertificate",
              "ManufacturerRootCertificate"
            ]
          },
          "certificate": {
            "maxLength": 5500,
            "minLength": 0,
            "type": "string",
            "description": "Required. A PEM encoded X.509 certificate."
          }
        }
      },
      "GetVariablesResponse": {
        "required": [
          "getVariableResult"
        ],
        "type": "object",
        "properties": {
          "getVariableResult": {
            "type": "array",
            "description": "Required. List of requested variables and their values.",
            "items": {
              "$ref": "#/components/schemas/OcppGetVariableResultType"
            }
          }
        }
      },
      "OcppGetVariableResultType": {
        "required": [
          "attributeStatus",
          "component"
        ],
        "type": "object",
        "properties": {
          "attributeStatus": {
            "type": "string",
            "description": "Required. Result status of getting the variable.",
            "enum": [
              "Accepted",
              "Rejected",
              "UnknownComponent",
              "UnknownVariable",
              "NotSupportedAttributeType"
            ]
          },
          "attributeType": {
            "type": "string",
            "description": "Optional. Attribute type for which value is requested. When absent, default Actual is assumed.",
            "enum": [
              "Actual",
              "Target",
              "MinSet",
              "MaxSet"
            ]
          },
          "attributeValue": {
            "maxLength": 2500,
            "minLength": 0,
            "type": "string",
            "description": "Optional. Value of requested attribute type of component variable. This field can only be empty when the given status is NOT accepted. The Configuration Variable ReportingValueSize can be used to limit GetVariableResult.attributeValue, VariableAttribute.value and EventData.actualValue. The max size of these values will always remain equal."
          },
          "component": {
            "$ref": "#/components/schemas/OcppComponentType"
          }
        },
        "description": "Required. List of requested variables and their values."
      },
      "GetVariablesRequest": {
        "required": [
          "getVariableData"
        ],
        "type": "object",
        "properties": {
          "getVariableData": {
            "type": "array",
            "description": "Required. List of requested variables",
            "items": {
              "$ref": "#/components/schemas/OcppGetVariableDataType"
            }
          }
        }
      },
      "OcppGetVariableDataType": {
        "required": [
          "component",
          "variable"
        ],
        "type": "object",
        "properties": {
          "attributeType": {
            "type": "string",
            "description": "Optional. Attribute type for which value is requested. When absent, default Actual is assumed.",
            "enum": [
              "Actual",
              "Target",
              "MinSet",
              "MaxSet"
            ]
          },
          "component": {
            "$ref": "#/components/schemas/OcppComponentType"
          },
          "variable": {
            "$ref": "#/components/schemas/OcppVariableType"
          }
        },
        "description": "Required. List of requested variables"
      },
      "GetTransactionStatusResponse": {
        "required": [
          "messagesInQueue"
        ],
        "type": "object",
        "properties": {
          "ongoingIndicator": {
            "type": "boolean",
            "description": "Optional. Whether the transaction is still ongoing"
          },
          "messagesInQueue": {
            "type": "boolean",
            "description": "Required. Whether there are still message to be delivered."
          }
        }
      },
      "GetTransactionStatusRequest": {
        "type": "object",
        "properties": {
          "transactionId": {
            "pattern": "^([a-zA-Z0-9*\\-_=:+|@.]){0,36}$",
            "type": "string",
            "description": "Optional. The Id of the transaction for which the status is requested."
          }
        }
      },
      "GetMonitoringReportResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Required. This field indicates whether the Charging Station was able to accept the request.",
            "enum": [
              "Accepted",
              "Rejected",
              "NotSupported",
              "EmptyResultSet"
            ]
          },
          "statusInfo": {
            "$ref": "#/components/schemas/OcppStatusInfoType"
          }
        }
      },
      "GetMonitoringReportRequest": {
        "required": [
          "requestId"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "type": "integer",
            "description": "Required. The Id of the request",
            "format": "int32"
          },
          "monitoringCriteria": {
            "maxItems": 3,
            "minItems": 0,
            "type": "array",
            "description": "Optional. This field contains criteria for components for which a monitoring report is requested",
            "items": {
              "maxLength": 3,
              "minLength": 0,
              "type": "string",
              "description": "Optional. This field contains criteria for components for which a monitoring report is requested",
              "enum": [
                "ThresholdMonitoring",
                "DeltaMonitoring",
                "PeriodicMonitoring"
              ]
            }
          },
          "componentVariable": {
            "type": "array",
            "description": "Optional. This field specifies the components and variables for which a monitoring report is requested.",
            "items": {
              "$ref": "#/components/schemas/OcppVariableType"
            }
          }
        }
      },
      "GetLogResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Required. This field indicates whether the Charging Station was able to accept the request.",
            "enum": [
              "Accepted",
              "Rejected",
              "AcceptedCanceled"
            ]
          },
          "filename": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Optional. This contains the name of the log file that will be uploaded. This field is not present when no logging information is available."
          },
          "statusInfo": {
            "$ref": "#/components/schemas/OcppStatusInfoType"
          }
        }
      },
      "GetLogRequest": {
        "required": [
          "log",
          "logType",
          "requestId"
        ],
        "type": "object",
        "properties": {
          "logType": {
            "type": "string",
            "description": "Required. This contains the type of log file that the Charging Station should send.",
            "enum": [
              "DiagnosticsLog",
              "SecurityLog"
            ]
          },
          "requestId": {
            "type": "integer",
            "description": "Required. The Id of this request",
            "format": "int32"
          },
          "retries": {
            "type": "integer",
            "description": "Optional. This specifies how many times the Charging Station must try to upload the log before giving up. If this field is not present, it is left to Charging Station to decide how many times it wants to retry.",
            "format": "int32"
          },
          "retryInterval": {
            "type": "integer",
            "description": "Optional. The interval in seconds after which a retry may be attempted. If this field is not present, it is left to Charging Station to decide how long to wait between attempts.",
            "format": "int32"
          },
          "log": {
            "$ref": "#/components/schemas/OcppLogParametersType"
          }
        }
      },
      "OcppLogParametersType": {
        "required": [
          "remoteLocation"
        ],
        "type": "object",
        "properties": {
          "remoteLocation": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Required. The URL of the location at the remote system where the log should be stored."
          },
          "oldestTimestamp": {
            "type": "string",
            "description": "Optional. This contains the date and time of the oldest logging information to include in the diagnostics.",
            "format": "date-time"
          },
          "latestTimestamp": {
            "type": "string",
            "description": "Optional. This contains the date and time of the latest logging information to include in the diagnostics.",
            "format": "date-time"
          }
        },
        "description": "Required. This field specifies the requested log and the location to which the log should be sent."
      },
      "GetLocalListVersionResponse": {
        "required": [
          "versionNumber"
        ],
        "type": "object",
        "properties": {
          "versionNumber": {
            "type": "integer",
            "description": "Required. This contains the current version number of the local authorization list in the Charging Station.",
            "format": "int32"
          }
        }
      },
      "GetInstalledCertificateIdsResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Required. Charging Station indicates if it can process the request.",
            "enum": [
              "Accepted",
              "NotFound"
            ]
          },
          "certificateHashDataChain": {
            "type": "array",
            "description": "Optional. The Charging Station includes the Certificate information for each available certificate.",
            "items": {
              "$ref": "#/components/schemas/OcppCertificateHashDataChainType"
            }
          },
          "statusInfo": {
            "$ref": "#/components/schemas/OcppStatusInfoType"
          }
        }
      },
      "OcppCertificateHashDataChainType": {
        "required": [
          "certificateHashData",
          "certificateType"
        ],
        "type": "object",
        "properties": {
          "certificateType": {
            "type": "string",
            "description": "Required. Indicates the type of the requested certificate(s).",
            "enum": [
              "V2GRootCertificate",
              "MORootCertificate",
              "CSMSRootCertificate",
              "V2GCertificateChain",
              "ManufacturerRootCertificate"
            ]
          },
          "certificateHashData": {
            "$ref": "#/components/schemas/OcppCertificateHashDataType"
          },
          "childCertificateHashData": {
            "$ref": "#/components/schemas/OcppCertificateHashDataType"
          }
        },
        "description": "Optional. The Charging Station includes the Certificate information for each available certificate."
      },
      "OcppCertificateHashDataType": {
        "required": [
          "hashAlgorithm",
          "issuerKeyHash",
          "issuerNameHash",
          "serialNumber"
        ],
        "type": "object",
        "properties": {
          "hashAlgorithm": {
            "type": "string",
            "description": "Required. Used algorithms for the hashes provided.",
            "enum": [
              "SHA256",
              "SHA384",
              "SHA512"
            ]
          },
          "issuerNameHash": {
            "pattern": "^([a-zA-Z0-9*\\-_=:+|@.]){0,128}$",
            "type": "string",
            "description": "Required. Hashed value of the Issuer DN (Distinguished Name)."
          },
          "issuerKeyHash": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Required. Hashed value of the issuers public key"
          },
          "serialNumber": {
            "pattern": "^([a-zA-Z0-9*\\-_=:+|@.]){0,40}$",
            "type": "string",
            "description": "Required. The serial number of the certificate."
          }
        },
        "description": "Optional. Information to identify the child certificate(s)."
      },
      "GetInstalledCertificateIdsRequest": {
        "type": "object",
        "properties": {
          "certificateType": {
            "type": "array",
            "description": "Optional. Indicates the type of certificates requested. When omitted, all certificate types are requested.",
            "items": {
              "type": "string",
              "description": "Optional. Indicates the type of certificates requested. When omitted, all certificate types are requested.",
              "enum": [
                "V2GRootCertificate",
                "MORootCertificate",
                "CSMSRootCertificate",
                "V2GCertificateChain",
                "ManufacturerRootCertificate"
              ]
            }
          }
        }
      },
      "GetDisplayMessagesResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Required. Indicates if the Charging Station has Display Messages that match the request criteria in the GetDisplayMessagesRequest",
            "enum": [
              "Accepted",
              "Unknown"
            ]
          },
          "statusInfo": {
            "$ref": "#/components/schemas/OcppStatusInfoType"
          }
        }
      },
      "GetDisplayMessagesRequest": {
        "required": [
          "requestId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "array",
            "description": "Optional. If provided the Charging Station shall return Display Messages of the given ids. This field SHALL NOT contain more ids than set in NumberOfDisplayMessages.maxLimit",
            "items": {
              "type": "integer",
              "description": "Optional. If provided the Charging Station shall return Display Messages of the given ids. This field SHALL NOT contain more ids than set in NumberOfDisplayMessages.maxLimit",
              "format": "int32"
            }
          },
          "requestId": {
            "type": "integer",
            "description": "Required. The Id of this request.",
            "format": "int32"
          },
          "priority": {
            "type": "string",
            "description": "Optional. If provided the Charging Station shall return Display Messages with the given priority only.",
            "enum": [
              "AlwaysFront",
              "InFront",
              "NormalCycle"
            ]
          },
          "state": {
            "type": "string",
            "description": "Optional. If provided the Charging Station shall return Display Messages with the given state only.",
            "enum": [
              "Charging",
              "Faulted",
              "Idle",
              "Unavailable"
            ]
          }
        }
      },
      "GetReportResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Required. This field indicates whether the Charging Station was able to accept the request.",
            "enum": [
              "Accepted",
              "Rejected",
              "NotSupported",
              "EmptyResultSet"
            ]
          },
          "statusInfo": {
            "$ref": "#/components/schemas/OcppStatusInfoType"
          }
        }
      },
      "GetReportRequest": {
        "required": [
          "requestId"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "type": "integer",
            "description": "Required. The Id of the request.",
            "format": "int32"
          },
          "componentCriteria": {
            "maxItems": 4,
            "minItems": 0,
            "type": "array",
            "description": "Optional. This field contains criteria for components for which a report is requested",
            "items": {
              "maxLength": 4,
              "minLength": 0,
              "type": "string",
              "description": "Optional. This field contains criteria for components for which a report is requested",
              "enum": [
                "Active",
                "Available",
                "Enabled",
                "Problem"
              ]
            }
          },
          "componentVariable": {
            "type": "array",
            "description": "Optional. This field specifies the components and variables for which a report is requested.",
            "items": {
              "$ref": "#/components/schemas/OcppComponentVariableType"
            }
          }
        }
      },
      "OcppComponentVariableType": {
        "required": [
          "component"
        ],
        "type": "object",
        "properties": {
          "component": {
            "$ref": "#/components/schemas/OcppComponentType"
          },
          "variable": {
            "$ref": "#/components/schemas/OcppVariableType"
          }
        },
        "description": "Optional. This field specifies the components and variables for which a report is requested."
      },
      "GetCompositeScheduleResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Required. The Charging Station will indicate if it was able to process the request",
            "enum": [
              "Accepted",
              "Rejected"
            ]
          },
          "schedule": {
            "$ref": "#/components/schemas/OcppCompositeScheduleType"
          },
          "statusInfo": {
            "$ref": "#/components/schemas/OcppStatusInfoType"
          }
        }
      },
      "OcppCompositeScheduleType": {
        "required": [
          "chargingRateUnit",
          "chargingSchedulePeriod",
          "duration",
          "evseId",
          "scheduleStart"
        ],
        "type": "object",
        "properties": {
          "evseId": {
            "type": "integer",
            "description": "Required. The ID of the EVSE for which the schedule is requested. When evseid=0, the Charging Station calculated the expected consumption for the grid connection.",
            "format": "int32"
          },
          "duration": {
            "type": "integer",
            "description": "Required. Duration of the schedule in seconds.",
            "format": "int32"
          },
          "scheduleStart": {
            "type": "string",
            "description": "Required. Date and time at which the schedule becomes active. All time measurements within the schedule are relative to this timestamp.",
            "format": "date-time"
          },
          "chargingRateUnit": {
            "type": "string",
            "description": "Required. The unit of measure Limit is expressed in.",
            "enum": [
              "W",
              "A"
            ]
          },
          "chargingSchedulePeriod": {
            "type": "array",
            "description": "Required. List of ChargingSchedulePeriod elements defining maximum power or current usage over time.",
            "items": {
              "$ref": "#/components/schemas/OcppChargingSchedulePeriodType"
            }
          }
        },
        "description": "Optional. This field contains the calculated composite schedule. It may only be omitted when this message contains status Rejected"
      },
      "GetCompositeScheduleRequest": {
        "required": [
          "duration",
          "evseId"
        ],
        "type": "object",
        "properties": {
          "duration": {
            "type": "integer",
            "description": "Required. Length of the requested schedule in seconds.",
            "format": "int32"
          },
          "chargingRateUnit": {
            "type": "string",
            "description": "Optional. Can be used to force a power or current profile.",
            "enum": [
              "W",
              "A"
            ]
          },
          "evseId": {
            "type": "integer",
            "description": "Required. The ID of the EVSE for which the schedule is requested. When evseid=0, the Charging Station will calculate the expected consumption for the grid connection.",
            "format": "int32"
          }
        }
      },
      "GetChargingProfilesResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Required. This indicates whether the Charging Station is able to process this request and will send ReportChargingProfilesRequest messages.",
            "enum": [
              "Accepted",
              "NoProfiles"
            ]
          },
          "statusInfo": {
            "$ref": "#/components/schemas/OcppStatusInfoType"
          }
        }
      },
      "GetChargingProfilesRequest": {
        "required": [
          "chargingProfile",
          "requestId"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "type": "integer",
            "description": "Required. Reference identification that is to be used by the Charging Station in the ReportChargingProfilesRequest when provided.",
            "format": "int32"
          },
          "evseId": {
            "type": "integer",
            "description": "Optional. For which EVSE installed charging profiles SHALL be reported. If 0, only charging profiles installed on the Charging Station itself (the grid connection) SHALL be reported. If omitted, all installed charging profiles SHALL be reported. Reported charging profiles SHALL match the criteria in field chargingProfile.",
            "format": "int32"
          },
          "chargingProfile": {
            "$ref": "#/components/schemas/OcppChargingProfileCriterionType"
          }
        }
      },
      "OcppChargingProfileCriterionType": {
        "type": "object",
        "properties": {
          "chargingProfilePurpose": {
            "type": "string",
            "description": "Optional. Defines the purpose of the schedule transferred by this profile",
            "enum": [
              "ChargingStationExternalConstraints",
              "ChargingStationMaxProfile",
              "TxDefaultProfile",
              "TxProfile"
            ]
          },
          "stackLevel": {
            "type": "integer",
            "description": "Optional. Value determining level in hierarchy stack of profiles. Higher values have precedence over lower values. Lowest level is 0.",
            "format": "int32"
          },
          "chargingProfileId": {
            "type": "array",
            "description": "Optional. List of all the chargingProfileIds requested. Any ChargingProfile that matches one of these profiles will be reported. If omitted, the Charging Station SHALL not filter on chargingProfileId. This field SHALL NOT contain more ids than set in ChargingProfileEntries.maxLimit",
            "items": {
              "type": "integer",
              "description": "Optional. List of all the chargingProfileIds requested. Any ChargingProfile that matches one of these profiles will be reported. If omitted, the Charging Station SHALL not filter on chargingProfileId. This field SHALL NOT contain more ids than set in ChargingProfileEntries.maxLimit",
              "format": "int32"
            }
          },
          "chargingLimitSource": {
            "maxItems": 4,
            "minItems": 0,
            "type": "array",
            "description": "Optional. For which charging limit sources, charging profiles SHALL be reported. If omitted, the Charging Station SHALL not filter on chargingLimitSource.",
            "items": {
              "maxLength": 4,
              "minLength": 0,
              "type": "string",
              "description": "Optional. For which charging limit sources, charging profiles SHALL be reported. If omitted, the Charging Station SHALL not filter on chargingLimitSource.",
              "enum": [
                "EMS",
                "Other",
                "SO",
                "CSO"
              ]
            }
          }
        },
        "description": "Required. Specifies the charging profile"
      },
      "GetBaseReportResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Required. This indicates whether the Charging Station is able to accept this request",
            "enum": [
              "Accepted",
              "Rejected",
              "NotSupported",
              "EmptyResultSet"
            ]
          },
          "statusInfo": {
            "$ref": "#/components/schemas/OcppStatusInfoType"
          }
        }
      },
      "GetBaseReportRequest": {
        "required": [
          "reportBase",
          "requestId"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "type": "integer",
            "description": "Required. The Id of the request.",
            "format": "int32"
          },
          "reportBase": {
            "type": "string",
            "description": "Required. This field specifies the report base.",
            "enum": [
              "ConfigurationInventory",
              "FullInventory",
              "SummaryInventory"
            ]
          }
        }
      },
      "DeleteCertificateResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Required. Charging Station indicates if it can process the request",
            "enum": [
              "Accepted",
              "Failed",
              "NotFound"
            ]
          },
          "statusInfo": {
            "$ref": "#/components/schemas/OcppStatusInfoType"
          }
        }
      },
      "DeleteCertificateRequest": {
        "required": [
          "certificateHashData"
        ],
        "type": "object",
        "properties": {
          "certificateHashData": {
            "$ref": "#/components/schemas/OcppCertificateHashDataType"
          }
        }
      },
      "DataTransferResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Required. This indicates the success or failure of the data transfer.",
            "enum": [
              "Accepted",
              "Rejected",
              "UnknownMessageId",
              "UnknownVendorId"
            ]
          },
          "data": {
            "type": "string",
            "description": "Optional. Data without specified length or format, in response to request."
          },
          "statusInfo": {
            "$ref": "#/components/schemas/OcppStatusInfoType"
          }
        }
      },
      "DataTransferRequest": {
        "required": [
          "vendorId"
        ],
        "type": "object",
        "properties": {
          "messageId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Optional. May be used to indicate a specific message or implementation."
          },
          "data": {
            "type": "string",
            "description": "Optional. Data without specified length or format. This needs to be decided by both parties (Open to implementation)."
          },
          "vendorId": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Required. This identifies the Vendor specific implementation"
          }
        }
      },
      "CustomerInformationResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Required. Indicates whether the request was accepted.",
            "enum": [
              "Accepted",
              "Rejected",
              "Invalid"
            ]
          },
          "statusInfo": {
            "$ref": "#/components/schemas/OcppStatusInfoType"
          }
        }
      },
      "CustomerInformationRequest": {
        "required": [
          "clear",
          "report",
          "requestId"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "type": "integer",
            "description": "Required. The Id of the request.",
            "format": "int32"
          },
          "report": {
            "type": "boolean",
            "description": "Required. Flag indicating whether the Charging Station should return NotifyCustomerInformationRequest messages containing information about the customer referred to."
          },
          "clear": {
            "type": "boolean",
            "description": "Required. Flag indicating whether the Charging Station should clear all information about the customer referred to"
          },
          "customerIdentifier": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Optional. A (e.g. vendor specific) identifier of the customer this request refers to. This field contains a custom identifier other than IdToken and Certificate. One of the possible identifiers (customerIdentifier, customerIdToken or customerCertificate) should be in the request message"
          },
          "idToken": {
            "$ref": "#/components/schemas/OcppIdTokenType"
          },
          "customerCertificate": {
            "$ref": "#/components/schemas/OcppCertificateHashDataType"
          }
        }
      },
      "CostUpdatedResponse": {
        "type": "object"
      },
      "CostUpdatedRequest": {
        "required": [
          "totalCost",
          "transactionId"
        ],
        "type": "object",
        "properties": {
          "totalCost": {
            "type": "number",
            "description": "Required. Current total cost, based on the information known by the CSMS, of the transaction including taxes. In the currency configured with the configuration Variable: [Currency]",
            "format": "float"
          },
          "transactionId": {
            "pattern": "^([a-zA-Z0-9*\\-_=:+|@.]){0,36}$",
            "type": "string",
            "description": "Required. Transaction Id of the transaction the current cost are asked for."
          }
        }
      },
      "ClearVariableMonitoringResponse": {
        "required": [
          "clearMonitoringResult"
        ],
        "type": "object",
        "properties": {
          "clearMonitoringResult": {
            "type": "array",
            "description": "Required. List of result statuses per monitor.",
            "items": {
              "$ref": "#/components/schemas/OcppClearMonitoringResultType"
            }
          }
        }
      },
      "OcppClearMonitoringResultType": {
        "required": [
          "id",
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Required. Result of the clear request for this monitor, identified by its Id.",
            "enum": [
              "Accepted",
              "Rejected",
              "NotFound"
            ]
          },
          "id": {
            "type": "integer",
            "description": "Required. Id of the monitor of which a clear was requested.",
            "format": "int32"
          },
          "statusInfo": {
            "$ref": "#/components/schemas/OcppStatusInfoType"
          }
        },
        "description": "Required. List of result statuses per monitor."
      },
      "ClearVariableMonitoringRequest": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "array",
            "description": "Required. List of the monitors to be cleared, identified by there Id.",
            "items": {
              "type": "integer",
              "description": "Required. List of the monitors to be cleared, identified by there Id.",
              "format": "int32"
            }
          }
        }
      },
      "ClearDisplayMessageResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Required. Returns whether the Charging Station has been able to remove the message.",
            "enum": [
              "Accepted",
              "Unknown"
            ]
          },
          "statusInfo": {
            "$ref": "#/components/schemas/OcppStatusInfoType"
          }
        }
      },
      "ClearDisplayMessageRequest": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Required. Id of the message that SHALL be removed from the Charging Station.",
            "format": "int32"
          }
        }
      },
      "ClearChargingProfileResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Required. Indicates if the Charging Station was able to execute the request.",
            "enum": [
              "Accepted",
              "Unknown"
            ]
          },
          "statusInfo": {
            "$ref": "#/components/schemas/OcppStatusInfoType"
          }
        }
      },
      "ClearChargingProfileRequest": {
        "type": "object",
        "properties": {
          "chargingProfileId": {
            "type": "integer",
            "description": "Optional. The Id of the charging profile to clear.",
            "format": "int32"
          },
          "chargingProfileCriteria": {
            "$ref": "#/components/schemas/OcppClearChargingProfileType"
          }
        }
      },
      "OcppClearChargingProfileType": {
        "type": "object",
        "properties": {
          "evseId": {
            "type": "integer",
            "description": "Optional. Specifies the id of the EVSE for which to clear charging profiles. An evseId of zero (0) specifies the charging profile for the overall Charging Station. Absence of this parameter means the clearing applies to all charging profiles that match the other criteria in the request.",
            "format": "int32"
          },
          "chargingProfilePurpose": {
            "type": "string",
            "description": "Optional. Specifies to purpose of the charging profiles that will be cleared, if they meet the other criteria in the request.",
            "enum": [
              "ChargingStationExternalConstraints",
              "ChargingStationMaxProfile",
              "TxDefaultProfile",
              "TxProfile"
            ]
          },
          "stackLevel": {
            "type": "integer",
            "description": "Optional. Specifies the stackLevel for which charging profiles will be cleared, if they meet the other criteria in the request.",
            "format": "int32"
          }
        },
        "description": "Optional. Specifies the charging profile."
      },
      "ClearCacheResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Accepted if the Charging Station has executed the request, otherwise rejected.",
            "enum": [
              "Accepted",
              "Rejected"
            ]
          },
          "statusInfo": {
            "$ref": "#/components/schemas/OcppStatusInfoType"
          }
        }
      },
      "ChangeAvailabilityRequest": {
        "required": [
          "evse",
          "operationalStatus"
        ],
        "type": "object",
        "properties": {
          "operationalStatus": {
            "type": "string",
            "description": "Required. This contains the type of availability change that the Charging Station should perform.",
            "enum": [
              "Inoperative",
              "Operative"
            ]
          },
          "evse": {
            "$ref": "#/components/schemas/OcppEVSEType"
          }
        }
      },
      "CertificateSignedResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Required. Returns whether certificate signing has been accepted, otherwise rejected.",
            "enum": [
              "ChargingStationCertificate",
              "V2GCertificate"
            ]
          },
          "statusInfo": {
            "$ref": "#/components/schemas/OcppStatusInfoType"
          }
        }
      },
      "CertificateSignedRequest": {
        "required": [
          "certificateChain"
        ],
        "type": "object",
        "properties": {
          "certificateChain": {
            "maxLength": 10000,
            "minLength": 0,
            "type": "string",
            "description": "Required. The signed PEM encoded X.509 certificate. This can also contain the necessary sub CA certificates. In that case, the order of the bundle should follow the certificate chain, starting from the leaf certificate. The Configuration Variable MaxCertificateChainSize can be used to limit the maximum size of this field."
          }
        }
      },
      "CancelReservationResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Required. This indicates the success or failure of the canceling of a reservation by CSMS.",
            "enum": [
              "Accepted",
              "Rejected"
            ]
          },
          "statusInfo": {
            "$ref": "#/components/schemas/OcppStatusInfoType"
          }
        }
      },
      "CancelReservationRequest": {
        "required": [
          "reservationId"
        ],
        "type": "object",
        "properties": {
          "reservationId": {
            "type": "integer",
            "description": "Required. Id of the reservation to cancel.",
            "format": "int32"
          },
          "certificateType": {
            "type": "string",
            "description": "Optional. Indicates the type of the signed certificate that is returned. When omitted the certificate is used for both the 15118 connection (if implemented) and the Charging Station to CSMS connection. This field is required when a typeOfCertificate was included in the SignCertificateRequest that requested this certificate to be signed AND both the 15118 connection and the Charging Station connection are implemented.",
            "enum": [
              "ChargingStationCertificate",
              "V2GCertificate"
            ]
          }
        }
      },
      "UpdateFirmwareConfirmation": {
        "type": "object"
      },
      "UpdateFirmwareReq": {
        "required": [
          "location",
          "retrieveDate"
        ],
        "type": "object",
        "properties": {
          "location": {
            "type": "string",
            "description": "This contains a string containing a URI pointing to a location from which to retrieve the firmware."
          },
          "retries": {
            "type": "integer",
            "description": "This specifies how many times Charge Point must try to download the firmware before giving up. If this field is not present, it is left to Charge Point to decide how many times it wants to retry.",
            "format": "int32"
          },
          "retrieveDate": {
            "type": "string",
            "description": "This contains the date and time after which the Charge Point is allowed to retrieve the (new) firmware.",
            "format": "date-time"
          },
          "retryInterval": {
            "type": "integer",
            "description": "The interval in seconds after which a retry may be attempted. If this field is not present, it is left to Charge Point to decide how long to wait between attempts.",
            "format": "int32"
          }
        }
      },
      "UnlockConnectorConfirmation": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "This indicates whether the Charge Point has unlocked the connector.",
            "enum": [
              "Unlocked",
              "UnlockFailed",
              "NotSupported"
            ]
          }
        }
      },
      "UnlockConnectorReq": {
        "required": [
          "connectorId"
        ],
        "type": "object",
        "properties": {
          "connectorId": {
            "type": "integer",
            "description": "This contains the identifier of the connector to be unlocked.",
            "format": "int32"
          }
        }
      },
      "TriggerMessageConfirmation": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the Charge Point will send the requested notification or not.",
            "enum": [
              "Accepted",
              "Rejected",
              "NotImplemented"
            ]
          }
        }
      },
      "TriggerMessageReq": {
        "required": [
          "requestedMessage"
        ],
        "type": "object",
        "properties": {
          "requestedMessage": {
            "type": "string",
            "enum": [
              "BootNotification",
              "DiagnosticsStatusNotification",
              "FirmwareStatusNotification",
              "Heartbeat",
              "MeterValues",
              "StatusNotification"
            ]
          },
          "connectorId": {
            "type": "integer",
            "description": "Only filled in when request applies to a specific connector.",
            "format": "int32"
          }
        }
      },
      "SetChargingProfileConfirmation": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Returns whether the Charge Point has been able to process the message successfully. This does not guarantee the schedule will be followed to the letter. There might be other constraints the Charge Point may need to take into account.",
            "enum": [
              "Accepted",
              "Rejected",
              "NotSupported"
            ]
          }
        }
      },
      "OcppChargingProfile": {
        "required": [
          "chargingProfileId",
          "chargingProfileKind",
          "chargingProfilePurpose",
          "chargingSchedule",
          "stackLevel"
        ],
        "type": "object",
        "properties": {
          "chargingProfileId": {
            "type": "integer",
            "description": "Unique identifier for this profile.",
            "format": "int32"
          },
          "transactionId": {
            "type": "integer",
            "description": "Only valid if ChargingProfilePurpose is set to TxProfile, the transactionId MAY be used to match the profile to a specific transaction.",
            "format": "int32"
          },
          "stackLevel": {
            "minimum": 0,
            "type": "integer",
            "description": "Value determining level in hierarchy stack of profiles. Higher values have precedence over lower values. Lowest level is 0.",
            "format": "int32"
          },
          "chargingProfilePurpose": {
            "type": "string",
            "enum": [
              "ChargePointMaxProfile",
              "TxDefaultProfile",
              "TxProfile"
            ]
          },
          "chargingProfileKind": {
            "type": "string",
            "description": "Indicates the kind of schedule.",
            "enum": [
              "Absolute",
              "Recurring",
              "Relative"
            ]
          },
          "recurrencyKind": {
            "type": "string",
            "description": "Indicates the start point of a recurrence. SHALL only be used when the field: recurrencyKind is set to: Recurring.",
            "enum": [
              "Daily",
              "Weekly"
            ]
          },
          "validFrom": {
            "type": "string",
            "description": "Point in time at which the profile starts to be valid. If absent, the profile is valid as soon as it is received by the Charge Point.",
            "format": "date-time"
          },
          "validTo": {
            "type": "string",
            "description": "Point in time at which the profile stops to be valid. If absent, the profile is valid until it is replaced by another profile.",
            "format": "date-time"
          },
          "chargingSchedule": {
            "$ref": "#/components/schemas/OcppChargingSchedule"
          }
        },
        "description": "The charging profile to be set at the Charge Point."
      },
      "OcppChargingSchedule": {
        "required": [
          "chargingRateUnit",
          "chargingSchedulePeriod"
        ],
        "type": "object",
        "properties": {
          "duration": {
            "type": "integer",
            "description": "Duration of the charging schedule in seconds. If the duration is left empty, the last period will continue indefinitely or until end of the transaction in case startSchedule is absent.",
            "format": "int32"
          },
          "startSchedule": {
            "type": "string",
            "description": "Starting point of an absolute schedule. If absent the schedule will be relative to start of charging. When ChargingSchedule is used as part of a GetCompositeSchedule.conf message, then this field must be omitted.",
            "format": "date-time"
          },
          "chargingRateUnit": {
            "type": "string",
            "description": "The unit of measure Limit is expressed in.",
            "enum": [
              "W",
              "A"
            ]
          },
          "chargingSchedulePeriod": {
            "type": "array",
            "description": "List of ChargingSchedulePeriod elements defining maximum power or current usage over time. The startPeriod of the first ChargingSchedulePeriod SHALL always be 0.",
            "items": {
              "$ref": "#/components/schemas/OcppChargingSchedulePeriod"
            }
          },
          "minChargingRate": {
            "type": "number",
            "description": "Minimum charging rate supported by the electric vehicle. The unit of measure is defined by the chargingRateUnit. This parameter is intended to be used by a local smart charging algorithm to optimize the power allocation for in the case a charging process is inefficient at lower charging rates. Accepts at most one digit fraction (e.g. 8.1)",
            "example": 8.1
          }
        },
        "description": "Planned Composite Charging Schedule, the energy consumption over time. Always relative to ScheduleStart. If status is \"Rejected\", this field may be absent."
      },
      "OcppChargingSchedulePeriod": {
        "required": [
          "limit",
          "startPeriod"
        ],
        "type": "object",
        "properties": {
          "startPeriod": {
            "type": "integer",
            "description": "Start of the period, in seconds from the start of schedule. The value of StartPeriod also defines the stop time of the previous period.",
            "format": "int32"
          },
          "limit": {
            "type": "number",
            "description": "Charging rate limit during the schedule period, in the applicable chargingRateUnit, for example in Amperes or Watts. Accepts at most one digit fraction (e.g. 8.1).",
            "example": 8.1
          },
          "numberPhases": {
            "type": "integer",
            "description": "The number of phases that can be used for charging. If a number of phases is needed, numberPhases=3 will be assumed unless another number is given.",
            "format": "int32"
          }
        },
        "description": "List of ChargingSchedulePeriod elements defining maximum power or current usage over time. The startPeriod of the first ChargingSchedulePeriod SHALL always be 0."
      },
      "SetChargingProfileReq": {
        "required": [
          "connectorId",
          "csChargingProfiles"
        ],
        "type": "object",
        "properties": {
          "connectorId": {
            "type": "integer",
            "description": "The connector to which the charging profile applies. If connectorId = 0, and the message contains a ChargePointMaxProfile it contains an overall limit for the Charge Point. If connectorId = 0, and the message contains a TxDefaultProfile it contains limits that are to be used for any new transaction on any connector of that Charge Point.",
            "format": "int32"
          },
          "csChargingProfiles": {
            "$ref": "#/components/schemas/OcppChargingProfile"
          }
        }
      },
      "ResetConfirmation": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "This indicates whether the Charge Point is able to perform the reset.",
            "enum": [
              "Accepted",
              "Rejected"
            ]
          }
        }
      },
      "ResetReq": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This contains the type of reset that the Charge Point should perform.",
            "enum": [
              "Hard",
              "Soft"
            ]
          }
        }
      },
      "ReserveNowConfirmation": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "This indicates the success or failure of the reservation.",
            "enum": [
              "Accepted",
              "Faulted",
              "Occupied",
              "Rejected",
              "Unavailable"
            ]
          }
        }
      },
      "ReserveNowReq": {
        "required": [
          "connectorId",
          "expiryDate",
          "idTag",
          "reservationId"
        ],
        "type": "object",
        "properties": {
          "connectorId": {
            "minimum": 0,
            "type": "integer",
            "description": "This contains the id of the connector to be reserved. A value of 0 means that the reservation is not for a specific connector.",
            "format": "int32"
          },
          "expiryDate": {
            "type": "string",
            "description": "This contains the date and time when the reservation ends.",
            "format": "date-time"
          },
          "idTag": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "The identifier for which the Charge Point has to reserve a connector. Case-insensitive, max length 20."
          },
          "parentIdTag": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "The parent idTag."
          },
          "reservationId": {
            "type": "integer",
            "description": "Unique id for this reservation.",
            "format": "int32"
          }
        }
      },
      "RemoteStopTransactionConfirmation": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status indicating whether Charge Point accepts the request to stop a transaction.",
            "enum": [
              "Accepted",
              "Rejected"
            ]
          }
        }
      },
      "RemoteStopTransactionReq": {
        "required": [
          "transactionId"
        ],
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "integer",
            "description": "This contains the identifier of the transaction which Charge Point is requested to stop.",
            "format": "int32"
          }
        }
      },
      "RemoteStartTransactionConfirmation": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status indicating whether Charge Point accepts the request to start a transaction.",
            "enum": [
              "Accepted",
              "Rejected"
            ]
          }
        }
      },
      "RemoteStartTransactionReq": {
        "required": [
          "idTag"
        ],
        "type": "object",
        "properties": {
          "connectorId": {
            "type": "integer",
            "description": "Number of the connector on which to start the transaction. connectorId SHALL be > 0.",
            "format": "int32"
          },
          "idTag": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "The identifier that Charge Point must use to start a transaction. Case-insensitive, max length 20. idTag of vehicle owner"
          },
          "chargingProfile": {
            "$ref": "#/components/schemas/OcppChargingProfile"
          }
        }
      },
      "GetDiagnosticsConfirmation": {
        "type": "object",
        "properties": {
          "fileName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "This contains the name of the file with diagnostic information that will be uploaded. This field is not present when no diagnostic information is available. Case-insensitive, max length 255."
          }
        }
      },
      "GetDiagnosticsReq": {
        "required": [
          "location"
        ],
        "type": "object",
        "properties": {
          "location": {
            "type": "string",
            "description": "This contains the location (directory) where the diagnostics file shall be uploaded to."
          },
          "retries": {
            "type": "integer",
            "description": "This specifies how many times Charge Point must retry to upload the diagnostics before giving up. If this field is not present, it is left to Charge Point to decide how many times it wants to retry.",
            "format": "int32"
          },
          "retryInterval": {
            "type": "integer",
            "description": "The interval in seconds after which a retry may be attempted. If this field is not present, it is left to Charge Point to decide how long to wait between attempts.",
            "format": "int32"
          },
          "startTime": {
            "type": "string",
            "description": "This contains the date and time of the oldest logging information to include in the diagnostics.",
            "format": "date-time"
          },
          "stopTime": {
            "type": "string",
            "description": "This contains the date and time of the latest logging information to include in the diagnostics.",
            "format": "date-time"
          }
        }
      },
      "GetCompositeScheduleConfirmation": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the request. The Charge Point will indicate if it was able to process the request.",
            "enum": [
              "Accepted",
              "Rejected"
            ]
          },
          "connectorId": {
            "type": "integer",
            "description": "The charging schedule contained in this notification applies to a Connector.",
            "format": "int32"
          },
          "scheduleStart": {
            "type": "string",
            "description": "Time. Periods contained in the charging profile are relative to this point in time. If status is \"Rejected\", this field may be absent.",
            "format": "date-time"
          },
          "chargingSchedule": {
            "$ref": "#/components/schemas/OcppChargingSchedule"
          }
        }
      },
      "GetCompositeScheduleReq": {
        "required": [
          "connectorId",
          "duration"
        ],
        "type": "object",
        "properties": {
          "connectorId": {
            "type": "integer",
            "description": "The ID of the Connector for which the schedule is requested. When ConnectorId=0, the Charge Point will calculate the expected consumption for the grid connection.",
            "format": "int32"
          },
          "duration": {
            "type": "integer",
            "description": "Time in seconds. length of requested schedule.",
            "format": "int32"
          },
          "chargingRateUnit": {
            "type": "string",
            "description": "Can be used to force a power or current profile.",
            "enum": [
              "W",
              "A"
            ]
          }
        }
      },
      "DataTransferConfirmation": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "This indicates the success or failure of the data transfer.",
            "enum": [
              "Accepted",
              "Rejected",
              "UnknownMessageId",
              "UnknownVendorId"
            ]
          },
          "data": {
            "type": "string",
            "description": "Data in response to request."
          }
        }
      },
      "DataTransferReq": {
        "required": [
          "vendorId"
        ],
        "type": "object",
        "properties": {
          "vendorId": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "This identifies the Vendor specific implementation. Case-insensitive, max length 255."
          },
          "messageId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Additional identification field. Case-insensitive, max length 50."
          },
          "data": {
            "type": "string",
            "description": "Data without specified length or format."
          }
        }
      },
      "ChangeConfigurationConfirmation": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Returns whether configuration change has been accepted.",
            "enum": [
              "Accepted",
              "Rejected",
              "RebootRequired",
              "NotSupported"
            ]
          }
        }
      },
      "ChangeConfigurationReq": {
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The name of the configuration setting to change. See for standard configuration key names and associated values. Case-insensitive, max length 50."
          },
          "value": {
            "maxLength": 500,
            "minLength": 0,
            "type": "string",
            "description": "The new value as string for the setting. See for standard configuration key names and associated values. Case-insensitive, max length 500."
          }
        }
      },
      "ClearChargingProfileConfirmation": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates if the Charge Point was able to execute the request.",
            "enum": [
              "Accepted",
              "Unknown"
            ]
          }
        }
      },
      "ClearChargingProfileReq": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the charging profile to clear.",
            "format": "int32"
          },
          "connectorId": {
            "type": "integer",
            "description": "Specifies the ID of the connector for which to clear charging profiles. A connectorId of zero (0) specifies the charging profile for the overall Charge Point. Absence of this parameter means the clearing applies to all charging profiles that match the other criteria in the request.",
            "format": "int32"
          },
          "chargingProfilePurpose": {
            "type": "string",
            "description": "Specifies to purpose of the charging profiles that will be cleared, if they meet the other criteria in the request.",
            "enum": [
              "ChargePointMaxProfile",
              "TxDefaultProfile",
              "TxProfile"
            ]
          },
          "stackLevel": {
            "type": "integer",
            "description": "Specifies the stackLevel for which charging profiles will be cleared, if they meet the other criteria in the request.",
            "format": "int32"
          }
        }
      },
      "ClearCacheConfirmation": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Accepted if the Charge Point has executed the request, otherwise rejected.",
            "enum": [
              "Accepted",
              "Rejected"
            ]
          }
        }
      },
      "ChangeAvailabilityConfirmation": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "This indicates whether the Charge Point is able to perform the availability change.",
            "enum": [
              "Accepted",
              "Rejected",
              "Scheduled"
            ]
          }
        }
      },
      "ChangeAvailabilityReq": {
        "required": [
          "connectorId",
          "type"
        ],
        "type": "object",
        "properties": {
          "connectorId": {
            "minimum": 0,
            "type": "integer",
            "description": "The id of the connector for which availability needs to change. Id '0' (zero) is used if the availability of the Charge Point and all its connectors needs to change.",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "description": "This contains the type of availability change that the Charge Point should perform.",
            "enum": [
              "Inoperative",
              "Operative"
            ]
          }
        }
      },
      "CancelReservationConfirmation": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "This indicates the success or failure of the cancelling of a reservation by Central System.",
            "enum": [
              "Accepted",
              "Rejected"
            ]
          }
        }
      },
      "CancelReservationReq": {
        "required": [
          "reservationId"
        ],
        "type": "object",
        "properties": {
          "reservationId": {
            "type": "integer",
            "description": "Id of the reservation to cancel.",
            "format": "int32"
          }
        }
      },
      "CsmsCreateRequest": {
        "required": [
          "csmsUrl",
          "displayName",
          "isCsmsCredentialsUsed",
          "isDefault"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Unique CSMS display name",
            "example": "EnergyStacks CSMS"
          },
          "csmsUrl": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^(ws:\\/\\/|wss:\\/\\/)+[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z0-9]{2,63}(:[0-9]{1,5})?(\\/.*)?$",
            "type": "string",
            "description": "CSMS URL",
            "example": "wss://csms.energystacks.io/ocpp/"
          },
          "isDefault": {
            "type": "boolean",
            "description": "Identifies if the current CSMS is the default one or not",
            "example": false
          },
          "username": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The user name of the CSMS credentials",
            "example": "user"
          },
          "password": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The password of the CSMS credentials",
            "example": "Pass@123"
          },
          "confirmPassword": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The confirmation password of the CSMS credentials",
            "example": "Pass@123"
          },
          "ocppProtocol": {
            "type": "string",
            "description": "Defines the OCPP protocol version which is supported by the CSMS in case only one version is supported. Will be used for protocol version translation",
            "enum": [
              "V_15",
              "V_16",
              "V_20",
              "V_201"
            ]
          },
          "isCsmsCredentialsUsed": {
            "type": "boolean",
            "description": "Identifies whether the CSMS credentials are going to be used or not.",
            "default": false
          }
        }
      },
      "CsmsPatchRequest": {
        "type": "object",
        "properties": {
          "usernameToBeRemoved": {
            "type": "boolean",
            "description": "Indicates whether the username should be set to null or not"
          },
          "passwordToBeRemoved": {
            "type": "boolean",
            "description": "Indicates whether the password should be set to null or not"
          }
        }
      },
      "BrokerTransaction": {
        "type": "object",
        "properties": {
          "identityKey": {
            "type": "string",
            "description": "The identity key of the charging station",
            "example": "ERG-WB-0238563"
          },
          "chargingStationName": {
            "type": "string",
            "description": "Name of the charging station",
            "example": "Charging Station 123"
          },
          "transactionId": {
            "type": "string",
            "description": "The transaction ID",
            "example": "157495"
          },
          "evseId": {
            "type": "string",
            "description": "The Evse ID of the connector",
            "example": "DE*ERG*E10001*1"
          },
          "connectorId": {
            "type": "integer",
            "description": "The connector ID",
            "format": "int32",
            "example": 1
          },
          "reservationId": {
            "type": "integer",
            "description": "The id of the reservation that terminates as a result of this transaction.",
            "format": "int32",
            "example": 4752
          },
          "idTagStart": {
            "type": "string",
            "description": "The identifier for which a transaction has to be started",
            "example": "08a8c5d2f13b9100"
          },
          "idTagInfoStart": {
            "$ref": "#/components/schemas/OcppIdTagInfo"
          },
          "idTagStop": {
            "type": "string",
            "description": "The identifier which requested to stop the charging. It is optional because a Charge Point may terminate charging without the presence of an idTag, e.g. in case of a reset.",
            "example": "08a8c5d2f13b9100"
          },
          "reason": {
            "type": "string",
            "description": "The reason for stopping a transaction",
            "example": "Local",
            "enum": [
              "DeAuthorized",
              "EmergencyStop",
              "EVDisconnected",
              "HardReset",
              "Local",
              "Other",
              "PowerLoss",
              "Reboot",
              "Remote",
              "SoftReset",
              "UnlockCommand"
            ]
          },
          "transactionData": {
            "type": "array",
            "description": "Transaction usage details relevant for billing purposes",
            "items": {
              "$ref": "#/components/schemas/OcppMeterValue"
            }
          },
          "meterValues": {
            "type": "array",
            "description": "Optional meter values sampled during the transaction",
            "items": {
              "$ref": "#/components/schemas/OcppMeterValue"
            }
          },
          "meterStart": {
            "type": "integer",
            "description": "The meter value in Wh for the connector at start of the transaction",
            "format": "int32",
            "example": 51021
          },
          "meterLatest": {
            "type": "integer",
            "description": "The latest meter value in Wh for the connector",
            "format": "int32",
            "example": 53129
          },
          "meterStop": {
            "type": "integer",
            "description": "The meter value in Wh for the connector at end of the transaction",
            "format": "int32",
            "example": 57418
          },
          "powerLatest": {
            "type": "number",
            "description": "The latest power in Watt measured for the connector",
            "example": 23125.56
          },
          "timestampStart": {
            "type": "string",
            "description": "The date and time on which the transaction is started",
            "format": "date-time",
            "example": "2024-03-19T14:11:43Z"
          },
          "timestampStop": {
            "type": "string",
            "description": "The date and time on which the transaction is stopped",
            "format": "date-time",
            "example": "2024-03-19T14:11:43Z"
          },
          "timestampLastUpdate": {
            "type": "string",
            "description": "The date and time on which the transaction was updated",
            "format": "date-time",
            "example": "2024-03-19T14:11:43Z"
          }
        }
      },
      "OcppIdTagInfo": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "expiryDate": {
            "type": "string",
            "description": "This contains the date at which idTag should be removed from the Authorization Cache.",
            "format": "date-time"
          },
          "parentIdTag": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "This contains the parent-identifier. Case-insensitive, max length 20."
          },
          "status": {
            "type": "string",
            "description": "This contains whether the idTag has been accepted or not by the Central System.",
            "enum": [
              "Accepted",
              "Blocked",
              "Expired",
              "Invalid",
              "ConcurrentTx"
            ]
          }
        },
        "description": "Information about authorization status expiry and parent id."
      },
      "OcppMeterValue": {
        "required": [
          "sampledValue",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "Timestamp for measured value(s).",
            "format": "date-time"
          },
          "sampledValue": {
            "type": "array",
            "description": "One or more measured values",
            "items": {
              "$ref": "#/components/schemas/OcppSampledValue"
            }
          }
        },
        "description": "Optional meter values sampled during the transaction"
      },
      "OcppSampledValue": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Value as a “Raw” (decimal) number or “SignedData”. Field Type is “string” to allow for digitally signed data readings. Decimal numeric values are also acceptable to allow fractional values for measurands such as Temperature and Current."
          },
          "context": {
            "type": "string",
            "description": "Type of detail value: start, end or sample.",
            "example": "Sample.Periodic",
            "enum": [
              "Interruption.Begin",
              "Interruption.End",
              "Other",
              "Sample.Clock",
              "Sample.Periodic",
              "Transaction.Begin",
              "Transaction.End",
              "Trigger"
            ]
          },
          "format": {
            "type": "string",
            "description": "Raw or signed data. Default = “Raw”",
            "example": "Raw",
            "enum": [
              "Raw",
              "SignedData"
            ]
          },
          "measurand": {
            "type": "string",
            "description": "Type of measurement.",
            "example": "Energy.Active.Import.Register",
            "enum": [
              "Current.Export",
              "Current.Import",
              "Current.Offered",
              "Energy.Active.Export.Register",
              "Energy.Active.Import.Register",
              "Energy.Reactive.Export.Register",
              "Energy.Reactive.Import.Register",
              "Energy.Active.Export.Interval",
              "Energy.Active.Import.Interval",
              "Energy.Reactive.Export.Interval",
              "Energy.Reactive.Import.Interval",
              "Frequency",
              "Power.Active.Export",
              "Power.Active.Import",
              "Power.Factor",
              "Power.Offered",
              "Power.Reactive.Export",
              "Power.Reactive.Import",
              "RPM",
              "SoC",
              "Temperature",
              "Voltage"
            ]
          },
          "phase": {
            "type": "string",
            "description": "Indicates how the measured value is to be interpreted. For instance between L1 and neutral (L1-N) Please note that not all values of phase are applicable to all Measurands. When phase is absent, the measured value is interpreted as an overall value.",
            "enum": [
              "L1",
              "L2",
              "L3",
              "N",
              "L1-N",
              "L2-N",
              "L3-N",
              "L1-L2",
              "L2-L3",
              "L3-L1"
            ]
          },
          "location": {
            "type": "string",
            "description": "Location of measurement. Default=”Outlet”",
            "example": "Outlet",
            "enum": [
              "Body",
              "Cable",
              "EV",
              "Inlet",
              "Outlet"
            ]
          },
          "unit": {
            "type": "string",
            "description": "Unit of the value.",
            "example": "Wh",
            "enum": [
              "Wh",
              "kWh",
              "varh",
              "kvarh",
              "W",
              "kW",
              "VA",
              "kVA",
              "var",
              "kvar",
              "A",
              "V",
              "Celsius",
              "Fahrenheit",
              "K",
              "Percent"
            ]
          }
        },
        "description": "One or more measured values"
      },
      "Pageable": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ChargingStationShadowSecurityEvent": {
        "required": [
          "identityKey",
          "type"
        ],
        "type": "object",
        "properties": {
          "identityKey": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "The Identity Key of the Charging Station",
            "example": "ERG-WB-0238563"
          },
          "type": {
            "type": "string",
            "description": "The type of the security event",
            "example": "StartupOfTheDevice"
          },
          "techInfo": {
            "type": "string",
            "description": "Additional information about the occurred security event"
          },
          "timestamp": {
            "type": "string",
            "description": "The date and time at which the security event occurred",
            "format": "date-time",
            "example": "2024-03-19T14:11:43Z"
          }
        }
      },
      "BrokerChargingStationShadowVariable": {
        "required": [
          "variableAttribute"
        ],
        "type": "object",
        "properties": {
          "component": {
            "type": "string",
            "description": "The component name",
            "example": "LocalAuthListCtrlr"
          },
          "variable": {
            "type": "string",
            "description": "The variable name",
            "example": "Enabled"
          },
          "variableCharacteristics": {
            "$ref": "#/components/schemas/OcppVariableCharacteristicsType"
          },
          "variableAttribute": {
            "maxItems": 4,
            "minItems": 0,
            "type": "array",
            "description": "The attribute data of the variable",
            "items": {
              "$ref": "#/components/schemas/OcppVariableAttributeType"
            }
          },
          "dateLastUpdate": {
            "type": "string",
            "description": "The date and time of the configuration key shadow",
            "format": "date-time",
            "example": "2024-03-19T14:11:43Z"
          }
        }
      },
      "OcppVariableAttributeType": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Optional. Attribute: Actual, MinSet, MaxSet, etc. Defaults to Actual if absent.",
            "enum": [
              "Actual",
              "Target",
              "MinSet",
              "MaxSet"
            ]
          },
          "value": {
            "maxLength": 2500,
            "minLength": 0,
            "type": "string",
            "description": "Optional. Value of the attribute. May only be omitted when mutability is set to 'WriteOnly'. The Configuration Variable ReportingValueSize can be used to limit GetVariableResult.attributeValue, VariableAttribute.value and EventData.actualValue. The max size of these values will always remain equal."
          },
          "mutability": {
            "type": "string",
            "description": "Optional. Defines the mutability of this attribute. Default is ReadWrite when omitted.",
            "enum": [
              "ReadOnly",
              "WriteOnly",
              "ReadWrite"
            ]
          },
          "persistent": {
            "type": "boolean",
            "description": "Optional. If true, value will be persistent across system reboots or power down. Default when omitted is false"
          },
          "constant": {
            "type": "boolean",
            "description": "Optional. If true, value that will never be changed by the Charging Station at runtime. Default when omitted is false."
          }
        },
        "description": "The attribute data of the variable"
      },
      "OcppVariableCharacteristicsType": {
        "required": [
          "dataType",
          "supportsMonitoring"
        ],
        "type": "object",
        "properties": {
          "unit": {
            "maxLength": 16,
            "minLength": 0,
            "type": "string",
            "description": "Optional. Unit of the variable. When the transmitted value has a unit, this field SHALL be included."
          },
          "dataType": {
            "type": "string",
            "description": "Required. Data type of this variable.",
            "enum": [
              "string",
              "decimal",
              "integer",
              "dateTime",
              "boolean",
              "OptionList",
              "SequenceList",
              "MemberList"
            ]
          },
          "minLimit": {
            "type": "number",
            "description": "Optional. Minimum possible value of this variable.",
            "format": "float"
          },
          "maxLimit": {
            "type": "number",
            "description": "Optional. Maximum possible value of this variable. When the datatype of this Variable is String, OptionList, SequenceList or MemberList, this field defines the maximum length of the (CSV) string.",
            "format": "float"
          },
          "valuesList": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Optional. Allowed values when variable is\n     Option/Member/SequenceList.\n     * OptionList: The (Actual) Variable value must be a single\n     value from the reported (CSV) enumeration list.\n     * MemberList: The (Actual) Variable value may be an\n     (unordered) (sub-)set of the reported (CSV) valid values\n     list.\n     * SequenceList: The (Actual) Variable value may be an\n     ordered (priority, etc) (sub-)set of the reported (CSV) valid\n     values.\n     This is a comma separated list.\n     The Configuration Variable ConfigurationValueSize can\n     be used to limit SetVariableData.attributeValue and\n     VariableCharacteristics.valueList. The max size of these\n     values will always remain equal."
          },
          "supportsMonitoring": {
            "type": "boolean",
            "description": "Required. Flag indicating if this variable supports monitoring."
          }
        },
        "description": "The parameters of the variable"
      },
      "BrokerChargingStationShadowConfiguration": {
        "type": "object",
        "properties": {
          "configurationKey": {
            "type": "string",
            "description": "The configuration key",
            "example": "AllowOfflineTxForUnknownId"
          },
          "value": {
            "type": "string",
            "description": "The configuration value",
            "example": "1"
          },
          "readonly": {
            "type": "boolean",
            "description": "Indicates if the configuration key is readonly",
            "example": false
          },
          "dateLastUpdate": {
            "type": "string",
            "description": "The date and time of the configuration key shadow",
            "format": "date-time",
            "example": "2024-03-19T14:11:43Z"
          }
        }
      },
      "GetLocalListVersionConfirmation": {
        "required": [
          "listVersion"
        ],
        "type": "object",
        "properties": {
          "listVersion": {
            "type": "integer",
            "description": "This contains the current version number of the local authorization list in the Charge Point.",
            "format": "int32"
          }
        }
      },
      "GetConfigurationConfirmation": {
        "type": "object",
        "properties": {
          "configurationKey": {
            "type": "array",
            "description": "List of requested or known keys.",
            "items": {
              "$ref": "#/components/schemas/OcppKeyValue"
            }
          },
          "unknownKey": {
            "type": "array",
            "description": "Requested keys that are unknown. Keys are case-insensitive, with max length = 50.",
            "items": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string",
              "description": "Requested keys that are unknown. Keys are case-insensitive, with max length = 50."
            }
          }
        }
      },
      "OcppKeyValue": {
        "required": [
          "key",
          "readonly"
        ],
        "type": "object",
        "properties": {
          "key": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Case-insensitive, max length 50."
          },
          "readonly": {
            "type": "boolean",
            "description": "False if the value can be set with the ChangeConfiguration message."
          },
          "value": {
            "maxLength": 500,
            "minLength": 0,
            "type": "string",
            "description": "If key is known but not set, this field may be absent. Case-insensitive, max length 500."
          }
        },
        "description": "List of requested or known keys."
      }
    },
    "examples": {
      "UNSORTABLE_COLUMN": {
        "value": "{\n  \"message\" : \"The entered sorting column is not sortable in ElasticSearch (Column is not a @Keyword).\",\n  \"errorCode\" : \"UNSORTABLE_COLUMN\"\n}"
      },
      "REST_STATUS_ELASTICSEARCH_RELATED": {
        "value": "{\n  \"message\" : \"RestStatusException related to ElasticSearch\",\n  \"errorCode\" : \"REST_STATUS_ELASTICSEARCH_RELATED\"\n}"
      },
      "ALERT_ALREADY_CREATED": {
        "value": "{\n  \"message\" : \"Alert already exists\",\n  \"errorCode\" : \"ALERT_ALREADY_CREATED\"\n}"
      },
      "ALERT_NOT_FOUND": {
        "value": "{\n  \"message\" : \"Alert not found\",\n  \"errorCode\" : \"ALERT_NOT_FOUND\"\n}"
      },
      "ALERT_DOESNT_EXIST": {
        "value": "{\n  \"message\" : \"Alert with this connectorId and identityKey doesn't exist\",\n  \"errorCode\" : \"ALERT_DOESNT_EXIST\"\n}"
      },
      "END_DATETIME_NOT_AFTER_START_DATETIME": {
        "value": "{\n  \"message\" : \"timeTo cannot be before or equal to timeFrom.\",\n  \"errorCode\" : \"END_DATETIME_NOT_AFTER_START_DATETIME\"\n}"
      },
      "PROCESSING_ERROR": {
        "value": "{\n  \"message\" : \"Error while processing the data\",\n  \"errorCode\" : \"PROCESSING_ERROR\"\n}"
      },
      "ACCESS_DENIED": {
        "value": "{\n  \"message\" : \"Access to route has been denied.\",\n  \"errorCode\" : \"ACCESS_DENIED\"\n}"
      },
      "INTERNAL_SERVER_ERROR": {
        "value": "{\n  \"message\" : \"An error occurred\",\n  \"errorCode\" : \"INTERNAL_SERVER_ERROR\"\n}"
      },
      "BAD_REQUEST": {
        "value": "{\n  \"message\" : \"Bad request\",\n  \"errorCode\" : \"BAD_REQUEST\"\n}"
      },
      "NOT_FOUND": {
        "value": "{\n  \"message\" : \"Requested object not found\",\n  \"errorCode\" : \"NOT_FOUND\"\n}"
      },
      "UNAUTHORIZED": {
        "value": "{\n  \"message\" : \"Unauthorized\",\n  \"errorCode\" : \"UNAUTHORIZED\"\n}"
      },
      "FORBIDDEN": {
        "value": "{\n  \"message\" : \"Forbidden\",\n  \"errorCode\" : \"FORBIDDEN\"\n}"
      },
      "UNAUTHENTICATED": {
        "value": "{\n  \"message\" : \"Unauthenticated\",\n  \"errorCode\" : \"UNAUTHENTICATED\"\n}"
      },
      "METHOD_ARGUMENT_TYPE_MISMATCH": {
        "value": "{\n  \"message\" : \"Failed to convert value to required type\",\n  \"errorCode\" : \"METHOD_ARGUMENT_TYPE_MISMATCH\"\n}"
      },
      "MAXIMUM_UPLOAD_SIZE_EXCEEDED": {
        "value": "{\n  \"message\" : \"Maximum upload size exceeded\",\n  \"errorCode\" : \"MAXIMUM_UPLOAD_SIZE_EXCEEDED\"\n}"
      },
      "METHOD_NOT_ALLOWED": {
        "value": "{\n  \"message\" : \"Request method is not supported\",\n  \"errorCode\" : \"METHOD_NOT_ALLOWED\"\n}"
      },
      "MISSING_REQUEST_PARAMETER": {
        "value": "{\n  \"message\" : \"Required request parameter is not present\",\n  \"errorCode\" : \"MISSING_REQUEST_PARAMETER\"\n}"
      },
      "MISSING_REQUEST_PART": {
        "value": "{\n  \"message\" : \"Required request part is not present\",\n  \"errorCode\" : \"MISSING_REQUEST_PART\"\n}"
      },
      "UNSUPPORTED_MEDIA_TYPE": {
        "value": "{\n  \"message\" : \"Media type is not supported\",\n  \"errorCode\" : \"UNSUPPORTED_MEDIA_TYPE\"\n}"
      },
      "LIST_CONTAINS_NULL_VALUES": {
        "value": "{\n  \"message\" : \"List contains null values\",\n  \"errorCode\" : \"LIST_CONTAINS_NULL_VALUES\"\n}"
      },
      "REMOTE_CALL_FAILED": {
        "value": "{\n  \"message\" : \"Call to remote API returned an error response\",\n  \"errorCode\" : \"REMOTE_CALL_FAILED\"\n}"
      },
      "ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"Object already exists\",\n  \"errorCode\" : \"ALREADY_EXISTS\"\n}"
      },
      "SOFTLY_DELETED": {
        "value": "{\n  \"message\" : \"Object is softly deleted\",\n  \"errorCode\" : \"SOFTLY_DELETED\"\n}"
      },
      "WRONG_SORTING_COLUMN": {
        "value": "{\n  \"message\" : \"The entered sorting column name does not exist.\",\n  \"errorCode\" : \"WRONG_SORTING_COLUMN\"\n}"
      },
      "COULD_NOT_EXTRACT_ERROR_FROM_RESPONSE": {
        "value": "{\n  \"message\" : \"Could not extract error from the response.\",\n  \"errorCode\" : \"COULD_NOT_EXTRACT_ERROR_FROM_RESPONSE\"\n}"
      },
      "FAILED_TO_DELETE_TEMPORARY_FILE": {
        "value": "{\n  \"message\" : \"Failed to delete temporary file\",\n  \"errorCode\" : \"FAILED_TO_DELETE_TEMPORARY_FILE\"\n}"
      },
      "TENANT_ID_MUST_BE_SINGLETON": {
        "value": "{\n  \"message\" : \"Tenant ID must be a single value parameter\",\n  \"errorCode\" : \"TENANT_ID_MUST_BE_SINGLETON\"\n}"
      },
      "TENANT_ID_MUST_BE_INTEGER": {
        "value": "{\n  \"message\" : \"Tenant ID must be integer\",\n  \"errorCode\" : \"TENANT_ID_MUST_BE_INTEGER\"\n}"
      },
      "INVALID_PROPERTY": {
        "value": "{\n  \"message\" : \"Requested property is not valid.\",\n  \"errorCode\" : \"INVALID_PROPERTY\"\n}"
      },
      "RPC_TIMEOUT": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] The RPC call to the charging station did not respond in time.\",\n  \"errorCode\" : \"RPC_TIMEOUT\"\n}"
      },
      "RPC_ERROR": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] An error occured during the remote procedure call\",\n  \"errorCode\" : \"RPC_ERROR\"\n}"
      },
      "UNABLE_TO_DELETE_CSMS": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] Cannot delete CSMS with connected charging stations to it.\",\n  \"errorCode\" : \"UNABLE_TO_DELETE_CSMS\"\n}"
      },
      "NOT_UNIQUE_NAME": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] Provided name is not unique.\",\n  \"errorCode\" : \"NOT_UNIQUE_NAME\"\n}"
      },
      "DEFAULT_CSMS_CANNOT_CHANGE_TO_NOT_DEFAULT": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] Default CSMS cannot change to not-default.\",\n  \"errorCode\" : \"DEFAULT_CSMS_CANNOT_CHANGE_TO_NOT_DEFAULT\"\n}"
      },
      "CANNOT_DELETE_DEFAULT_CSMS": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] Cannot delete Default CSMS, unless it is the only one and with no connected charging stations to it.\",\n  \"errorCode\" : \"CANNOT_DELETE_DEFAULT_CSMS\"\n}"
      },
      "CSMS_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] Requested CSMS not found.\",\n  \"errorCode\" : \"CSMS_NOT_FOUND\"\n}"
      },
      "CSMS_URL_ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] Provided CSMS url is not unique.\",\n  \"errorCode\" : \"CSMS_URL_ALREADY_EXISTS\"\n}"
      },
      "CHARGING_STATION_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] Requested Charging Station not found.\",\n  \"errorCode\" : \"CHARGING_STATION_NOT_FOUND\"\n}"
      },
      "UNABLE_TO_CONNECT_TO_CSMS": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] Cannot connect to CSMS, endpoint is not reachable\",\n  \"errorCode\" : \"UNABLE_TO_CONNECT_TO_CSMS\"\n}"
      },
      "CHARGING_STATION_IDENTITY_KEY_ALREADY_EXISTS": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] A Charging Station with the same Identity key already exists.\",\n  \"errorCode\" : \"CHARGING_STATION_IDENTITY_KEY_ALREADY_EXISTS\"\n}"
      },
      "BIG_QUERY_CONNECTION": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] BigQuery connection error\",\n  \"errorCode\" : \"BIG_QUERY_CONNECTION\"\n}"
      },
      "WRONG_OCPP_VERSION": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] The negotiated OCPP protocol version is not supporting this request\",\n  \"errorCode\" : \"WRONG_OCPP_VERSION\"\n}"
      },
      "CHARGING_STATION_SHADOW_CONNECTOR_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] Requested Charging Station Shadow Connector not found.\",\n  \"errorCode\" : \"CHARGING_STATION_SHADOW_CONNECTOR_NOT_FOUND\"\n}"
      },
      "LOCATION_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] Location with the specified UUID not found\",\n  \"errorCode\" : \"LOCATION_NOT_FOUND\"\n}"
      },
      "INVALID_IDENTITY_KEY": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] One or more specified charging station identity keys are not valid\",\n  \"errorCode\" : \"INVALID_IDENTITY_KEY\"\n}"
      },
      "FAILED_TO_DELETE_LOCATION": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] Failed to delete Location which has charging station/s bound to it\",\n  \"errorCode\" : \"FAILED_TO_DELETE_LOCATION\"\n}"
      },
      "INVALID_LOCATION_RELATION": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] One or more charging stations are not assigned to the specified location\",\n  \"errorCode\" : \"INVALID_LOCATION_RELATION\"\n}"
      },
      "WRONG_PASSWORD": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] The given password does not match with the confirmation password\",\n  \"errorCode\" : \"WRONG_PASSWORD\"\n}"
      },
      "UNABLE_TO_UPDATE_CSMS_CREDENTIALS": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] No changes were requested.\",\n  \"errorCode\" : \"UNABLE_TO_UPDATE_CSMS_CREDENTIALS\"\n}"
      },
      "DUPLICATE_CONNECTOR_ID": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] Connectors with the same id in the request.\",\n  \"errorCode\" : \"DUPLICATE_CONNECTOR_ID\"\n}"
      },
      "PAGE_SIZE_EXCEEDED": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] Max number of the results per page is 100.\",\n  \"errorCode\" : \"PAGE_SIZE_EXCEEDED\"\n}"
      },
      "TARIFF_NOT_FOUND": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] Tariff with the specified UUID not found\",\n  \"errorCode\" : \"TARIFF_NOT_FOUND\"\n}"
      },
      "EVSE_ID_NOT_UNIQUE": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] Provided EVSE ID already exists.\",\n  \"errorCode\" : \"EVSE_ID_NOT_UNIQUE\"\n}"
      },
      "EVSE_ID_DUPLICATES": {
        "value": "{\n  \"message\" : \"[OCPP-BROKER] Two or more EVSE ID's are identical. All EVSE ID's must be unique.\",\n  \"errorCode\" : \"EVSE_ID_DUPLICATES\"\n}"
      },
      "RABBITMQ_LISTENER_ERROR": {
        "value": "{\n  \"message\" : \"[RABBITMQ] An error occurred in RabbitMQ listener\",\n  \"errorCode\" : \"RABBITMQ_LISTENER_ERROR\"\n}"
      },
      "INVALID_RABBITMQ_RPC_RESPONSE": {
        "value": "{\n  \"message\" : \"[RABBITMQ] Invalid RabbitMQ RPC response\",\n  \"errorCode\" : \"INVALID_RABBITMQ_RPC_RESPONSE\"\n}"
      },
      "USER_NOT_FOUND": {
        "value": "{\n  \"message\" : \"The entered user does not exist.\",\n  \"errorCode\" : \"USER_NOT_FOUND\"\n}"
      },
      "USER_ALREADY_HAS_ACCESS": {
        "value": "{\n  \"message\" : \"The user already has access\",\n  \"errorCode\" : \"USER_ALREADY_HAS_ACCESS\"\n}"
      },
      "USER_ACCESS_REQUEST_NOT_FOUND": {
        "value": "{\n  \"message\" : \"The entered user access request does not exist.\",\n  \"errorCode\" : \"USER_ACCESS_REQUEST_NOT_FOUND\"\n}"
      },
      "FILE_IS_NOT_IMAGE": {
        "value": "{\n  \"message\" : \"The file isn't image.\",\n  \"errorCode\" : \"FILE_IS_NOT_IMAGE\"\n}"
      },
      "FORMAT_NOT_SUPPORTED": {
        "value": "{\n  \"message\" : \"The logo format not supported\",\n  \"errorCode\" : \"FORMAT_NOT_SUPPORTED\"\n}"
      },
      "EXTENSION_MISSING": {
        "value": "{\n  \"message\" : \"The logo extension missing\",\n  \"errorCode\" : \"EXTENSION_MISSING\"\n}"
      }
    },
    "headers": {
      "api-category": {
        "description": "Broker Services",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "display-name": {
        "description": "OCCP Broker",
        "required": false,
        "schema": {
          "type": "string"
        }
      }
    }
  }
}